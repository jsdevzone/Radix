webpackJsonp([0,2],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Radix Accounting System
	 * @author Jasim
	 * @company Palmtrix Solutions, Cochin
	 *
	 * Copyright (C) 2015-2016 Palmtrix Solutions <info@palmtrix.com>
	 *
	 * Radix can not be copied and/or distributed without the express
	 * permission of Palmtrix Solutions, Cochin.
	 */
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _Window = __webpack_require__(224);
	
	var _navbar = __webpack_require__(236);
	
	var _applicationMenu = __webpack_require__(239);
	
	var _appSidebar = __webpack_require__(264);
	
	var _tileView = __webpack_require__(267);
	
	var _transactionTileView = __webpack_require__(272);
	
	var _tileBar = __webpack_require__(273);
	
	var _toolbar = __webpack_require__(241);
	
	var _menu = __webpack_require__(274);
	
	var _tabPanel = __webpack_require__(245);
	
	var _collapsibleSidebar = __webpack_require__(275);
	
	__webpack_require__(281);
	
	__webpack_require__(288);
	
	__webpack_require__(296);
	
	__webpack_require__(298);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Load common style sheet
	 * @bootstrap
	 * @font-awesome
	 * @application
	 */
	
	/**
	 * Application's Entry point
	 * @class Application
	 * @extends React.Component
	 */
	
	var Application = function (_React$Component) {
	    _inherits(Application, _React$Component);
	
	    function Application() {
	        _classCallCheck(this, Application);
	
	        return _possibleConstructorReturn(this, Object.getPrototypeOf(Application).apply(this, arguments));
	    }
	
	    _createClass(Application, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {}
	
	        /**
	         * @render
	         * @return {HTMLDivElement} container
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'ptrix-container' },
	                _react2.default.createElement(_navbar.Navbar, null),
	                _react2.default.createElement(_applicationMenu.ApplicationMenu, null),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'x-app-container' },
	                    _react2.default.createElement(_appSidebar.ApplicationSidebar, null),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { flex: 1, display: 'flex', flexDirection: 'column' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { paddingLeft: 10, paddingBottom: 0, backgroundColor: 'white', borderBottom: 'solid 1px #D4D4D4' } },
	                            _react2.default.createElement(
	                                'ul',
	                                { className: 'p-dashboard-statitics clearfix' },
	                                _react2.default.createElement(
	                                    'li',
	                                    null,
	                                    _react2.default.createElement(
	                                        'span',
	                                        { className: 'title' },
	                                        _react2.default.createElement('i', { className: 'fa fa-dot-circle-o' }),
	                                        ' Total Profit'
	                                    ),
	                                    _react2.default.createElement(
	                                        'h3',
	                                        null,
	                                        '$36.45'
	                                    ),
	                                    _react2.default.createElement(
	                                        'span',
	                                        { className: 'diff' },
	                                        _react2.default.createElement(
	                                            'b',
	                                            { className: 'color-down' },
	                                            _react2.default.createElement('i', { className: 'fa fa-caret-down' }),
	                                            ' 26%'
	                                        ),
	                                        ' from yesterday'
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'li',
	                                    null,
	                                    _react2.default.createElement(
	                                        'span',
	                                        { className: 'title' },
	                                        _react2.default.createElement('i', { className: 'fa fa-calendar-o' }),
	                                        ' Today Profit'
	                                    ),
	                                    _react2.default.createElement(
	                                        'h3',
	                                        null,
	                                        '$36.45'
	                                    ),
	                                    _react2.default.createElement(
	                                        'span',
	                                        { className: 'diff' },
	                                        _react2.default.createElement(
	                                            'b',
	                                            { className: 'color-up' },
	                                            _react2.default.createElement('i', { className: 'fa fa-caret-down' }),
	                                            ' 26%'
	                                        ),
	                                        ' from last week'
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'li',
	                                    null,
	                                    _react2.default.createElement(
	                                        'span',
	                                        { className: 'title' },
	                                        _react2.default.createElement('i', { className: 'fa fa fa-shopping-cart' }),
	                                        ' Total Sales'
	                                    ),
	                                    _react2.default.createElement(
	                                        'h3',
	                                        { className: 'color-up' },
	                                        '696'
	                                    ),
	                                    _react2.default.createElement(
	                                        'span',
	                                        { className: 'diff' },
	                                        _react2.default.createElement(
	                                            'b',
	                                            { className: 'color-down' },
	                                            _react2.default.createElement('i', { className: 'fa fa-caret-up' }),
	                                            ' 26%'
	                                        ),
	                                        ' from last month'
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'li',
	                                    null,
	                                    _react2.default.createElement(
	                                        'span',
	                                        { className: 'title' },
	                                        _react2.default.createElement('i', { className: 'fa fa-clock-o' }),
	                                        ' Visitors'
	                                    ),
	                                    _react2.default.createElement(
	                                        'h3',
	                                        null,
	                                        '960'
	                                    ),
	                                    _react2.default.createElement(
	                                        'span',
	                                        { className: 'diff' },
	                                        _react2.default.createElement(
	                                            'b',
	                                            { className: 'color-down' },
	                                            _react2.default.createElement('i', { className: 'fa fa-caret-down' }),
	                                            ' 26%'
	                                        ),
	                                        'from yesterday'
	                                    )
	                                )
	                            )
	                        ),
	                        _react2.default.createElement(
	                            _tabPanel.TabPanel,
	                            null,
	                            _react2.default.createElement(
	                                _tabPanel.Tab,
	                                { title: 'Welcome' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { style: { backgroundColor: '#ECEEF1', padding: 0, position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, display: 'flex', flexDirection: 'row' } },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'p-welcome', style: { flex: 1 } },
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'welcome-logo' },
	                                            _react2.default.createElement('img', { src: 'assets/images/theme/cloud9_logo.png ' }),
	                                            _react2.default.createElement(
	                                                'div',
	                                                { className: 'welcome-heading' },
	                                                'Welcome'
	                                            ),
	                                            _react2.default.createElement(
	                                                'div',
	                                                { className: 'presets' },
	                                                _react2.default.createElement(
	                                                    'h3',
	                                                    null,
	                                                    'Select an action'
	                                                ),
	                                                _react2.default.createElement(
	                                                    'div',
	                                                    { className: 'preset-container' },
	                                                    _react2.default.createElement(_tileView.TileView, null)
	                                                )
	                                            ),
	                                            _react2.default.createElement(
	                                                'div',
	                                                { className: 'presets', style: { marginTop: '-18px' } },
	                                                _react2.default.createElement(
	                                                    'h3',
	                                                    null,
	                                                    'Select an action'
	                                                ),
	                                                _react2.default.createElement(
	                                                    'div',
	                                                    { className: 'preset-container' },
	                                                    _react2.default.createElement(_transactionTileView.TransactionTileView, null)
	                                                )
	                                            )
	                                        )
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'p-panel' },
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'p-scroller' },
	                                            _react2.default.createElement(
	                                                'div',
	                                                { className: 'p-frame' },
	                                                _react2.default.createElement(
	                                                    'div',
	                                                    { className: 'p-title' },
	                                                    _react2.default.createElement('i', { className: 'fa fa-angle-right' }),
	                                                    _react2.default.createElement(
	                                                        'span',
	                                                        null,
	                                                        'Recent Purchasr Orders'
	                                                    )
	                                                ),
	                                                _react2.default.createElement(
	                                                    'div',
	                                                    { className: 'p-body' },
	                                                    _react2.default.createElement(
	                                                        'div',
	                                                        { className: 'p-table' },
	                                                        _react2.default.createElement(
	                                                            'div',
	                                                            { className: 'p-headings' },
	                                                            _react2.default.createElement(
	                                                                'span',
	                                                                { className: 'p-column ', style: { width: '50%' } },
	                                                                'Customer'
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'span',
	                                                                { className: 'p-column ', style: { width: '30%' } },
	                                                                'Date'
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'span',
	                                                                { className: 'p-column ', style: { width: '20%' } },
	                                                                'Amount'
	                                                            )
	                                                        ),
	                                                        _react2.default.createElement(
	                                                            'div',
	                                                            null,
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'Beau Basil Dorothy'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '22/12/2014'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$110.00'
	                                                                )
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'Nicholas Diana Brock'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '05/10/2014'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$600.00'
	                                                                )
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'Dillon Courtney Teagan'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '20/05/2015'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$120.00'
	                                                                )
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'Lareina Ursa'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '10/02/2014'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$700.00'
	                                                                )
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'QuembyKaryn Oma'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '01/05/2013'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$400.25'
	                                                                )
	                                                            )
	                                                        )
	                                                    )
	                                                )
	                                            ),
	                                            _react2.default.createElement(
	                                                'div',
	                                                { className: 'p-frame' },
	                                                _react2.default.createElement(
	                                                    'div',
	                                                    { className: 'p-title' },
	                                                    _react2.default.createElement('i', { className: 'fa fa-angle-right' }),
	                                                    _react2.default.createElement(
	                                                        'span',
	                                                        null,
	                                                        'Recent Invoices'
	                                                    )
	                                                ),
	                                                _react2.default.createElement(
	                                                    'div',
	                                                    { className: 'p-body' },
	                                                    _react2.default.createElement(
	                                                        'div',
	                                                        { className: 'p-table' },
	                                                        _react2.default.createElement(
	                                                            'div',
	                                                            { className: 'p-headings' },
	                                                            _react2.default.createElement(
	                                                                'span',
	                                                                { className: 'p-column ', style: { width: '50%' } },
	                                                                'Customer'
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'span',
	                                                                { className: 'p-column ', style: { width: '30%' } },
	                                                                'Date'
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'span',
	                                                                { className: 'p-column ', style: { width: '20%' } },
	                                                                'Amount'
	                                                            )
	                                                        ),
	                                                        _react2.default.createElement(
	                                                            'div',
	                                                            null,
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'Carey Leffler'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '10/12/2014'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$100.00'
	                                                                )
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'Russel Esmedilla'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '10/10/2014'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$450.00'
	                                                                )
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'Brennan Hagenes'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '10/05/2015'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$120.00'
	                                                                )
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'Nikolas Rau'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '10/02/2014'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$250.00'
	                                                                )
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'Brandyn Larkin'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '05/05/2013'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$375.25'
	                                                                )
	                                                            )
	                                                        )
	                                                    )
	                                                )
	                                            ),
	                                            _react2.default.createElement(
	                                                'div',
	                                                { className: 'p-frame' },
	                                                _react2.default.createElement(
	                                                    'div',
	                                                    { className: 'p-title' },
	                                                    _react2.default.createElement('i', { className: 'fa fa-angle-right' }),
	                                                    _react2.default.createElement(
	                                                        'span',
	                                                        null,
	                                                        'Bank Statements'
	                                                    )
	                                                ),
	                                                _react2.default.createElement(
	                                                    'div',
	                                                    { className: 'p-body' },
	                                                    _react2.default.createElement(
	                                                        'div',
	                                                        { className: 'p-table' },
	                                                        _react2.default.createElement(
	                                                            'div',
	                                                            { className: 'p-headings' },
	                                                            _react2.default.createElement(
	                                                                'span',
	                                                                { className: 'p-column ', style: { width: '50%' } },
	                                                                'Customer'
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'span',
	                                                                { className: 'p-column ', style: { width: '30%' } },
	                                                                'Date'
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'span',
	                                                                { className: 'p-column ', style: { width: '20%' } },
	                                                                'Amount'
	                                                            )
	                                                        ),
	                                                        _react2.default.createElement(
	                                                            'div',
	                                                            null,
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'Carey Leffler'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '10/12/2014'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$100.00'
	                                                                )
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'GradyHilel, Nerea'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '10/10/2014'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$450.00'
	                                                                )
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'Emerald Hagenes'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '10/05/2015'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$120.00'
	                                                                )
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'Nikolas SybillRau'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '10/02/2014'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$250.00'
	                                                                )
	                                                            ),
	                                                            _react2.default.createElement(
	                                                                'div',
	                                                                { className: 'p-row' },
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '50%' } },
	                                                                    'Jin Arthur'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '30%' } },
	                                                                    '05/05/2013'
	                                                                ),
	                                                                _react2.default.createElement(
	                                                                    'span',
	                                                                    { className: 'p-column ', style: { width: '20%' } },
	                                                                    '$375.25'
	                                                                )
	                                                            )
	                                                        )
	                                                    )
	                                                )
	                                            )
	                                        )
	                                    )
	                                )
	                            ),
	                            _react2.default.createElement(_tabPanel.Tab, { title: 'Purchase Order List' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'p-tool-panel' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'p-status-bar' },
	                                _react2.default.createElement('div', { className: 'p-flexbox-repaint-hack' })
	                            )
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { width: 35, borderLeft: 'solid 1px #DDDDDD' } },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'p-module-sidebar p-right' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'p-module-sidebar-inner' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'p-module-button' },
	                                    _react2.default.createElement('i', { className: 'fa fa-table' }),
	                                    _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        'Company'
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'p-module-button ' },
	                                    _react2.default.createElement('i', { className: 'fa fa-th' }),
	                                    _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        'Purchase'
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'p-module-button ' },
	                                    _react2.default.createElement('i', { className: 'fa fa-calendar' }),
	                                    _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        'Sales'
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'p-module-button ' },
	                                    _react2.default.createElement('i', { className: 'fa fa-money' }),
	                                    _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        'Bank'
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'p-module-button ' },
	                                    _react2.default.createElement('i', { className: 'fa fa-cog' }),
	                                    _react2.default.createElement(
	                                        'span',
	                                        null,
	                                        'Settings'
	                                    )
	                                )
	                            )
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return Application;
	}(_react2.default.Component);
	
	/**
	 * Render to dom
	 */
	
	_reactDom2.default.render(_react2.default.createElement(Application, null), document.getElementById('app'));

/***/ },

/***/ 224:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Window = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _kendo = __webpack_require__(227);
	
	var _kendo2 = _interopRequireDefault(_kendo);
	
	__webpack_require__(232);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Custom Class Header
	 *
	 * @class Window
	 * @extends React.Component
	 */
	var Window = exports.Window = {
	
	    /**
	     * Default Width
	     * @property {String} defaultWidth
	     */
	    defaultWidth: '100px',
	
	    /**
	     * Default Width
	     * @property {String} defaultHeight
	     */
	    defaultHeight: '30px',
	
	    /**
	     * Default window tool actions
	     * @property {Array<String>} defaultActions
	     */
	    defaultActions: ["Minimize", "Maximize", "Close"],
	
	    /**
	     * @render
	     * @return {View} view
	     */
	    show: function show(component, options) {
	
	        var config = {
	            width: options.width || this.defaultWidth,
	            height: options.height || this.defaultHeight,
	            title: options.title || null,
	            actions: this.defaultActions,
	            position: {
	                top: "15%",
	                left: "35%"
	            }
	        };
	
	        var $dialog = $('<div/>');
	        $dialog.appendTo(document.body);
	        $dialog.kendoWindow(config);
	        _reactDom2.default.render(component, $dialog[0]);
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(225)))

/***/ },

/***/ 226:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	//
	// We store our EE objects in a plain object whose properties are event names.
	// If `Object.create(null)` is not supported we prefix the event names with a
	// `~` to make sure that the built-in object properties are not overridden or
	// used as an attack vector.
	// We also assume that `Object.create(null)` is available when the event name
	// is an ES6 Symbol.
	//
	var prefix = typeof Object.create !== 'function' ? '~' : false;
	
	/**
	 * Representation of a single EventEmitter function.
	 *
	 * @param {Function} fn Event handler to be called.
	 * @param {Mixed} context Context for function execution.
	 * @param {Boolean} once Only emit once
	 * @api private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}
	
	/**
	 * Minimal EventEmitter interface that is molded against the Node.js
	 * EventEmitter interface.
	 *
	 * @constructor
	 * @api public
	 */
	function EventEmitter() { /* Nothing to set */ }
	
	/**
	 * Holds the assigned EventEmitters by name.
	 *
	 * @type {Object}
	 * @private
	 */
	EventEmitter.prototype._events = undefined;
	
	/**
	 * Return a list of assigned event listeners.
	 *
	 * @param {String} event The events that should be listed.
	 * @param {Boolean} exists We only need to know if there are listeners.
	 * @returns {Array|Boolean}
	 * @api public
	 */
	EventEmitter.prototype.listeners = function listeners(event, exists) {
	  var evt = prefix ? prefix + event : event
	    , available = this._events && this._events[evt];
	
	  if (exists) return !!available;
	  if (!available) return [];
	  if (available.fn) return [available.fn];
	
	  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
	    ee[i] = available[i].fn;
	  }
	
	  return ee;
	};
	
	/**
	 * Emit an event to all registered event listeners.
	 *
	 * @param {String} event The name of the event.
	 * @returns {Boolean} Indication if we've emitted an event.
	 * @api public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;
	
	  if (!this._events || !this._events[evt]) return false;
	
	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;
	
	  if ('function' === typeof listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);
	
	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }
	
	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }
	
	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;
	
	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);
	
	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }
	
	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }
	
	  return true;
	};
	
	/**
	 * Register a new EventListener for the given event.
	 *
	 * @param {String} event Name of the event.
	 * @param {Functon} fn Callback function.
	 * @param {Mixed} context The context of the function.
	 * @api public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  var listener = new EE(fn, context || this)
	    , evt = prefix ? prefix + event : event;
	
	  if (!this._events) this._events = prefix ? {} : Object.create(null);
	  if (!this._events[evt]) this._events[evt] = listener;
	  else {
	    if (!this._events[evt].fn) this._events[evt].push(listener);
	    else this._events[evt] = [
	      this._events[evt], listener
	    ];
	  }
	
	  return this;
	};
	
	/**
	 * Add an EventListener that's only called once.
	 *
	 * @param {String} event Name of the event.
	 * @param {Function} fn Callback function.
	 * @param {Mixed} context The context of the function.
	 * @api public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  var listener = new EE(fn, context || this, true)
	    , evt = prefix ? prefix + event : event;
	
	  if (!this._events) this._events = prefix ? {} : Object.create(null);
	  if (!this._events[evt]) this._events[evt] = listener;
	  else {
	    if (!this._events[evt].fn) this._events[evt].push(listener);
	    else this._events[evt] = [
	      this._events[evt], listener
	    ];
	  }
	
	  return this;
	};
	
	/**
	 * Remove event listeners.
	 *
	 * @param {String} event The event we want to remove.
	 * @param {Function} fn The listener that we need to find.
	 * @param {Mixed} context Only remove listeners matching this context.
	 * @param {Boolean} once Only remove once listeners.
	 * @api public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;
	
	  if (!this._events || !this._events[evt]) return this;
	
	  var listeners = this._events[evt]
	    , events = [];
	
	  if (fn) {
	    if (listeners.fn) {
	      if (
	           listeners.fn !== fn
	        || (once && !listeners.once)
	        || (context && listeners.context !== context)
	      ) {
	        events.push(listeners);
	      }
	    } else {
	      for (var i = 0, length = listeners.length; i < length; i++) {
	        if (
	             listeners[i].fn !== fn
	          || (once && !listeners[i].once)
	          || (context && listeners[i].context !== context)
	        ) {
	          events.push(listeners[i]);
	        }
	      }
	    }
	  }
	
	  //
	  // Reset the array, or remove it completely if we have no more listeners.
	  //
	  if (events.length) {
	    this._events[evt] = events.length === 1 ? events[0] : events;
	  } else {
	    delete this._events[evt];
	  }
	
	  return this;
	};
	
	/**
	 * Remove all listeners or only the listeners for the specified event.
	 *
	 * @param {String} event The event want to remove all listeners for.
	 * @api public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  if (!this._events) return this;
	
	  if (event) delete this._events[prefix ? prefix + event : event];
	  else this._events = prefix ? {} : Object.create(null);
	
	  return this;
	};
	
	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;
	
	//
	// This function doesn't apply anymore.
	//
	EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
	  return this;
	};
	
	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;
	
	//
	// Expose the module.
	//
	if (true) {
	  module.exports = EventEmitter;
	}


/***/ },

/***/ 227:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/
	var $ = __webpack_require__(225);
	
	(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(228) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){
	
	var __meta__ = {
	    id: "window",
	    name: "Window",
	    category: "web",
	    description: "The Window widget displays content in a modal or non-modal HTML window.",
	    depends: [ "draganddrop" ]
	};
	
	(function($, undefined) {
	    var kendo = window.kendo,
	        Widget = kendo.ui.Widget,
	        Draggable = kendo.ui.Draggable,
	        isPlainObject = $.isPlainObject,
	        activeElement = kendo._activeElement,
	        proxy = $.proxy,
	        extend = $.extend,
	        each = $.each,
	        template = kendo.template,
	        BODY = "body",
	        templates,
	        NS = ".kendoWindow",
	        // classNames
	        KWINDOW = ".k-window",
	        KWINDOWTITLE = ".k-window-title",
	        KWINDOWTITLEBAR = KWINDOWTITLE + "bar",
	        KWINDOWCONTENT = ".k-window-content",
	        KWINDOWRESIZEHANDLES = ".k-resize-handle",
	        KOVERLAY = ".k-overlay",
	        KCONTENTFRAME = "k-content-frame",
	        LOADING = "k-loading",
	        KHOVERSTATE = "k-state-hover",
	        KFOCUSEDSTATE = "k-state-focused",
	        MAXIMIZEDSTATE = "k-window-maximized",
	        // constants
	        VISIBLE = ":visible",
	        HIDDEN = "hidden",
	        CURSOR = "cursor",
	        // events
	        OPEN = "open",
	        ACTIVATE = "activate",
	        DEACTIVATE = "deactivate",
	        CLOSE = "close",
	        REFRESH = "refresh",
	        RESIZE = "resize",
	        DRAGSTART = "dragstart",
	        DRAGEND = "dragend",
	        ERROR = "error",
	        OVERFLOW = "overflow",
	        ZINDEX = "zIndex",
	        MINIMIZE_MAXIMIZE = ".k-window-actions .k-i-minimize,.k-window-actions .k-i-maximize",
	        KPIN = ".k-i-pin",
	        KUNPIN = ".k-i-unpin",
	        PIN_UNPIN = KPIN + "," + KUNPIN,
	        TITLEBAR_BUTTONS = ".k-window-titlebar .k-window-action",
	        REFRESHICON = ".k-window-titlebar .k-i-refresh",
	        isLocalUrl = kendo.isLocalUrl;
	
	    function defined(x) {
	        return (typeof x != "undefined");
	    }
	
	    function constrain(value, low, high) {
	        return Math.max(Math.min(parseInt(value, 10), high === Infinity ? high : parseInt(high, 10)), parseInt(low, 10));
	    }
	
	    function sizingAction(actionId, callback) {
	        return function() {
	            var that = this,
	                wrapper = that.wrapper,
	                style = wrapper[0].style,
	                options = that.options;
	
	            if (options.isMaximized || options.isMinimized) {
	                return;
	            }
	
	            that.restoreOptions = {
	                width: style.width,
	                height: style.height
	            };
	
	            wrapper
	                .children(KWINDOWRESIZEHANDLES).hide().end()
	                .children(KWINDOWTITLEBAR).find(MINIMIZE_MAXIMIZE).parent().hide()
	                    .eq(0).before(templates.action({ name: "Restore" }));
	
	            callback.call(that);
	
	            if (actionId == "maximize") {
	                that.wrapper.children(KWINDOWTITLEBAR).find(PIN_UNPIN).parent().hide();
	            } else {
	                that.wrapper.children(KWINDOWTITLEBAR).find(PIN_UNPIN).parent().show();
	            }
	
	            return that;
	        };
	    }
	
	    function executableScript() {
	        return !this.type || this.type.toLowerCase().indexOf("script") >= 0;
	    }
	
	    var Window = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                wrapper,
	                offset = {},
	                visibility, display, position,
	                isVisible = false,
	                content,
	                windowContent,
	                suppressActions = options && options.actions && !options.actions.length,
	                id;
	
	            Widget.fn.init.call(that, element, options);
	            options = that.options;
	            position = options.position;
	            element = that.element;
	            content = options.content;
	
	            if (suppressActions) {
	                options.actions = [];
	            }
	
	            that.appendTo = $(options.appendTo);
	
	            that._animations();
	
	            if (content && !isPlainObject(content)) {
	                content = options.content = { url: content };
	            }
	
	            // remove script blocks to prevent double-execution
	            element.find("script").filter(executableScript).remove();
	
	            if (!element.parent().is(that.appendTo) && (position.top === undefined || position.left === undefined)) {
	                if (element.is(VISIBLE)) {
	                    offset = element.offset();
	                    isVisible = true;
	                } else {
	                    visibility = element.css("visibility");
	                    display = element.css("display");
	
	                    element.css({ visibility: HIDDEN, display: "" });
	                    offset = element.offset();
	                    element.css({ visibility: visibility, display: display });
	                }
	
	                if (position.top === undefined) {
	                    position.top = offset.top;
	                }
	                if (position.left === undefined) {
	                    position.left = offset.left;
	                }
	            }
	
	            if (!defined(options.visible) || options.visible === null) {
	                options.visible = element.is(VISIBLE);
	            }
	
	            wrapper = that.wrapper = element.closest(KWINDOW);
	
	            if (!element.is(".k-content") || !wrapper[0]) {
	                element.addClass("k-window-content k-content");
	                that._createWindow(element, options);
	                wrapper = that.wrapper = element.closest(KWINDOW);
	
	                that._dimensions();
	            }
	
	            that._position();
	
	            if (options.pinned) {
	                that.pin(true);
	            }
	
	            if (content) {
	                that.refresh(content);
	            }
	
	            if (options.visible) {
	                that.toFront();
	            }
	
	            windowContent = wrapper.children(KWINDOWCONTENT);
	            that._tabindex(windowContent);
	
	            if (options.visible && options.modal) {
	                that._overlay(wrapper.is(VISIBLE)).css({ opacity: 0.5 });
	            }
	
	            wrapper
	                .on("mouseenter" + NS, TITLEBAR_BUTTONS, proxy(that._buttonEnter, that))
	                .on("mouseleave" + NS, TITLEBAR_BUTTONS, proxy(that._buttonLeave, that))
	                .on("click" + NS, "> " + TITLEBAR_BUTTONS, proxy(that._windowActionHandler, that));
	
	            windowContent
	                .on("keydown" + NS, proxy(that._keydown, that))
	                .on("focus" + NS, proxy(that._focus, that))
	                .on("blur" + NS, proxy(that._blur, that));
	
	            this._resizable();
	
	            this._draggable();
	
	            id = element.attr("id");
	            if (id) {
	                id = id + "_wnd_title";
	                wrapper.children(KWINDOWTITLEBAR)
	                       .children(KWINDOWTITLE)
	                       .attr("id", id);
	
	                windowContent
	                    .attr({
	                        "role": "dialog",
	                        "aria-labelledby": id
	                    });
	            }
	
	            wrapper.add(wrapper.children(".k-resize-handle," + KWINDOWTITLEBAR))
	                    .on("mousedown" + NS, proxy(that.toFront, that));
	
	            that.touchScroller = kendo.touchScroller(element);
	
	            that._resizeHandler = proxy(that._onDocumentResize, that);
	
	            $(window).on("resize", that._resizeHandler);
	
	            if (options.visible) {
	                that.trigger(OPEN);
	                that.trigger(ACTIVATE);
	            }
	
	            kendo.notify(that);
	        },
	
	        _buttonEnter: function() {
	            $(this).addClass(KHOVERSTATE);
	        },
	
	        _buttonLeave: function() {
	            $(this).removeClass(KHOVERSTATE);
	        },
	
	        _focus: function() {
	            this.wrapper.addClass(KFOCUSEDSTATE);
	        },
	
	        _blur: function() {
	            this.wrapper.removeClass(KFOCUSEDSTATE);
	        },
	
	        _dimensions: function() {
	            var wrapper = this.wrapper;
	            var options = this.options;
	            var width = options.width;
	            var height = options.height;
	            var maxHeight = options.maxHeight;
	            var dimensions = ["minWidth","minHeight","maxWidth","maxHeight"];
	
	            this.title(options.title);
	
	            for (var i = 0; i < dimensions.length; i++) {
	                var value = options[dimensions[i]];
	                if (value && value != Infinity) {
	                    wrapper.css(dimensions[i], value);
	                }
	            }
	
	            if (maxHeight && maxHeight != Infinity) {
	                this.element.css("maxHeight", maxHeight);
	            }
	
	            if (width) {
	                if (width.toString().indexOf("%") > 0) {
	                    wrapper.width(width);
	                } else {
	                    wrapper.width(constrain(width, options.minWidth, options.maxWidth));
	                }
	            }
	
	            if (height) {
	                if (height.toString().indexOf("%") > 0) {
	                    wrapper.height(height);
	                } else {
	                    wrapper.height(constrain(height, options.minHeight, options.maxHeight));
	                }
	            }
	
	            if (!options.visible) {
	                wrapper.hide();
	            }
	        },
	
	        _position: function() {
	            var wrapper = this.wrapper,
	                position = this.options.position;
	
	            if (position.top === 0) {
	                position.top = position.top.toString();
	            }
	
	            if (position.left === 0) {
	                position.left = position.left.toString();
	            }
	
	            wrapper.css({
	                top: position.top || "",
	                left: position.left || ""
	            });
	        },
	
	        _animations: function() {
	            var options = this.options;
	
	            if (options.animation === false) {
	                options.animation = { open: { effects: {} }, close: { hide: true, effects: {} } };
	            }
	        },
	
	        _resize: function() {
	            kendo.resize(this.element.children());
	        },
	
	        _resizable: function() {
	            var resizable = this.options.resizable;
	            var wrapper = this.wrapper;
	
	            if (this.resizing) {
	                wrapper
	                    .off("dblclick" + NS)
	                    .children(KWINDOWRESIZEHANDLES).remove();
	
	                this.resizing.destroy();
	                this.resizing = null;
	            }
	
	            if (resizable) {
	                wrapper.on("dblclick" + NS, KWINDOWTITLEBAR, proxy(function(e) {
	                    if (!$(e.target).closest(".k-window-action").length) {
	                        this.toggleMaximization();
	                    }
	                }, this));
	
	                each("n e s w se sw ne nw".split(" "), function(index, handler) {
	                    wrapper.append(templates.resizeHandle(handler));
	                });
	
	                this.resizing = new WindowResizing(this);
	            }
	
	            wrapper = null;
	        },
	
	        _draggable: function() {
	            var draggable = this.options.draggable;
	
	            if (this.dragging) {
	                this.dragging.destroy();
	                this.dragging = null;
	            }
	            if (draggable) {
	                this.dragging = new WindowDragging(this, draggable.dragHandle || KWINDOWTITLEBAR);
	            }
	        },
	
	        setOptions: function(options) {
	            Widget.fn.setOptions.call(this, options);
	            this._animations();
	            this._dimensions();
	            this._position();
	            this._resizable();
	            this._draggable();
	        },
	
	        events:[
	            OPEN,
	            ACTIVATE,
	            DEACTIVATE,
	            CLOSE,
	            REFRESH,
	            RESIZE,
	            DRAGSTART,
	            DRAGEND,
	            ERROR
	        ],
	
	        options: {
	            name: "Window",
	            animation: {
	                open: {
	                    effects: { zoom: { direction: "in" }, fade: { direction: "in" } },
	                    duration: 350
	                },
	                close: {
	                    effects: { zoom: { direction: "out", properties: { scale: 0.7 } }, fade: { direction: "out" } },
	                    duration: 350,
	                    hide: true
	                }
	            },
	            title: "",
	            actions: ["Close"],
	            autoFocus: true,
	            modal: false,
	            resizable: true,
	            draggable: true,
	            minWidth: 90,
	            minHeight: 50,
	            maxWidth: Infinity,
	            maxHeight: Infinity,
	            pinned: false,
	            position: {},
	            content: null,
	            visible: null,
	            height: null,
	            width: null,
	            appendTo: "body"
	        },
	
	        _closable: function() {
	            return $.inArray("close", $.map(this.options.actions, function(x) { return x.toLowerCase(); })) > -1;
	        },
	
	        _keydown: function(e) {
	            var that = this,
	                options = that.options,
	                keys = kendo.keys,
	                keyCode = e.keyCode,
	                wrapper = that.wrapper,
	                offset, handled,
	                distance = 10,
	                isMaximized = that.options.isMaximized,
	                newWidth, newHeight, w, h;
	
	            if (e.target != e.currentTarget || that._closing) {
	                return;
	            }
	
	            if (keyCode == keys.ESC && that._closable()) {
	                that._close(false);
	            }
	
	            if (options.draggable && !e.ctrlKey && !isMaximized) {
	                offset = kendo.getOffset(wrapper);
	
	                if (keyCode == keys.UP) {
	                    handled = wrapper.css("top", offset.top - distance);
	                } else if (keyCode == keys.DOWN) {
	                    handled = wrapper.css("top", offset.top + distance);
	                } else if (keyCode == keys.LEFT) {
	                    handled = wrapper.css("left", offset.left - distance);
	                } else if (keyCode == keys.RIGHT) {
	                    handled = wrapper.css("left", offset.left + distance);
	                }
	            }
	
	            if (options.resizable && e.ctrlKey && !isMaximized) {
	                if (keyCode == keys.UP) {
	                    handled = true;
	                    newHeight = wrapper.height() - distance;
	                } else if (keyCode == keys.DOWN) {
	                    handled = true;
	                    newHeight = wrapper.height() + distance;
	                } if (keyCode == keys.LEFT) {
	                    handled = true;
	                    newWidth = wrapper.width() - distance;
	                } else if (keyCode == keys.RIGHT) {
	                    handled = true;
	                    newWidth = wrapper.width() + distance;
	                }
	
	                if (handled) {
	                    w = constrain(newWidth, options.minWidth, options.maxWidth);
	                    h = constrain(newHeight, options.minHeight, options.maxHeight);
	
	                    if (!isNaN(w)) {
	                        wrapper.width(w);
	                        that.options.width = w + "px";
	                    }
	                    if (!isNaN(h)) {
	                        wrapper.height(h);
	                        that.options.height = h + "px";
	                    }
	
	                    that.resize();
	                }
	            }
	
	            if (handled) {
	                e.preventDefault();
	            }
	        },
	
	        _overlay: function (visible) {
	            var overlay = this.appendTo.children(KOVERLAY),
	                wrapper = this.wrapper;
	
	            if (!overlay.length) {
	                overlay = $("<div class='k-overlay' />");
	            }
	
	            overlay
	                .insertBefore(wrapper[0])
	                .toggle(visible)
	                .css(ZINDEX, parseInt(wrapper.css(ZINDEX), 10) - 1);
	
	            return overlay;
	        },
	
	        _actionForIcon: function(icon) {
	            var iconClass = /\bk-i-\w+\b/.exec(icon[0].className)[0];
	
	            return {
	                "k-i-close": "_close",
	                "k-i-maximize": "maximize",
	                "k-i-minimize": "minimize",
	                "k-i-restore": "restore",
	                "k-i-refresh": "refresh",
	                "k-i-pin": "pin",
	                "k-i-unpin": "unpin"
	            }[iconClass];
	        },
	
	        _windowActionHandler: function (e) {
	            if (this._closing) {
	                return;
	            }
	
	            var icon = $(e.target).closest(".k-window-action").find(".k-icon");
	            var action = this._actionForIcon(icon);
	
	            if (action) {
	                e.preventDefault();
	                this[action]();
	                return false;
	            }
	        },
	
	        _modals: function() {
	            var that = this;
	
	            var zStack = $(KWINDOW).filter(function() {
	                var dom = $(this);
	                var object = that._object(dom);
	                var options = object && object.options;
	
	                return options && options.modal && options.visible && dom.is(VISIBLE);
	            }).sort(function(a, b){
	                return +$(a).css("zIndex") - +$(b).css("zIndex");
	            });
	
	            that = null;
	
	            return zStack;
	        },
	
	        _object: function(element) {
	            var content = element.children(KWINDOWCONTENT);
	
	            return content.data("kendoWindow") || content.data("kendo" + this.options.name);
	        },
	
	        center: function () {
	            var that = this,
	                position = that.options.position,
	                wrapper = that.wrapper,
	                documentWindow = $(window),
	                scrollTop = 0,
	                scrollLeft = 0,
	                newTop, newLeft;
	
	            if (that.options.isMaximized) {
	                return that;
	            }
	
	            if (!that.options.pinned) {
	                scrollTop = documentWindow.scrollTop();
	                scrollLeft = documentWindow.scrollLeft();
	            }
	
	            newLeft = scrollLeft + Math.max(0, (documentWindow.width() - wrapper.width()) / 2);
	            newTop = scrollTop + Math.max(0, (documentWindow.height() - wrapper.height() - parseInt(wrapper.css("paddingTop"), 10)) / 2);
	
	            wrapper.css({
	                left: newLeft,
	                top: newTop
	            });
	
	            position.top = newTop;
	            position.left = newLeft;
	
	            return that;
	        },
	
	        title: function (text) {
	            var that = this,
	                wrapper = that.wrapper,
	                options = that.options,
	                titleBar = wrapper.children(KWINDOWTITLEBAR),
	                title = titleBar.children(KWINDOWTITLE),
	                titleBarHeight = titleBar.outerHeight();
	
	            if (!arguments.length) {
	                return title.text();
	            }
	
	            if (text === false) {
	                wrapper.addClass("k-window-titleless");
	                titleBar.remove();
	            } else {
	                if (!titleBar.length) {
	                    wrapper.prepend(templates.titlebar(extend(templates, options)));
	                }
	
	                wrapper.css("padding-top", titleBarHeight);
	                titleBar.css("margin-top", -titleBarHeight);
	            }
	
	            title.text(text);
	            that.options.title = text;
	
	            return that;
	        },
	
	        content: function (html) {
	            var content = this.wrapper.children(KWINDOWCONTENT),
	                scrollContainer = content.children(".km-scroll-container");
	
	            content = scrollContainer[0] ? scrollContainer : content;
	
	            if (!defined(html)) {
	                return content.html();
	            }
	
	            kendo.destroy(this.element.children());
	
	            content.empty().html(html);
	            return this;
	        },
	
	        open: function () {
	            var that = this,
	                wrapper = that.wrapper,
	                options = that.options,
	                showOptions = options.animation.open,
	                contentElement = wrapper.children(KWINDOWCONTENT),
	                overlay;
	
	            if (!that.trigger(OPEN)) {
	                if (that._closing) {
	                    wrapper.kendoStop(true, true);
	                }
	
	                that._closing = false;
	
	                that.toFront();
	
	                if (options.autoFocus) {
	                    that.element.focus();
	                }
	
	                options.visible = true;
	
	                if (options.modal) {
	                    overlay = that._overlay(false);
	
	                    overlay.kendoStop(true, true);
	
	                    if (showOptions.duration && kendo.effects.Fade) {
	                        var overlayFx = kendo.fx(overlay).fadeIn();
	                        overlayFx.duration(showOptions.duration || 0);
	                        overlayFx.endValue(0.5);
	                        overlayFx.play();
	                    } else {
	                        overlay.css("opacity", 0.5);
	                    }
	
	                    overlay.show();
	                }
	
	                if (!wrapper.is(VISIBLE)) {
	                    contentElement.css(OVERFLOW, HIDDEN);
	                    wrapper.show().kendoStop().kendoAnimate({
	                        effects: showOptions.effects,
	                        duration: showOptions.duration,
	                        complete: proxy(this._activate, this)
	                    });
	                }
	            }
	
	            if (options.isMaximized) {
	                that._documentScrollTop = $(document).scrollTop();
	                $("html, body").css(OVERFLOW, HIDDEN);
	            }
	
	            return that;
	        },
	
	        _activate: function() {
	            if (this.options.autoFocus) {
	                this.element.focus();
	            }
	            this.trigger(ACTIVATE);
	            this.wrapper.children(KWINDOWCONTENT).css(OVERFLOW, "");
	        },
	
	        _removeOverlay: function(suppressAnimation) {
	            var modals = this._modals();
	            var options = this.options;
	            var hideOverlay = options.modal && !modals.length;
	            var overlay = options.modal ? this._overlay(true) : $(undefined);
	            var hideOptions = options.animation.close;
	
	            if (hideOverlay) {
	                if (!suppressAnimation && hideOptions.duration && kendo.effects.Fade) {
	                    var overlayFx = kendo.fx(overlay).fadeOut();
	                    overlayFx.duration(hideOptions.duration || 0);
	                    overlayFx.startValue(0.5);
	                    overlayFx.play();
	                } else {
	                    this._overlay(false).remove();
	                }
	            } else if (modals.length) {
	                this._object(modals.last())._overlay(true);
	            }
	        },
	
	        _close: function(systemTriggered) {
	            var that = this,
	                wrapper = that.wrapper,
	                options = that.options,
	                showOptions = options.animation.open,
	                hideOptions = options.animation.close;
	
	            if (wrapper.is(VISIBLE) && !that.trigger(CLOSE, { userTriggered: !systemTriggered })) {
	                that._closing = true;
	                options.visible = false;
	
	                $(KWINDOW).each(function(i, element) {
	                    var contentElement = $(element).children(KWINDOWCONTENT);
	
	                    // Remove overlay set by toFront
	                    if (element != wrapper && contentElement.find("> ." + KCONTENTFRAME).length > 0) {
	                        contentElement.children(KOVERLAY).remove();
	                    }
	                });
	
	                this._removeOverlay();
	
	                wrapper.kendoStop().kendoAnimate({
	                    effects: hideOptions.effects || showOptions.effects,
	                    reverse: hideOptions.reverse === true,
	                    duration: hideOptions.duration,
	                    complete: proxy(this._deactivate, this)
	                });
	            }
	
	            if (that.options.isMaximized) {
	                $("html, body").css(OVERFLOW, "");
	                if (that._documentScrollTop && that._documentScrollTop > 0) {
	                    $(document).scrollTop(that._documentScrollTop);
	                }
	            }
	        },
	
	        _deactivate: function() {
	            this.wrapper.hide().css("opacity","");
	            this.trigger(DEACTIVATE);
	            var lastModal = this._object(this._modals().last());
	            if (lastModal) {
	                lastModal.toFront();
	            }
	        },
	
	        close: function () {
	            this._close(true);
	            return this;
	        },
	
	        _actionable: function(element) {
	            return $(element).is(TITLEBAR_BUTTONS + "," + TITLEBAR_BUTTONS + " .k-icon,:input,a");
	        },
	
	        _shouldFocus: function(target) {
	            var active = activeElement(),
	                element = this.element;
	
	            return this.options.autoFocus &&
	                    !$(active).is(element) &&
	                    !this._actionable(target) &&
	                    (!element.find(active).length || !element.find(target).length);
	        },
	
	        toFront: function (e) {
	            var that = this,
	                wrapper = that.wrapper,
	                currentWindow = wrapper[0],
	                zIndex = +wrapper.css(ZINDEX),
	                originalZIndex = zIndex,
	                target = (e && e.target) || null;
	
	            $(KWINDOW).each(function(i, element) {
	                var windowObject = $(element),
	                    zIndexNew = windowObject.css(ZINDEX),
	                    contentElement = windowObject.children(KWINDOWCONTENT);
	
	                if (!isNaN(zIndexNew)) {
	                    zIndex = Math.max(+zIndexNew, zIndex);
	                }
	
	                // Add overlay to windows with iframes and lower z-index to prevent
	                // trapping of events when resizing / dragging
	                if (element != currentWindow && contentElement.find("> ." + KCONTENTFRAME).length > 0) {
	                    contentElement.append(templates.overlay);
	                }
	            });
	
	            if (!wrapper[0].style.zIndex || originalZIndex < zIndex) {
	                wrapper.css(ZINDEX, zIndex + 2);
	            }
	            that.element.find("> .k-overlay").remove();
	
	            if (that._shouldFocus(target)) {
	                that.element.focus();
	
	                var scrollTop = $(window).scrollTop(),
	                    windowTop = parseInt(wrapper.position().top, 10);
	
	                if (windowTop > 0 && windowTop < scrollTop) {
	                    if (scrollTop > 0) {
	                        $(window).scrollTop(windowTop);
	                    } else {
	                        wrapper.css("top", scrollTop);
	                    }
	                }
	            }
	
	            wrapper = null;
	
	            return that;
	        },
	
	        toggleMaximization: function () {
	            if (this._closing) {
	                return this;
	            }
	
	            return this[this.options.isMaximized ? "restore" : "maximize"]();
	        },
	
	        restore: function () {
	            var that = this;
	            var options = that.options;
	            var minHeight = options.minHeight;
	            var restoreOptions = that.restoreOptions;
	
	            if (!options.isMaximized && !options.isMinimized) {
	                return that;
	            }
	
	            if (minHeight && minHeight != Infinity) {
	                that.wrapper.css("min-height", minHeight);
	            }
	
	            that.wrapper
	                .css({
	                    position: options.pinned ? "fixed" : "absolute",
	                    left: restoreOptions.left,
	                    top: restoreOptions.top,
	                    width: restoreOptions.width,
	                    height: restoreOptions.height
	                })
	                .removeClass(MAXIMIZEDSTATE)
	                .find(".k-window-content,.k-resize-handle").show().end()
	                .find(".k-window-titlebar .k-i-restore").parent().remove().end().end()
	                .find(MINIMIZE_MAXIMIZE).parent().show().end().end()
	                .find(PIN_UNPIN).parent().show();
	
	            that.options.width = restoreOptions.width;
	            that.options.height = restoreOptions.height;
	
	            $("html, body").css(OVERFLOW, "");
	            if (this._documentScrollTop && this._documentScrollTop > 0) {
	                $(document).scrollTop(this._documentScrollTop);
	            }
	
	            options.isMaximized = options.isMinimized = false;
	
	            that.resize();
	
	            return that;
	        },
	
	        maximize: sizingAction("maximize", function() {
	            var that = this,
	                wrapper = that.wrapper,
	                position = wrapper.position();
	
	            extend(that.restoreOptions, {
	                left: position.left,
	                top: position.top
	            });
	
	            wrapper.css({
	                    left: 0,
	                    top: 0,
	                    position: "fixed"
	                })
	                .addClass(MAXIMIZEDSTATE);
	
	            this._documentScrollTop = $(document).scrollTop();
	            $("html, body").css(OVERFLOW, HIDDEN);
	
	            that.options.isMaximized = true;
	
	            that._onDocumentResize();
	        }),
	
	        minimize: sizingAction("minimize", function() {
	            var that = this;
	
	            that.wrapper.css({
	                height: "",
	                minHeight: ""
	            });
	
	            that.element.hide();
	
	            that.options.isMinimized = true;
	        }),
	
	        pin: function(force) {
	            var that = this,
	                win = $(window),
	                wrapper = that.wrapper,
	                top = parseInt(wrapper.css("top"), 10),
	                left = parseInt(wrapper.css("left"), 10);
	
	            if (force || !that.options.pinned && !that.options.isMaximized) {
	                wrapper.css({position: "fixed", top: top - win.scrollTop(), left: left - win.scrollLeft()});
	                wrapper.children(KWINDOWTITLEBAR).find(KPIN).addClass("k-i-unpin").removeClass("k-i-pin");
	
	                that.options.pinned = true;
	            }
	        },
	
	        unpin: function() {
	            var that = this,
	                win = $(window),
	                wrapper = that.wrapper,
	                top = parseInt(wrapper.css("top"), 10),
	                left = parseInt(wrapper.css("left"), 10);
	
	            if (that.options.pinned && !that.options.isMaximized) {
	                wrapper.css({position: "", top: top + win.scrollTop(), left: left + win.scrollLeft()});
	                wrapper.children(KWINDOWTITLEBAR).find(KUNPIN).addClass("k-i-pin").removeClass("k-i-unpin");
	
	                that.options.pinned = false;
	            }
	        },
	
	        _onDocumentResize: function () {
	            var that = this,
	                wrapper = that.wrapper,
	                wnd = $(window),
	                w, h;
	
	            if (!that.options.isMaximized) {
	                return;
	            }
	
	            w = wnd.width();
	            h = wnd.height() - parseInt(wrapper.css("padding-top"), 10);
	
	            wrapper.css({
	                    width: w,
	                    height: h
	                });
	            that.options.width = w;
	            that.options.height = h;
	
	            that.resize();
	        },
	
	        refresh: function (options) {
	            var that = this,
	                initOptions = that.options,
	                element = $(that.element),
	                iframe,
	                showIframe,
	                url;
	
	            if (!isPlainObject(options)) {
	                options = { url: options };
	            }
	
	            options = extend({}, initOptions.content, options);
	
	            showIframe = defined(initOptions.iframe) ? initOptions.iframe : options.iframe;
	
	            url = options.url;
	
	            if (url) {
	                if (!defined(showIframe)) {
	                    showIframe = !isLocalUrl(url);
	                }
	
	                if (!showIframe) {
	                    // perform AJAX request
	                    that._ajaxRequest(options);
	                } else {
	                    iframe = element.find("." + KCONTENTFRAME)[0];
	
	                    if (iframe) {
	                        // refresh existing iframe
	                        iframe.src = url || iframe.src;
	                    } else {
	                        // render new iframe
	                        element.html(templates.contentFrame(extend({}, initOptions, { content: options })));
	                    }
	
	                    element.find("." + KCONTENTFRAME)
	                        .unbind("load" + NS)
	                        .on("load" + NS, proxy(this._triggerRefresh, this));
	                }
	            } else {
	                if (options.template) {
	                    // refresh template
	                    that.content(template(options.template)({}));
	                }
	
	                that.trigger(REFRESH);
	            }
	
	            element.toggleClass("k-window-iframecontent", showIframe);
	
	            return that;
	        },
	
	        _triggerRefresh: function() {
	            this.trigger(REFRESH);
	        },
	
	        _ajaxComplete: function() {
	            clearTimeout(this._loadingIconTimeout);
	            this.wrapper.find(REFRESHICON).removeClass(LOADING);
	        },
	
	        _ajaxError: function (xhr, status) {
	            this.trigger(ERROR, { status: status, xhr: xhr });
	        },
	
	        _ajaxSuccess: function (contentTemplate) {
	            return function (data) {
	                if (contentTemplate) {
	                    data = template(contentTemplate)(data || {});
	                }
	
	                this.content(data);
	                this.element.prop("scrollTop", 0);
	
	                this.trigger(REFRESH);
	            };
	        },
	
	        _showLoading: function() {
	            this.wrapper.find(REFRESHICON).addClass(LOADING);
	        },
	
	        _ajaxRequest: function (options) {
	            this._loadingIconTimeout = setTimeout(proxy(this._showLoading, this), 100);
	
	            $.ajax(extend({
	                type: "GET",
	                dataType: "html",
	                cache: false,
	                error: proxy(this._ajaxError, this),
	                complete: proxy(this._ajaxComplete, this),
	                success: proxy(this._ajaxSuccess(options.template), this)
	            }, options));
	        },
	
	        destroy: function () {
	            if (this.resizing) {
	                this.resizing.destroy();
	            }
	
	            if (this.dragging) {
	                this.dragging.destroy();
	            }
	
	            this.wrapper.off(NS)
	                .children(KWINDOWCONTENT).off(NS).end()
	                .find(".k-resize-handle,.k-window-titlebar").off(NS);
	
	            $(window).off("resize", this._resizeHandler);
	
	            clearTimeout(this._loadingIconTimeout);
	
	            Widget.fn.destroy.call(this);
	
	            this.unbind(undefined);
	
	            kendo.destroy(this.wrapper);
	
	            this._removeOverlay(true);
	
	            this.wrapper.empty().remove();
	
	            this.wrapper = this.appendTo = this.element = $();
	        },
	
	        _createWindow: function() {
	            var contentHtml = this.element,
	                options = this.options,
	                iframeSrcAttributes,
	                wrapper,
	                isRtl = kendo.support.isRtl(contentHtml);
	
	            if (options.scrollable === false) {
	                contentHtml.attr("style", "overflow:hidden;");
	            }
	
	            wrapper = $(templates.wrapper(options));
	
	            if (options.title !== false) {
	                wrapper.append(templates.titlebar(extend(templates, options)));
	            }
	
	            // Collect the src attributes of all iframes and then set them to empty string.
	            // This seems to fix this IE9 "feature": http://msdn.microsoft.com/en-us/library/gg622929%28v=VS.85%29.aspx?ppud=4
	            iframeSrcAttributes = contentHtml.find("iframe:not(.k-content)").map(function() {
	                var src = this.getAttribute("src");
	                this.src = "";
	                return src;
	            });
	
	            // Make sure the wrapper is appended to the body only once. IE9+ will throw exceptions if you move iframes in DOM
	            wrapper
	                .toggleClass("k-rtl", isRtl)
	                .appendTo(this.appendTo)
	                .append(contentHtml)
	                .find("iframe:not(.k-content)").each(function(index) {
	                   // Restore the src attribute of the iframes when they are part of the live DOM tree
	                   this.src = iframeSrcAttributes[index];
	                });
	
	            wrapper.find(".k-window-title")
	                .css(isRtl ? "left" : "right", wrapper.find(".k-window-actions").outerWidth() + 10);
	
	            contentHtml.show();
	
	            contentHtml.find("[data-role=editor]").each(function() {
	                var editor = $(this).data("kendoEditor");
	
	                if (editor) {
	                    editor.refresh();
	                }
	            });
	
	            wrapper = contentHtml = null;
	        }
	    });
	
	    templates = {
	        wrapper: template("<div class='k-widget k-window' />"),
	        action: template(
	            "<a role='button' href='\\#' class='k-window-action k-link'>" +
	                "<span role='presentation' class='k-icon k-i-#= name.toLowerCase() #'>#= name #</span>" +
	            "</a>"
	        ),
	        titlebar: template(
	            "<div class='k-window-titlebar k-header'>&nbsp;" +
	                "<span class='k-window-title'>#= title #</span>" +
	                "<div class='k-window-actions'>" +
	                "# for (var i = 0; i < actions.length; i++) { #" +
	                    "#= action({ name: actions[i] }) #" +
	                "# } #" +
	                "</div>" +
	            "</div>"
	        ),
	        overlay: "<div class='k-overlay' />",
	        contentFrame: template(
	            "<iframe frameborder='0' title='#= title #' class='" + KCONTENTFRAME + "' " +
	                "src='#= content.url #'>" +
	                    "This page requires frames in order to show content" +
	            "</iframe>"
	        ),
	        resizeHandle: template("<div class='k-resize-handle k-resize-#= data #'></div>")
	    };
	
	
	    function WindowResizing(wnd) {
	        this.owner = wnd;
	        this._draggable = new Draggable(wnd.wrapper, {
	            filter: KWINDOWRESIZEHANDLES,
	            group: wnd.wrapper.id + "-resizing",
	            dragstart: proxy(this.dragstart, this),
	            drag: proxy(this.drag, this),
	            dragend: proxy(this.dragend, this)
	        });
	    }
	
	    WindowResizing.prototype = {
	        dragstart: function (e) {
	            var wnd = this.owner;
	            var wrapper = wnd.wrapper;
	
	            this.elementPadding = parseInt(wnd.wrapper.css("padding-top"), 10);
	            this.initialCursorPosition = kendo.getOffset(wrapper, "position");
	
	            this.resizeDirection = e.currentTarget.prop("className").replace("k-resize-handle k-resize-", "");
	
	            this.initialSize = {
	                width: wrapper.width(),
	                height: wrapper.height()
	            };
	
	            this.containerOffset = kendo.getOffset(wnd.appendTo);
	
	            wrapper
	                .append(templates.overlay)
	                .children(KWINDOWRESIZEHANDLES).not(e.currentTarget).hide();
	
	            $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));
	        },
	        drag: function (e) {
	            var that = this,
	                wnd = that.owner,
	                wrapper = wnd.wrapper,
	                options = wnd.options,
	                direction = that.resizeDirection,
	                containerOffset = that.containerOffset,
	                initialPosition = that.initialCursorPosition,
	                initialSize = that.initialSize,
	                newWidth, newHeight,
	                windowBottom, windowRight,
	                x = Math.max(e.x.location, containerOffset.left),
	                y = Math.max(e.y.location, containerOffset.top);
	
	            if (direction.indexOf("e") >= 0) {
	                newWidth = x - initialPosition.left;
	
	                wrapper.width(constrain(newWidth, options.minWidth, options.maxWidth));
	            } else if (direction.indexOf("w") >= 0) {
	                windowRight = initialPosition.left + initialSize.width;
	                newWidth = constrain(windowRight - x, options.minWidth, options.maxWidth);
	
	                wrapper.css({
	                    left: windowRight - newWidth - containerOffset.left,
	                    width: newWidth
	                });
	            }
	
	            if (direction.indexOf("s") >= 0) {
	                newHeight = y - initialPosition.top - that.elementPadding;
	
	                wrapper.height(constrain(newHeight, options.minHeight, options.maxHeight));
	            } else if (direction.indexOf("n") >= 0) {
	                windowBottom = initialPosition.top + initialSize.height;
	                newHeight = constrain(windowBottom - y, options.minHeight, options.maxHeight);
	
	                wrapper.css({
	                    top: windowBottom - newHeight - containerOffset.top,
	                    height: newHeight
	                });
	            }
	
	            if (newWidth) {
	                wnd.options.width = newWidth + "px";
	            }
	            if (newHeight) {
	                wnd.options.height = newHeight + "px";
	            }
	
	            wnd.resize();
	        },
	        dragend: function (e) {
	            var that = this,
	                wnd = that.owner,
	                wrapper = wnd.wrapper;
	
	            wrapper
	                .find(KOVERLAY).remove().end()
	                .children(KWINDOWRESIZEHANDLES).not(e.currentTarget).show();
	
	            $(BODY).css(CURSOR, "");
	
	            if (wnd.touchScroller) {
	               wnd.touchScroller.reset();
	            }
	            if (e.keyCode == 27) {
	                wrapper.css(that.initialCursorPosition)
	                    .css(that.initialSize);
	            }
	
	            return false;
	        },
	        destroy: function() {
	            if (this._draggable) {
	                this._draggable.destroy();
	            }
	
	            this._draggable = this.owner = null;
	        }
	    };
	
	    function WindowDragging(wnd, dragHandle) {
	        this.owner = wnd;
	        this._draggable = new Draggable(wnd.wrapper, {
	            filter: dragHandle,
	            group: wnd.wrapper.id + "-moving",
	            dragstart: proxy(this.dragstart, this),
	            drag: proxy(this.drag, this),
	            dragend: proxy(this.dragend, this),
	            dragcancel: proxy(this.dragcancel, this)
	        });
	
	        this._draggable.userEvents.stopPropagation = false;
	    }
	
	    WindowDragging.prototype = {
	        dragstart: function (e) {
	            var wnd = this.owner,
	                element = wnd.element,
	                actions = element.find(".k-window-actions"),
	                containerOffset = kendo.getOffset(wnd.appendTo);
	
	            wnd.trigger(DRAGSTART);
	
	            wnd.initialWindowPosition = kendo.getOffset(wnd.wrapper, "position");
	
	            wnd.startPosition = {
	                left: e.x.client - wnd.initialWindowPosition.left,
	                top: e.y.client - wnd.initialWindowPosition.top
	            };
	
	            if (actions.length > 0) {
	                wnd.minLeftPosition = actions.outerWidth() + parseInt(actions.css("right"), 10) - element.outerWidth();
	            } else {
	                wnd.minLeftPosition =  20 - element.outerWidth(); // at least 20px remain visible
	            }
	
	            wnd.minLeftPosition -= containerOffset.left;
	            wnd.minTopPosition = -containerOffset.top;
	
	            wnd.wrapper
	                .append(templates.overlay)
	                .children(KWINDOWRESIZEHANDLES).hide();
	
	            $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));
	        },
	
	        drag: function (e) {
	            var wnd = this.owner,
	                position = wnd.options.position,
	                newTop = Math.max(e.y.client - wnd.startPosition.top, wnd.minTopPosition),
	                newLeft = Math.max(e.x.client - wnd.startPosition.left, wnd.minLeftPosition),
	                coordinates = {
	                    left: newLeft,
	                    top: newTop
	                };
	
	            $(wnd.wrapper).css(coordinates);
	            position.top = newTop;
	            position.left = newLeft;
	        },
	
	        _finishDrag: function() {
	            var wnd = this.owner;
	
	            wnd.wrapper
	                .children(KWINDOWRESIZEHANDLES).toggle(!wnd.options.isMinimized).end()
	                .find(KOVERLAY).remove();
	
	            $(BODY).css(CURSOR, "");
	        },
	
	        dragcancel: function (e) {
	            this._finishDrag();
	
	            e.currentTarget.closest(KWINDOW).css(this.owner.initialWindowPosition);
	        },
	
	        dragend: function () {
	            this._finishDrag();
	
	            this.owner.trigger(DRAGEND);
	
	            return false;
	        },
	        destroy: function() {
	            if (this._draggable) {
	                this._draggable.destroy();
	            }
	
	            this._draggable = this.owner = null;
	        }
	    };
	
	    kendo.ui.plugin(Window);
	
	})(window.kendo.jQuery);
	
	return window.kendo;
	
	}, __webpack_require__(230));
	


/***/ },

/***/ 228:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(229), __webpack_require__(231) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){
	
	var __meta__ = {
	    id: "draganddrop",
	    name: "Drag & drop",
	    category: "framework",
	    description: "Drag & drop functionality for any DOM element.",
	    depends: [ "core", "userevents" ]
	};
	
	(function ($, undefined) {
	    var kendo = window.kendo,
	        support = kendo.support,
	        document = window.document,
	        Class = kendo.Class,
	        Widget = kendo.ui.Widget,
	        Observable = kendo.Observable,
	        UserEvents = kendo.UserEvents,
	        proxy = $.proxy,
	        extend = $.extend,
	        getOffset = kendo.getOffset,
	        draggables = {},
	        dropTargets = {},
	        dropAreas = {},
	        lastDropTarget,
	        elementUnderCursor = kendo.elementUnderCursor,
	        KEYUP = "keyup",
	        CHANGE = "change",
	
	        // Draggable events
	        DRAGSTART = "dragstart",
	        HOLD = "hold",
	        DRAG = "drag",
	        DRAGEND = "dragend",
	        DRAGCANCEL = "dragcancel",
	
	        // DropTarget events
	        DRAGENTER = "dragenter",
	        DRAGLEAVE = "dragleave",
	        DROP = "drop";
	
	    function contains(parent, child) {
	        try {
	            return $.contains(parent, child) || parent == child;
	        } catch (e) {
	            return false;
	        }
	    }
	
	    function numericCssPropery(element, property) {
	        return parseInt(element.css(property), 10) || 0;
	    }
	
	    function within(value, range) {
	        return Math.min(Math.max(value, range.min), range.max);
	    }
	
	    function containerBoundaries(container, element) {
	        var offset = getOffset(container),
	            minX = offset.left + numericCssPropery(container, "borderLeftWidth") + numericCssPropery(container, "paddingLeft"),
	            minY = offset.top + numericCssPropery(container, "borderTopWidth") + numericCssPropery(container, "paddingTop"),
	            maxX = minX + container.width() - element.outerWidth(true),
	            maxY = minY + container.height() - element.outerHeight(true);
	
	        return {
	            x: { min: minX, max: maxX },
	            y: { min: minY, max: maxY }
	        };
	    }
	
	    function checkTarget(target, targets, areas) {
	        var theTarget, theFilter, i = 0,
	            targetLen = targets && targets.length,
	            areaLen = areas && areas.length;
	
	        while (target && target.parentNode) {
	            for (i = 0; i < targetLen; i ++) {
	                theTarget = targets[i];
	                if (theTarget.element[0] === target) {
	                    return { target: theTarget, targetElement: target };
	                }
	            }
	
	            for (i = 0; i < areaLen; i ++) {
	                theFilter = areas[i];
	                if (support.matchesSelector.call(target, theFilter.options.filter)) {
	                    return { target: theFilter, targetElement: target };
	                }
	            }
	
	            target = target.parentNode;
	        }
	
	        return undefined;
	    }
	
	    var TapCapture = Observable.extend({
	        init: function(element, options) {
	            var that = this,
	                domElement = element[0];
	
	            that.capture = false;
	
	            if (domElement.addEventListener) {
	                $.each(kendo.eventMap.down.split(" "), function() {
	                    domElement.addEventListener(this, proxy(that._press, that), true);
	                });
	                $.each(kendo.eventMap.up.split(" "), function() {
	                    domElement.addEventListener(this, proxy(that._release, that), true);
	                });
	            } else {
	                $.each(kendo.eventMap.down.split(" "), function() {
	                    domElement.attachEvent(this, proxy(that._press, that));
	                });
	                $.each(kendo.eventMap.up.split(" "), function() {
	                    domElement.attachEvent(this, proxy(that._release, that));
	                });
	            }
	
	            Observable.fn.init.call(that);
	
	            that.bind(["press", "release"], options || {});
	        },
	
	        captureNext: function() {
	            this.capture = true;
	        },
	
	        cancelCapture: function() {
	            this.capture = false;
	        },
	
	        _press: function(e) {
	            var that = this;
	            that.trigger("press");
	            if (that.capture) {
	                e.preventDefault();
	            }
	        },
	
	        _release: function(e) {
	            var that = this;
	            that.trigger("release");
	
	            if (that.capture) {
	                e.preventDefault();
	                that.cancelCapture();
	            }
	        }
	    });
	
	    var PaneDimension = Observable.extend({
	        init: function(options) {
	            var that = this;
	            Observable.fn.init.call(that);
	
	            that.forcedEnabled = false;
	
	            $.extend(that, options);
	
	            that.scale = 1;
	
	            if (that.horizontal) {
	                that.measure = "offsetWidth";
	                that.scrollSize = "scrollWidth";
	                that.axis = "x";
	            } else {
	                that.measure = "offsetHeight";
	                that.scrollSize = "scrollHeight";
	                that.axis = "y";
	            }
	        },
	
	        makeVirtual: function() {
	            $.extend(this, {
	                virtual: true,
	                forcedEnabled: true,
	                _virtualMin: 0,
	                _virtualMax: 0
	            });
	        },
	
	        virtualSize: function(min, max) {
	            if (this._virtualMin !== min || this._virtualMax !== max) {
	                this._virtualMin = min;
	                this._virtualMax = max;
	                this.update();
	            }
	        },
	
	        outOfBounds: function(offset) {
	            return offset > this.max || offset < this.min;
	        },
	
	        forceEnabled: function() {
	            this.forcedEnabled = true;
	        },
	
	        getSize: function() {
	            return this.container[0][this.measure];
	        },
	
	        getTotal: function() {
	            return this.element[0][this.scrollSize];
	        },
	
	        rescale: function(scale) {
	            this.scale = scale;
	        },
	
	        update: function(silent) {
	            var that = this,
	                total = that.virtual ? that._virtualMax : that.getTotal(),
	                scaledTotal = total * that.scale,
	                size = that.getSize();
	
	            that.max = that.virtual ? -that._virtualMin : 0;
	            that.size = size;
	            that.total = scaledTotal;
	            that.min = Math.min(that.max, size - scaledTotal);
	            that.minScale = size / total;
	            that.centerOffset = (scaledTotal - size) / 2;
	
	            that.enabled = that.forcedEnabled || (scaledTotal > size);
	
	            if (!silent) {
	                that.trigger(CHANGE, that);
	            }
	        }
	    });
	
	    var PaneDimensions = Observable.extend({
	        init: function(options) {
	            var that = this;
	
	            Observable.fn.init.call(that);
	
	            that.x = new PaneDimension(extend({horizontal: true}, options));
	            that.y = new PaneDimension(extend({horizontal: false}, options));
	            that.container = options.container;
	            that.forcedMinScale = options.minScale;
	            that.maxScale = options.maxScale || 100;
	
	            that.bind(CHANGE, options);
	        },
	
	        rescale: function(newScale) {
	            this.x.rescale(newScale);
	            this.y.rescale(newScale);
	            this.refresh();
	        },
	
	        centerCoordinates: function() {
	            return { x: Math.min(0, -this.x.centerOffset), y: Math.min(0, -this.y.centerOffset) };
	        },
	
	        refresh: function() {
	            var that = this;
	            that.x.update();
	            that.y.update();
	            that.enabled = that.x.enabled || that.y.enabled;
	            that.minScale = that.forcedMinScale || Math.min(that.x.minScale, that.y.minScale);
	            that.fitScale = Math.max(that.x.minScale, that.y.minScale);
	            that.trigger(CHANGE);
	        }
	    });
	
	    var PaneAxis = Observable.extend({
	        init: function(options) {
	            var that = this;
	            extend(that, options);
	            Observable.fn.init.call(that);
	        },
	
	        outOfBounds: function() {
	            return this.dimension.outOfBounds(this.movable[this.axis]);
	        },
	
	        dragMove: function(delta) {
	            var that = this,
	                dimension = that.dimension,
	                axis = that.axis,
	                movable = that.movable,
	                position = movable[axis] + delta;
	
	            if (!dimension.enabled) {
	                return;
	            }
	
	            if ((position < dimension.min && delta < 0) || (position > dimension.max && delta > 0)) {
	                delta *= that.resistance;
	            }
	
	            movable.translateAxis(axis, delta);
	            that.trigger(CHANGE, that);
	        }
	    });
	
	    var Pane = Class.extend({
	
	        init: function(options) {
	            var that = this,
	                x,
	                y,
	                resistance,
	                movable;
	
	            extend(that, {elastic: true}, options);
	
	            resistance = that.elastic ? 0.5 : 0;
	            movable = that.movable;
	
	            that.x = x = new PaneAxis({
	                axis: "x",
	                dimension: that.dimensions.x,
	                resistance: resistance,
	                movable: movable
	            });
	
	            that.y = y = new PaneAxis({
	                axis: "y",
	                dimension: that.dimensions.y,
	                resistance: resistance,
	                movable: movable
	            });
	
	            that.userEvents.bind(["move", "end", "gesturestart", "gesturechange"], {
	                gesturestart: function(e) {
	                    that.gesture = e;
	                    that.offset = that.dimensions.container.offset();
	                },
	
	                gesturechange: function(e) {
	                    var previousGesture = that.gesture,
	                        previousCenter = previousGesture.center,
	
	                        center = e.center,
	
	                        scaleDelta = e.distance / previousGesture.distance,
	
	                        minScale = that.dimensions.minScale,
	                        maxScale = that.dimensions.maxScale,
	                        coordinates;
	
	                    if (movable.scale <= minScale && scaleDelta < 1) {
	                        // Resist shrinking. Instead of shrinking from 1 to 0.5, it will shrink to 0.5 + (1 /* minScale */ - 0.5) * 0.8 = 0.9;
	                        scaleDelta += (1 - scaleDelta) * 0.8;
	                    }
	
	                    if (movable.scale * scaleDelta >= maxScale) {
	                        scaleDelta = maxScale / movable.scale;
	                    }
	
	                    var offsetX = movable.x + that.offset.left,
	                        offsetY = movable.y + that.offset.top;
	
	                    coordinates = {
	                        x: (offsetX - previousCenter.x) * scaleDelta + center.x - offsetX,
	                        y: (offsetY - previousCenter.y) * scaleDelta + center.y - offsetY
	                    };
	
	                    movable.scaleWith(scaleDelta);
	
	                    x.dragMove(coordinates.x);
	                    y.dragMove(coordinates.y);
	
	                    that.dimensions.rescale(movable.scale);
	                    that.gesture = e;
	                    e.preventDefault();
	                },
	
	                move: function(e) {
	                    if (e.event.target.tagName.match(/textarea|input/i)) {
	                        return;
	                    }
	
	                    if (x.dimension.enabled || y.dimension.enabled) {
	                        x.dragMove(e.x.delta);
	                        y.dragMove(e.y.delta);
	                        e.preventDefault();
	                    } else {
	                        e.touch.skip();
	                    }
	                },
	
	                end: function(e) {
	                    e.preventDefault();
	                }
	            });
	        }
	    });
	
	    var TRANSFORM_STYLE = support.transitions.prefix + "Transform",
	        translate;
	
	
	    if (support.hasHW3D) {
	        translate = function(x, y, scale) {
	            return "translate3d(" + x + "px," + y +"px,0) scale(" + scale + ")";
	        };
	    } else {
	        translate = function(x, y, scale) {
	            return "translate(" + x + "px," + y +"px) scale(" + scale + ")";
	        };
	    }
	
	    var Movable = Observable.extend({
	        init: function(element) {
	            var that = this;
	
	            Observable.fn.init.call(that);
	
	            that.element = $(element);
	            that.element[0].style.webkitTransformOrigin = "left top";
	            that.x = 0;
	            that.y = 0;
	            that.scale = 1;
	            that._saveCoordinates(translate(that.x, that.y, that.scale));
	        },
	
	        translateAxis: function(axis, by) {
	            this[axis] += by;
	            this.refresh();
	        },
	
	        scaleTo: function(scale) {
	            this.scale = scale;
	            this.refresh();
	        },
	
	        scaleWith: function(scaleDelta) {
	            this.scale *= scaleDelta;
	            this.refresh();
	        },
	
	        translate: function(coordinates) {
	            this.x += coordinates.x;
	            this.y += coordinates.y;
	            this.refresh();
	        },
	
	        moveAxis: function(axis, value) {
	            this[axis] = value;
	            this.refresh();
	        },
	
	        moveTo: function(coordinates) {
	            extend(this, coordinates);
	            this.refresh();
	        },
	
	        refresh: function() {
	            var that = this,
	                x = that.x,
	                y = that.y,
	                newCoordinates;
	
	            if (that.round) {
	                x = Math.round(x);
	                y = Math.round(y);
	            }
	
	            newCoordinates = translate(x, y, that.scale);
	
	            if (newCoordinates != that.coordinates) {
	                if (kendo.support.browser.msie && kendo.support.browser.version < 10) {
	                    that.element[0].style.position = "absolute";
	                    that.element[0].style.left = that.x + "px";
	                    that.element[0].style.top = that.y + "px";
	                } else {
	                    that.element[0].style[TRANSFORM_STYLE] = newCoordinates;
	                }
	                that._saveCoordinates(newCoordinates);
	                that.trigger(CHANGE);
	            }
	        },
	
	        _saveCoordinates: function(coordinates) {
	            this.coordinates = coordinates;
	        }
	    });
	
	    var DropTarget = Widget.extend({
	        init: function(element, options) {
	            var that = this;
	
	            Widget.fn.init.call(that, element, options);
	
	            var group = that.options.group;
	
	            if (!(group in dropTargets)) {
	                dropTargets[group] = [ that ];
	            } else {
	                dropTargets[group].push( that );
	            }
	        },
	
	        events: [
	            DRAGENTER,
	            DRAGLEAVE,
	            DROP
	        ],
	
	        options: {
	            name: "DropTarget",
	            group: "default"
	        },
	
	        destroy: function() {
	            var groupName = this.options.group,
	                group = dropTargets[groupName] || dropAreas[groupName],
	                i;
	
	            if (group.length > 1) {
	                Widget.fn.destroy.call(this);
	
	                for (i = 0; i < group.length; i++) {
	                    if (group[i] == this) {
	                        group.splice(i, 1);
	                        break;
	                    }
	                }
	            } else {
	                DropTarget.destroyGroup(groupName);
	            }
	        },
	
	        _trigger: function(eventName, e) {
	            var that = this,
	                draggable = draggables[that.options.group];
	
	            if (draggable) {
	                return that.trigger(eventName, extend({}, e.event, {
	                           draggable: draggable,
	                           dropTarget: e.dropTarget
	                       }));
	            }
	        },
	
	        _over: function(e) {
	            this._trigger(DRAGENTER, e);
	        },
	
	        _out: function(e) {
	            this._trigger(DRAGLEAVE, e);
	        },
	
	        _drop: function(e) {
	            var that = this,
	                draggable = draggables[that.options.group];
	
	            if (draggable) {
	                draggable.dropped = !that._trigger(DROP, e);
	            }
	        }
	    });
	
	    DropTarget.destroyGroup = function(groupName) {
	        var group = dropTargets[groupName] || dropAreas[groupName],
	            i;
	
	        if (group) {
	            for (i = 0; i < group.length; i++) {
	                Widget.fn.destroy.call(group[i]);
	            }
	
	            group.length = 0;
	            delete dropTargets[groupName];
	            delete dropAreas[groupName];
	        }
	    };
	
	    DropTarget._cache = dropTargets;
	
	    var DropTargetArea = DropTarget.extend({
	        init: function(element, options) {
	            var that = this;
	
	            Widget.fn.init.call(that, element, options);
	
	            var group = that.options.group;
	
	            if (!(group in dropAreas)) {
	                dropAreas[group] = [ that ];
	            } else {
	                dropAreas[group].push( that );
	            }
	        },
	
	        options: {
	            name: "DropTargetArea",
	            group: "default",
	            filter: null
	        }
	    });
	
	    var Draggable = Widget.extend({
	        init: function (element, options) {
	            var that = this;
	
	            Widget.fn.init.call(that, element, options);
	
	            that._activated = false;
	
	            that.userEvents = new UserEvents(that.element, {
	                global: true,
	                allowSelection: true,
	                stopPropagation: true,
	                filter: that.options.filter,
	                threshold: that.options.distance,
	                start: proxy(that._start, that),
	                hold: proxy(that._hold, that),
	                move: proxy(that._drag, that),
	                end: proxy(that._end, that),
	                cancel: proxy(that._cancel, that),
	                select: proxy(that._select, that)
	            });
	
	            that._afterEndHandler = proxy(that._afterEnd, that);
	            that.captureEscape = function(e) {
	                if (e.keyCode === kendo.keys.ESC) {
	                    that._trigger(DRAGCANCEL, {event: e});
	                    that.userEvents.cancel();
	                }
	            };
	        },
	
	        events: [
	            HOLD,
	            DRAGSTART,
	            DRAG,
	            DRAGEND,
	            DRAGCANCEL
	        ],
	
	        options: {
	            name: "Draggable",
	            distance: 5,
	            group: "default",
	            cursorOffset: null,
	            axis: null,
	            container: null,
	            filter: null,
	            ignore: null,
	            holdToDrag: false,
	            dropped: false
	        },
	
	        cancelHold: function() {
	            this._activated = false;
	        },
	
	        _updateHint: function(e) {
	            var that = this,
	                coordinates,
	                options = that.options,
	                boundaries = that.boundaries,
	                axis = options.axis,
	                cursorOffset = that.options.cursorOffset;
	
	            if (cursorOffset) {
	               coordinates = { left: e.x.location + cursorOffset.left, top: e.y.location + cursorOffset.top };
	            } else {
	               that.hintOffset.left += e.x.delta;
	               that.hintOffset.top += e.y.delta;
	               coordinates = $.extend({}, that.hintOffset);
	            }
	
	            if (boundaries) {
	                coordinates.top = within(coordinates.top, boundaries.y);
	                coordinates.left = within(coordinates.left, boundaries.x);
	            }
	
	            if (axis === "x") {
	                delete coordinates.top;
	            } else if (axis === "y") {
	                delete coordinates.left;
	            }
	
	            that.hint.css(coordinates);
	        },
	
	        _shouldIgnoreTarget: function(target) {
	            var ignoreSelector = this.options.ignore;
	            return ignoreSelector && $(target).is(ignoreSelector);
	        },
	
	        _select: function(e) {
	            if (!this._shouldIgnoreTarget(e.event.target)) {
	                e.preventDefault();
	            }
	        },
	
	        _start: function(e) {
	            var that = this,
	                options = that.options,
	                container = options.container,
	                hint = options.hint;
	
	            if (this._shouldIgnoreTarget(e.touch.initialTouch) || (options.holdToDrag && !that._activated)) {
	                that.userEvents.cancel();
	                return;
	            }
	
	            that.currentTarget = e.target;
	            that.currentTargetOffset = getOffset(that.currentTarget);
	
	            if (hint) {
	                if (that.hint) {
	                    that.hint.stop(true, true).remove();
	                }
	
	                that.hint = kendo.isFunction(hint) ? $(hint.call(that, that.currentTarget)) : hint;
	
	                var offset = getOffset(that.currentTarget);
	                that.hintOffset = offset;
	
	                that.hint.css( {
	                    position: "absolute",
	                    zIndex: 20000, // the Window's z-index is 10000 and can be raised because of z-stacking
	                    left: offset.left,
	                    top: offset.top
	                })
	                .appendTo(document.body);
	            }
	
	            draggables[options.group] = that;
	
	            that.dropped = false;
	
	            if (container) {
	                that.boundaries = containerBoundaries(container, that.hint);
	            }
	
	            if (that._trigger(DRAGSTART, e)) {
	                that.userEvents.cancel();
	                that._afterEnd();
	            }
	
	            $(document).on(KEYUP, that.captureEscape);
	        },
	
	        _hold: function(e) {
	            this.currentTarget = e.target;
	
	            if (this._trigger(HOLD, e)) {
	                this.userEvents.cancel();
	            } else {
	                this._activated = true;
	            }
	        },
	
	        _drag: function(e) {
	            var that = this;
	
	            e.preventDefault();
	
	            that._withDropTarget(e, function(target, targetElement) {
	                if (!target) {
	                    if (lastDropTarget) {
	                        lastDropTarget._trigger(DRAGLEAVE, extend(e, { dropTarget: $(lastDropTarget.targetElement) }));
	                        lastDropTarget = null;
	                    }
	                    return;
	                }
	
	                if (lastDropTarget) {
	                    if (targetElement === lastDropTarget.targetElement) {
	                        return;
	                    }
	
	                    lastDropTarget._trigger(DRAGLEAVE, extend(e, { dropTarget: $(lastDropTarget.targetElement) }));
	                }
	
	                target._trigger(DRAGENTER, extend(e, { dropTarget: $(targetElement) }));
	                lastDropTarget = extend(target, { targetElement: targetElement });
	            });
	
	            that._trigger(DRAG, e);
	
	            if (that.hint) {
	                that._updateHint(e);
	            }
	        },
	
	        _end: function(e) {
	            var that = this;
	
	            that._withDropTarget(e, function(target, targetElement) {
	                if (target) {
	                    target._drop(extend({}, e, { dropTarget: $(targetElement) }));
	                    lastDropTarget = null;
	                }
	            });
	
	            that._trigger(DRAGEND, e);
	            that._cancel(e.event);
	        },
	
	        _cancel: function() {
	            var that = this;
	
	            that._activated = false;
	
	            if (that.hint && !that.dropped) {
	                setTimeout(function() {
	                    that.hint.stop(true, true).animate(that.currentTargetOffset, "fast", that._afterEndHandler);
	                }, 0);
	
	            } else {
	                that._afterEnd();
	            }
	        },
	
	        _trigger: function(eventName, e) {
	            var that = this;
	
	            return that.trigger(
	                eventName, extend(
	                {},
	                e.event,
	                {
	                    x: e.x,
	                    y: e.y,
	                    currentTarget: that.currentTarget,
	                    dropTarget: e.dropTarget
	                }
	            ));
	        },
	
	        _withDropTarget: function(e, callback) {
	            var that = this,
	                target, result,
	                options = that.options,
	                targets = dropTargets[options.group],
	                areas = dropAreas[options.group];
	
	            if (targets && targets.length || areas && areas.length) {
	
	                target = elementUnderCursor(e);
	
	                if (that.hint && contains(that.hint[0], target)) {
	                    that.hint.hide();
	                    target = elementUnderCursor(e);
	                    // IE8 does not return the element in iframe from first attempt
	                    if (!target) {
	                        target = elementUnderCursor(e);
	                    }
	                    that.hint.show();
	                }
	
	                result = checkTarget(target, targets, areas);
	
	                if (result) {
	                    callback(result.target, result.targetElement);
	                } else {
	                    callback();
	                }
	            }
	        },
	
	        destroy: function() {
	            var that = this;
	
	            Widget.fn.destroy.call(that);
	
	            that._afterEnd();
	
	            that.userEvents.destroy();
	
	            that.currentTarget = null;
	        },
	
	        _afterEnd: function() {
	            var that = this;
	
	            if (that.hint) {
	                that.hint.remove();
	            }
	
	            delete draggables[that.options.group];
	
	            that.trigger("destroy");
	            $(document).off(KEYUP, that.captureEscape);
	        }
	    });
	
	    kendo.ui.plugin(DropTarget);
	    kendo.ui.plugin(DropTargetArea);
	    kendo.ui.plugin(Draggable);
	    kendo.TapCapture = TapCapture;
	    kendo.containerBoundaries = containerBoundaries;
	
	    extend(kendo.ui, {
	        Pane: Pane,
	        PaneDimensions: PaneDimensions,
	        Movable: Movable
	    });
	
	 })(window.kendo.jQuery);
	
	return window.kendo;
	
	}, __webpack_require__(230));


/***/ },

/***/ 229:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){
	
	var __meta__ = {
	    id: "core",
	    name: "Core",
	    category: "framework",
	    description: "The core of the Kendo framework."
	};
	
	/*jshint eqnull: true, loopfunc: true, evil: true, boss: true, freeze: false*/
	(function($, undefined) {
	    var kendo = window.kendo = window.kendo || { cultures: {} },
	        extend = $.extend,
	        each = $.each,
	        isArray = $.isArray,
	        proxy = $.proxy,
	        noop = $.noop,
	        math = Math,
	        Template,
	        JSON = window.JSON || {},
	        support = {},
	        percentRegExp = /%/,
	        formatRegExp = /\{(\d+)(:[^\}]+)?\}/g,
	        boxShadowRegExp = /(\d+(?:\.?)\d*)px\s*(\d+(?:\.?)\d*)px\s*(\d+(?:\.?)\d*)px\s*(\d+)?/i,
	        numberRegExp = /^(\+|-?)\d+(\.?)\d*$/,
	        FUNCTION = "function",
	        STRING = "string",
	        NUMBER = "number",
	        OBJECT = "object",
	        NULL = "null",
	        BOOLEAN = "boolean",
	        UNDEFINED = "undefined",
	        getterCache = {},
	        setterCache = {},
	        slice = [].slice,
	        globalize = window.Globalize;
	
	    kendo.version = "$KENDO_VERSION";
	
	    function Class() {}
	
	    Class.extend = function(proto) {
	        var base = function() {},
	            member,
	            that = this,
	            subclass = proto && proto.init ? proto.init : function () {
	                that.apply(this, arguments);
	            },
	            fn;
	
	        base.prototype = that.prototype;
	        fn = subclass.fn = subclass.prototype = new base();
	
	        for (member in proto) {
	            if (proto[member] != null && proto[member].constructor === Object) {
	                // Merge object members
	                fn[member] = extend(true, {}, base.prototype[member], proto[member]);
	            } else {
	                fn[member] = proto[member];
	            }
	        }
	
	        fn.constructor = subclass;
	        subclass.extend = that.extend;
	
	        return subclass;
	    };
	
	    Class.prototype._initOptions = function(options) {
	        this.options = deepExtend({}, this.options, options);
	    };
	
	    var isFunction = kendo.isFunction = function(fn) {
	        return typeof fn === "function";
	    };
	
	    var preventDefault = function() {
	        this._defaultPrevented = true;
	    };
	
	    var isDefaultPrevented = function() {
	        return this._defaultPrevented === true;
	    };
	
	    var Observable = Class.extend({
	        init: function() {
	            this._events = {};
	        },
	
	        bind: function(eventName, handlers, one) {
	            var that = this,
	                idx,
	                eventNames = typeof eventName === STRING ? [eventName] : eventName,
	                length,
	                original,
	                handler,
	                handlersIsFunction = typeof handlers === FUNCTION,
	                events;
	
	            if (handlers === undefined) {
	                for (idx in eventName) {
	                    that.bind(idx, eventName[idx]);
	                }
	                return that;
	            }
	
	            for (idx = 0, length = eventNames.length; idx < length; idx++) {
	                eventName = eventNames[idx];
	
	                handler = handlersIsFunction ? handlers : handlers[eventName];
	
	                if (handler) {
	                    if (one) {
	                        original = handler;
	                        handler = function() {
	                            that.unbind(eventName, handler);
	                            original.apply(that, arguments);
	                        };
	                        handler.original = original;
	                    }
	                    events = that._events[eventName] = that._events[eventName] || [];
	                    events.push(handler);
	                }
	            }
	
	            return that;
	        },
	
	        one: function(eventNames, handlers) {
	            return this.bind(eventNames, handlers, true);
	        },
	
	        first: function(eventName, handlers) {
	            var that = this,
	                idx,
	                eventNames = typeof eventName === STRING ? [eventName] : eventName,
	                length,
	                handler,
	                handlersIsFunction = typeof handlers === FUNCTION,
	                events;
	
	            for (idx = 0, length = eventNames.length; idx < length; idx++) {
	                eventName = eventNames[idx];
	
	                handler = handlersIsFunction ? handlers : handlers[eventName];
	
	                if (handler) {
	                    events = that._events[eventName] = that._events[eventName] || [];
	                    events.unshift(handler);
	                }
	            }
	
	            return that;
	        },
	
	        trigger: function(eventName, e) {
	            var that = this,
	                events = that._events[eventName],
	                idx,
	                length;
	
	            if (events) {
	                e = e || {};
	
	                e.sender = that;
	
	                e._defaultPrevented = false;
	
	                e.preventDefault = preventDefault;
	
	                e.isDefaultPrevented = isDefaultPrevented;
	
	                events = events.slice();
	
	                for (idx = 0, length = events.length; idx < length; idx++) {
	                    events[idx].call(that, e);
	                }
	
	                return e._defaultPrevented === true;
	            }
	
	            return false;
	        },
	
	        unbind: function(eventName, handler) {
	            var that = this,
	                events = that._events[eventName],
	                idx;
	
	            if (eventName === undefined) {
	                that._events = {};
	            } else if (events) {
	                if (handler) {
	                    for (idx = events.length - 1; idx >= 0; idx--) {
	                        if (events[idx] === handler || events[idx].original === handler) {
	                            events.splice(idx, 1);
	                        }
	                    }
	                } else {
	                    that._events[eventName] = [];
	                }
	            }
	
	            return that;
	        }
	    });
	
	
	     function compilePart(part, stringPart) {
	         if (stringPart) {
	             return "'" +
	                 part.split("'").join("\\'")
	                     .split('\\"').join('\\\\\\"')
	                     .replace(/\n/g, "\\n")
	                     .replace(/\r/g, "\\r")
	                     .replace(/\t/g, "\\t") + "'";
	         } else {
	             var first = part.charAt(0),
	                 rest = part.substring(1);
	
	             if (first === "=") {
	                 return "+(" + rest + ")+";
	             } else if (first === ":") {
	                 return "+e(" + rest + ")+";
	             } else {
	                 return ";" + part + ";o+=";
	             }
	         }
	     }
	
	    var argumentNameRegExp = /^\w+/,
	        encodeRegExp = /\$\{([^}]*)\}/g,
	        escapedCurlyRegExp = /\\\}/g,
	        curlyRegExp = /__CURLY__/g,
	        escapedSharpRegExp = /\\#/g,
	        sharpRegExp = /__SHARP__/g,
	        zeros = ["", "0", "00", "000", "0000"];
	
	    Template = {
	        paramName: "data", // name of the parameter of the generated template
	        useWithBlock: true, // whether to wrap the template in a with() block
	        render: function(template, data) {
	            var idx,
	                length,
	                html = "";
	
	            for (idx = 0, length = data.length; idx < length; idx++) {
	                html += template(data[idx]);
	            }
	
	            return html;
	        },
	        compile: function(template, options) {
	            var settings = extend({}, this, options),
	                paramName = settings.paramName,
	                argumentName = paramName.match(argumentNameRegExp)[0],
	                useWithBlock = settings.useWithBlock,
	                functionBody = "var o,e=kendo.htmlEncode;",
	                fn,
	                parts,
	                idx;
	
	            if (isFunction(template)) {
	                if (template.length === 2) {
	                    //looks like jQuery.template
	                    return function(d) {
	                        return template($, { data: d }).join("");
	                    };
	                }
	                return template;
	            }
	
	            functionBody += useWithBlock ? "with(" + paramName + "){" : "";
	
	            functionBody += "o=";
	
	            parts = template
	                .replace(escapedCurlyRegExp, "__CURLY__")
	                .replace(encodeRegExp, "#=e($1)#")
	                .replace(curlyRegExp, "}")
	                .replace(escapedSharpRegExp, "__SHARP__")
	                .split("#");
	
	            for (idx = 0; idx < parts.length; idx ++) {
	                functionBody += compilePart(parts[idx], idx % 2 === 0);
	            }
	
	            functionBody += useWithBlock ? ";}" : ";";
	
	            functionBody += "return o;";
	
	            functionBody = functionBody.replace(sharpRegExp, "#");
	
	            try {
	                fn = new Function(argumentName, functionBody);
	                fn._slotCount = Math.floor(parts.length / 2);
	                return fn;
	            } catch(e) {
	                throw new Error(kendo.format("Invalid template:'{0}' Generated code:'{1}'", template, functionBody));
	            }
	        }
	    };
	
	function pad(number, digits, end) {
	    number = number + "";
	    digits = digits || 2;
	    end = digits - number.length;
	
	    if (end) {
	        return zeros[digits].substring(0, end) + number;
	    }
	
	    return number;
	}
	
	    //JSON stringify
	(function() {
	    var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        gap,
	        indent,
	        meta = {
	            "\b": "\\b",
	            "\t": "\\t",
	            "\n": "\\n",
	            "\f": "\\f",
	            "\r": "\\r",
	            "\"" : '\\"',
	            "\\": "\\\\"
	        },
	        rep,
	        toString = {}.toString;
	
	
	    if (typeof Date.prototype.toJSON !== FUNCTION) {
	
	        Date.prototype.toJSON = function () {
	            var that = this;
	
	            return isFinite(that.valueOf()) ?
	                pad(that.getUTCFullYear(), 4) + "-" +
	                pad(that.getUTCMonth() + 1)   + "-" +
	                pad(that.getUTCDate())        + "T" +
	                pad(that.getUTCHours())       + ":" +
	                pad(that.getUTCMinutes())     + ":" +
	                pad(that.getUTCSeconds())     + "Z" : null;
	        };
	
	        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () {
	            return this.valueOf();
	        };
	    }
	
	    function quote(string) {
	        escapable.lastIndex = 0;
	        return escapable.test(string) ? "\"" + string.replace(escapable, function (a) {
	            var c = meta[a];
	            return typeof c === STRING ? c :
	                "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
	        }) + "\"" : "\"" + string + "\"";
	    }
	
	    function str(key, holder) {
	        var i,
	            k,
	            v,
	            length,
	            mind = gap,
	            partial,
	            value = holder[key],
	            type;
	
	        if (value && typeof value === OBJECT && typeof value.toJSON === FUNCTION) {
	            value = value.toJSON(key);
	        }
	
	        if (typeof rep === FUNCTION) {
	            value = rep.call(holder, key, value);
	        }
	
	        type = typeof value;
	        if (type === STRING) {
	            return quote(value);
	        } else if (type === NUMBER) {
	            return isFinite(value) ? String(value) : NULL;
	        } else if (type === BOOLEAN || type === NULL) {
	            return String(value);
	        } else if (type === OBJECT) {
	            if (!value) {
	                return NULL;
	            }
	            gap += indent;
	            partial = [];
	            if (toString.apply(value) === "[object Array]") {
	                length = value.length;
	                for (i = 0; i < length; i++) {
	                    partial[i] = str(i, value) || NULL;
	                }
	                v = partial.length === 0 ? "[]" : gap ?
	                    "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" :
	                    "[" + partial.join(",") + "]";
	                gap = mind;
	                return v;
	            }
	            if (rep && typeof rep === OBJECT) {
	                length = rep.length;
	                for (i = 0; i < length; i++) {
	                    if (typeof rep[i] === STRING) {
	                        k = rep[i];
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ": " : ":") + v);
	                        }
	                    }
	                }
	            } else {
	                for (k in value) {
	                    if (Object.hasOwnProperty.call(value, k)) {
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ": " : ":") + v);
	                        }
	                    }
	                }
	            }
	
	            v = partial.length === 0 ? "{}" : gap ?
	                "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" :
	                "{" + partial.join(",") + "}";
	            gap = mind;
	            return v;
	        }
	    }
	
	    if (typeof JSON.stringify !== FUNCTION) {
	        JSON.stringify = function (value, replacer, space) {
	            var i;
	            gap = "";
	            indent = "";
	
	            if (typeof space === NUMBER) {
	                for (i = 0; i < space; i += 1) {
	                    indent += " ";
	                }
	
	            } else if (typeof space === STRING) {
	                indent = space;
	            }
	
	            rep = replacer;
	            if (replacer && typeof replacer !== FUNCTION && (typeof replacer !== OBJECT || typeof replacer.length !== NUMBER)) {
	                throw new Error("JSON.stringify");
	            }
	
	            return str("", {"": value});
	        };
	    }
	})();
	
	// Date and Number formatting
	(function() {
	    var dateFormatRegExp = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|"[^"]*"|'[^']*'/g,
	        standardFormatRegExp =  /^(n|c|p|e)(\d*)$/i,
	        literalRegExp = /(\\.)|(['][^']*[']?)|(["][^"]*["]?)/g,
	        commaRegExp = /\,/g,
	        EMPTY = "",
	        POINT = ".",
	        COMMA = ",",
	        SHARP = "#",
	        ZERO = "0",
	        PLACEHOLDER = "??",
	        EN = "en-US",
	        objectToString = {}.toString;
	
	    //cultures
	    kendo.cultures["en-US"] = {
	        name: EN,
	        numberFormat: {
	            pattern: ["-n"],
	            decimals: 2,
	            ",": ",",
	            ".": ".",
	            groupSize: [3],
	            percent: {
	                pattern: ["-n %", "n %"],
	                decimals: 2,
	                ",": ",",
	                ".": ".",
	                groupSize: [3],
	                symbol: "%"
	            },
	            currency: {
	                pattern: ["($n)", "$n"],
	                decimals: 2,
	                ",": ",",
	                ".": ".",
	                groupSize: [3],
	                symbol: "$"
	            }
	        },
	        calendars: {
	            standard: {
	                days: {
	                    names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	                    namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	                    namesShort: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ]
	                },
	                months: {
	                    names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	                    namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	                },
	                AM: [ "AM", "am", "AM" ],
	                PM: [ "PM", "pm", "PM" ],
	                patterns: {
	                    d: "M/d/yyyy",
	                    D: "dddd, MMMM dd, yyyy",
	                    F: "dddd, MMMM dd, yyyy h:mm:ss tt",
	                    g: "M/d/yyyy h:mm tt",
	                    G: "M/d/yyyy h:mm:ss tt",
	                    m: "MMMM dd",
	                    M: "MMMM dd",
	                    s: "yyyy'-'MM'-'ddTHH':'mm':'ss",
	                    t: "h:mm tt",
	                    T: "h:mm:ss tt",
	                    u: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
	                    y: "MMMM, yyyy",
	                    Y: "MMMM, yyyy"
	                },
	                "/": "/",
	                ":": ":",
	                firstDay: 0,
	                twoDigitYearMax: 2029
	            }
	        }
	    };
	
	
	     function findCulture(culture) {
	        if (culture) {
	            if (culture.numberFormat) {
	                return culture;
	            }
	
	            if (typeof culture === STRING) {
	                var cultures = kendo.cultures;
	                return cultures[culture] || cultures[culture.split("-")[0]] || null;
	            }
	
	            return null;
	        }
	
	        return null;
	    }
	
	    function getCulture(culture) {
	        if (culture) {
	            culture = findCulture(culture);
	        }
	
	        return culture || kendo.cultures.current;
	    }
	
	    function expandNumberFormat(numberFormat) {
	        numberFormat.groupSizes = numberFormat.groupSize;
	        numberFormat.percent.groupSizes = numberFormat.percent.groupSize;
	        numberFormat.currency.groupSizes = numberFormat.currency.groupSize;
	    }
	
	    kendo.culture = function(cultureName) {
	        var cultures = kendo.cultures, culture;
	
	        if (cultureName !== undefined) {
	            culture = findCulture(cultureName) || cultures[EN];
	            culture.calendar = culture.calendars.standard;
	            cultures.current = culture;
	
	            if (globalize) {
	                expandNumberFormat(culture.numberFormat);
	            }
	
	        } else {
	            return cultures.current;
	        }
	    };
	
	    kendo.findCulture = findCulture;
	    kendo.getCulture = getCulture;
	
	    //set current culture to en-US.
	    kendo.culture(EN);
	
	    function formatDate(date, format, culture) {
	        culture = getCulture(culture);
	
	        var calendar = culture.calendars.standard,
	            days = calendar.days,
	            months = calendar.months;
	
	        format = calendar.patterns[format] || format;
	
	        return format.replace(dateFormatRegExp, function (match) {
	            var result;
	
	            if (match === "d") {
	                result = date.getDate();
	            } else if (match === "dd") {
	                result = pad(date.getDate());
	            } else if (match === "ddd") {
	                result = days.namesAbbr[date.getDay()];
	            } else if (match === "dddd") {
	                result = days.names[date.getDay()];
	            } else if (match === "M") {
	                result = date.getMonth() + 1;
	            } else if (match === "MM") {
	                result = pad(date.getMonth() + 1);
	            } else if (match === "MMM") {
	                result = months.namesAbbr[date.getMonth()];
	            } else if (match === "MMMM") {
	                result = months.names[date.getMonth()];
	            } else if (match === "yy") {
	                result = pad(date.getFullYear() % 100);
	            } else if (match === "yyyy") {
	                result = pad(date.getFullYear(), 4);
	            } else if (match === "h" ) {
	                result = date.getHours() % 12 || 12;
	            } else if (match === "hh") {
	                result = pad(date.getHours() % 12 || 12);
	            } else if (match === "H") {
	                result = date.getHours();
	            } else if (match === "HH") {
	                result = pad(date.getHours());
	            } else if (match === "m") {
	                result = date.getMinutes();
	            } else if (match === "mm") {
	                result = pad(date.getMinutes());
	            } else if (match === "s") {
	                result = date.getSeconds();
	            } else if (match === "ss") {
	                result = pad(date.getSeconds());
	            } else if (match === "f") {
	                result = math.floor(date.getMilliseconds() / 100);
	            } else if (match === "ff") {
	                result = date.getMilliseconds();
	                if (result > 99) {
	                    result = math.floor(result / 10);
	                }
	
	                result = pad(result);
	            } else if (match === "fff") {
	                result = pad(date.getMilliseconds(), 3);
	            } else if (match === "tt") {
	                result = date.getHours() < 12 ? calendar.AM[0] : calendar.PM[0];
	            }
	
	            return result !== undefined ? result : match.slice(1, match.length - 1);
	        });
	    }
	
	    //number formatting
	    function formatNumber(number, format, culture) {
	        culture = getCulture(culture);
	
	        var numberFormat = culture.numberFormat,
	            groupSize = numberFormat.groupSize[0],
	            groupSeparator = numberFormat[COMMA],
	            decimal = numberFormat[POINT],
	            precision = numberFormat.decimals,
	            pattern = numberFormat.pattern[0],
	            literals = [],
	            symbol,
	            isCurrency, isPercent,
	            customPrecision,
	            formatAndPrecision,
	            negative = number < 0,
	            integer,
	            fraction,
	            integerLength,
	            fractionLength,
	            replacement = EMPTY,
	            value = EMPTY,
	            idx,
	            length,
	            ch,
	            hasGroup,
	            hasNegativeFormat,
	            decimalIndex,
	            sharpIndex,
	            zeroIndex,
	            hasZero, hasSharp,
	            percentIndex,
	            currencyIndex,
	            startZeroIndex,
	            start = -1,
	            end;
	
	        //return empty string if no number
	        if (number === undefined) {
	            return EMPTY;
	        }
	
	        if (!isFinite(number)) {
	            return number;
	        }
	
	        //if no format then return number.toString() or number.toLocaleString() if culture.name is not defined
	        if (!format) {
	            return culture.name.length ? number.toLocaleString() : number.toString();
	        }
	
	        formatAndPrecision = standardFormatRegExp.exec(format);
	
	        // standard formatting
	        if (formatAndPrecision) {
	            format = formatAndPrecision[1].toLowerCase();
	
	            isCurrency = format === "c";
	            isPercent = format === "p";
	
	            if (isCurrency || isPercent) {
	                //get specific number format information if format is currency or percent
	                numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;
	                groupSize = numberFormat.groupSize[0];
	                groupSeparator = numberFormat[COMMA];
	                decimal = numberFormat[POINT];
	                precision = numberFormat.decimals;
	                symbol = numberFormat.symbol;
	                pattern = numberFormat.pattern[negative ? 0 : 1];
	            }
	
	            customPrecision = formatAndPrecision[2];
	
	            if (customPrecision) {
	                precision = +customPrecision;
	            }
	
	            //return number in exponential format
	            if (format === "e") {
	                return customPrecision ? number.toExponential(precision) : number.toExponential(); // toExponential() and toExponential(undefined) differ in FF #653438.
	            }
	
	            // multiply if format is percent
	            if (isPercent) {
	                number *= 100;
	            }
	
	            number = round(number, precision);
	            negative = number < 0;
	            number = number.split(POINT);
	
	            integer = number[0];
	            fraction = number[1];
	
	            //exclude "-" if number is negative.
	            if (negative) {
	                integer = integer.substring(1);
	            }
	
	            value = integer;
	            integerLength = integer.length;
	
	            //add group separator to the number if it is longer enough
	            if (integerLength >= groupSize) {
	                value = EMPTY;
	                for (idx = 0; idx < integerLength; idx++) {
	                    if (idx > 0 && (integerLength - idx) % groupSize === 0) {
	                        value += groupSeparator;
	                    }
	                    value += integer.charAt(idx);
	                }
	            }
	
	            if (fraction) {
	                value += decimal + fraction;
	            }
	
	            if (format === "n" && !negative) {
	                return value;
	            }
	
	            number = EMPTY;
	
	            for (idx = 0, length = pattern.length; idx < length; idx++) {
	                ch = pattern.charAt(idx);
	
	                if (ch === "n") {
	                    number += value;
	                } else if (ch === "$" || ch === "%") {
	                    number += symbol;
	                } else {
	                    number += ch;
	                }
	            }
	
	            return number;
	        }
	
	        //custom formatting
	        //
	        //separate format by sections.
	
	        //make number positive
	        if (negative) {
	            number = -number;
	        }
	
	        if (format.indexOf("'") > -1 || format.indexOf("\"") > -1 || format.indexOf("\\") > -1) {
	            format = format.replace(literalRegExp, function (match) {
	                var quoteChar = match.charAt(0).replace("\\", ""),
	                    literal = match.slice(1).replace(quoteChar, "");
	
	                literals.push(literal);
	
	                return PLACEHOLDER;
	            });
	        }
	
	        format = format.split(";");
	        if (negative && format[1]) {
	            //get negative format
	            format = format[1];
	            hasNegativeFormat = true;
	        } else if (number === 0) {
	            //format for zeros
	            format = format[2] || format[0];
	            if (format.indexOf(SHARP) == -1 && format.indexOf(ZERO) == -1) {
	                //return format if it is string constant.
	                return format;
	            }
	        } else {
	            format = format[0];
	        }
	
	        percentIndex = format.indexOf("%");
	        currencyIndex = format.indexOf("$");
	
	        isPercent = percentIndex != -1;
	        isCurrency = currencyIndex != -1;
	
	        //multiply number if the format has percent
	        if (isPercent) {
	            number *= 100;
	        }
	
	        if (isCurrency && format[currencyIndex - 1] === "\\") {
	            format = format.split("\\").join("");
	            isCurrency = false;
	        }
	
	        if (isCurrency || isPercent) {
	            //get specific number format information if format is currency or percent
	            numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;
	            groupSize = numberFormat.groupSize[0];
	            groupSeparator = numberFormat[COMMA];
	            decimal = numberFormat[POINT];
	            precision = numberFormat.decimals;
	            symbol = numberFormat.symbol;
	        }
	
	        hasGroup = format.indexOf(COMMA) > -1;
	        if (hasGroup) {
	            format = format.replace(commaRegExp, EMPTY);
	        }
	
	        decimalIndex = format.indexOf(POINT);
	        length = format.length;
	
	        if (decimalIndex != -1) {
	            fraction = number.toString().split("e");
	            if (fraction[1]) {
	                fraction = round(number, Math.abs(fraction[1]));
	            } else {
	                fraction = fraction[0];
	            }
	            fraction = fraction.split(POINT)[1] || EMPTY;
	            zeroIndex = format.lastIndexOf(ZERO) - decimalIndex;
	            sharpIndex = format.lastIndexOf(SHARP) - decimalIndex;
	            hasZero = zeroIndex > -1;
	            hasSharp = sharpIndex > -1;
	            idx = fraction.length;
	
	            if (!hasZero && !hasSharp) {
	                format = format.substring(0, decimalIndex) + format.substring(decimalIndex + 1);
	                length = format.length;
	                decimalIndex = -1;
	                idx = 0;
	            } if (hasZero && zeroIndex > sharpIndex) {
	                idx = zeroIndex;
	            } else if (sharpIndex > zeroIndex) {
	                if (hasSharp && idx > sharpIndex) {
	                    idx = sharpIndex;
	                } else if (hasZero && idx < zeroIndex) {
	                    idx = zeroIndex;
	                }
	            }
	
	            if (idx > -1) {
	                number = round(number, idx);
	            }
	        } else {
	            number = round(number);
	        }
	
	        sharpIndex = format.indexOf(SHARP);
	        startZeroIndex = zeroIndex = format.indexOf(ZERO);
	
	        //define the index of the first digit placeholder
	        if (sharpIndex == -1 && zeroIndex != -1) {
	            start = zeroIndex;
	        } else if (sharpIndex != -1 && zeroIndex == -1) {
	            start = sharpIndex;
	        } else {
	            start = sharpIndex > zeroIndex ? zeroIndex : sharpIndex;
	        }
	
	        sharpIndex = format.lastIndexOf(SHARP);
	        zeroIndex = format.lastIndexOf(ZERO);
	
	        //define the index of the last digit placeholder
	        if (sharpIndex == -1 && zeroIndex != -1) {
	            end = zeroIndex;
	        } else if (sharpIndex != -1 && zeroIndex == -1) {
	            end = sharpIndex;
	        } else {
	            end = sharpIndex > zeroIndex ? sharpIndex : zeroIndex;
	        }
	
	        if (start == length) {
	            end = start;
	        }
	
	        if (start != -1) {
	            value = number.toString().split(POINT);
	            integer = value[0];
	            fraction = value[1] || EMPTY;
	
	            integerLength = integer.length;
	            fractionLength = fraction.length;
	
	            if (negative && (number * -1) >= 0) {
	                negative = false;
	            }
	
	            //add group separator to the number if it is longer enough
	            if (hasGroup) {
	                if (integerLength === groupSize && integerLength < decimalIndex - startZeroIndex) {
	                    integer = groupSeparator + integer;
	                } else if (integerLength > groupSize) {
	                    value = EMPTY;
	                    for (idx = 0; idx < integerLength; idx++) {
	                        if (idx > 0 && (integerLength - idx) % groupSize === 0) {
	                            value += groupSeparator;
	                        }
	                        value += integer.charAt(idx);
	                    }
	
	                    integer = value;
	                }
	            }
	
	            number = format.substring(0, start);
	
	            if (negative && !hasNegativeFormat) {
	                number += "-";
	            }
	
	            for (idx = start; idx < length; idx++) {
	                ch = format.charAt(idx);
	
	                if (decimalIndex == -1) {
	                    if (end - idx < integerLength) {
	                        number += integer;
	                        break;
	                    }
	                } else {
	                    if (zeroIndex != -1 && zeroIndex < idx) {
	                        replacement = EMPTY;
	                    }
	
	                    if ((decimalIndex - idx) <= integerLength && decimalIndex - idx > -1) {
	                        number += integer;
	                        idx = decimalIndex;
	                    }
	
	                    if (decimalIndex === idx) {
	                        number += (fraction ? decimal : EMPTY) + fraction;
	                        idx += end - decimalIndex + 1;
	                        continue;
	                    }
	                }
	
	                if (ch === ZERO) {
	                    number += ch;
	                    replacement = ch;
	                } else if (ch === SHARP) {
	                    number += replacement;
	                }
	            }
	
	            if (end >= start) {
	                number += format.substring(end + 1);
	            }
	
	            //replace symbol placeholders
	            if (isCurrency || isPercent) {
	                value = EMPTY;
	                for (idx = 0, length = number.length; idx < length; idx++) {
	                    ch = number.charAt(idx);
	                    value += (ch === "$" || ch === "%") ? symbol : ch;
	                }
	                number = value;
	            }
	
	            length = literals.length;
	
	            if (length) {
	                for (idx = 0; idx < length; idx++) {
	                    number = number.replace(PLACEHOLDER, literals[idx]);
	                }
	            }
	        }
	
	        return number;
	    }
	
	    var round = function(value, precision) {
	        precision = precision || 0;
	
	        value = value.toString().split('e');
	        value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + precision) : precision)));
	
	        value = value.toString().split('e');
	        value = +(value[0] + 'e' + (value[1] ? (+value[1] - precision) : -precision));
	
	        return value.toFixed(precision);
	    };
	
	    var toString = function(value, fmt, culture) {
	        if (fmt) {
	            if (objectToString.call(value) === "[object Date]") {
	                return formatDate(value, fmt, culture);
	            } else if (typeof value === NUMBER) {
	                return formatNumber(value, fmt, culture);
	            }
	        }
	
	        return value !== undefined ? value : "";
	    };
	
	    if (globalize) {
	        toString = function(value, format, culture) {
	            if ($.isPlainObject(culture)) {
	                culture = culture.name;
	            }
	
	            return globalize.format(value, format, culture);
	        };
	    }
	
	    kendo.format = function(fmt) {
	        var values = arguments;
	
	        return fmt.replace(formatRegExp, function(match, index, placeholderFormat) {
	            var value = values[parseInt(index, 10) + 1];
	
	            return toString(value, placeholderFormat ? placeholderFormat.substring(1) : "");
	        });
	    };
	
	    kendo._extractFormat = function (format) {
	        if (format.slice(0,3) === "{0:") {
	            format = format.slice(3, format.length - 1);
	        }
	
	        return format;
	    };
	
	    kendo._activeElement = function() {
	        try {
	            return document.activeElement;
	        } catch(e) {
	            return document.documentElement.activeElement;
	        }
	    };
	
	    kendo._round = round;
	    kendo.toString = toString;
	})();
	
	
	(function() {
	    var nonBreakingSpaceRegExp = /\u00A0/g,
	        exponentRegExp = /[eE][\-+]?[0-9]+/,
	        shortTimeZoneRegExp = /[+|\-]\d{1,2}/,
	        longTimeZoneRegExp = /[+|\-]\d{1,2}:\d{2}/,
	        dateRegExp = /^\/Date\((.*?)\)\/$/,
	        offsetRegExp = /[+-]\d*/,
	        formatsSequence = ["G", "g", "d", "F", "D", "y", "m", "T", "t"],
	        numberRegExp = {
	            2: /^\d{1,2}/,
	            3: /^\d{1,3}/,
	            4: /^\d{4}/
	        },
	        objectToString = {}.toString;
	
	    function outOfRange(value, start, end) {
	        return !(value >= start && value <= end);
	    }
	
	    function designatorPredicate(designator) {
	        return designator.charAt(0);
	    }
	
	    function mapDesignators(designators) {
	        return $.map(designators, designatorPredicate);
	    }
	
	    //if date's day is different than the typed one - adjust
	    function adjustDST(date, hours) {
	        if (!hours && date.getHours() === 23) {
	            date.setHours(date.getHours() + 2);
	        }
	    }
	
	    function lowerArray(data) {
	        var idx = 0,
	            length = data.length,
	            array = [];
	
	        for (; idx < length; idx++) {
	            array[idx] = (data[idx] + "").toLowerCase();
	        }
	
	        return array;
	    }
	
	    function lowerLocalInfo(localInfo) {
	        var newLocalInfo = {}, property;
	
	        for (property in localInfo) {
	            newLocalInfo[property] = lowerArray(localInfo[property]);
	        }
	
	        return newLocalInfo;
	    }
	
	    function parseExact(value, format, culture) {
	        if (!value) {
	            return null;
	        }
	
	        var lookAhead = function (match) {
	                var i = 0;
	                while (format[idx] === match) {
	                    i++;
	                    idx++;
	                }
	                if (i > 0) {
	                    idx -= 1;
	                }
	                return i;
	            },
	            getNumber = function(size) {
	                var rg = numberRegExp[size] || new RegExp('^\\d{1,' + size + '}'),
	                    match = value.substr(valueIdx, size).match(rg);
	
	                if (match) {
	                    match = match[0];
	                    valueIdx += match.length;
	                    return parseInt(match, 10);
	                }
	                return null;
	            },
	            getIndexByName = function (names, lower) {
	                var i = 0,
	                    length = names.length,
	                    name, nameLength,
	                    subValue;
	
	                for (; i < length; i++) {
	                    name = names[i];
	                    nameLength = name.length;
	                    subValue = value.substr(valueIdx, nameLength);
	
	                    if (lower) {
	                        subValue = subValue.toLowerCase();
	                    }
	
	                    if (subValue == name) {
	                        valueIdx += nameLength;
	                        return i + 1;
	                    }
	                }
	                return null;
	            },
	            checkLiteral = function() {
	                var result = false;
	                if (value.charAt(valueIdx) === format[idx]) {
	                    valueIdx++;
	                    result = true;
	                }
	                return result;
	            },
	            calendar = culture.calendars.standard,
	            year = null,
	            month = null,
	            day = null,
	            hours = null,
	            minutes = null,
	            seconds = null,
	            milliseconds = null,
	            idx = 0,
	            valueIdx = 0,
	            literal = false,
	            date = new Date(),
	            twoDigitYearMax = calendar.twoDigitYearMax || 2029,
	            defaultYear = date.getFullYear(),
	            ch, count, length, pattern,
	            pmHour, UTC, ISO8601, matches,
	            amDesignators, pmDesignators,
	            hoursOffset, minutesOffset,
	            hasTime, match;
	
	        if (!format) {
	            format = "d"; //shord date format
	        }
	
	        //if format is part of the patterns get real format
	        pattern = calendar.patterns[format];
	        if (pattern) {
	            format = pattern;
	        }
	
	        format = format.split("");
	        length = format.length;
	
	        for (; idx < length; idx++) {
	            ch = format[idx];
	
	            if (literal) {
	                if (ch === "'") {
	                    literal = false;
	                } else {
	                    checkLiteral();
	                }
	            } else {
	                if (ch === "d") {
	                    count = lookAhead("d");
	                    if (!calendar._lowerDays) {
	                        calendar._lowerDays = lowerLocalInfo(calendar.days);
	                    }
	
	                    day = count < 3 ? getNumber(2) : getIndexByName(calendar._lowerDays[count == 3 ? "namesAbbr" : "names"], true);
	
	                    if (day === null || outOfRange(day, 1, 31)) {
	                        return null;
	                    }
	                } else if (ch === "M") {
	                    count = lookAhead("M");
	                    if (!calendar._lowerMonths) {
	                        calendar._lowerMonths = lowerLocalInfo(calendar.months);
	                    }
	                    month = count < 3 ? getNumber(2) : getIndexByName(calendar._lowerMonths[count == 3 ? 'namesAbbr' : 'names'], true);
	
	                    if (month === null || outOfRange(month, 1, 12)) {
	                        return null;
	                    }
	                    month -= 1; //because month is zero based
	                } else if (ch === "y") {
	                    count = lookAhead("y");
	                    year = getNumber(count);
	
	                    if (year === null) {
	                        return null;
	                    }
	
	                    if (count == 2) {
	                        if (typeof twoDigitYearMax === "string") {
	                            twoDigitYearMax = defaultYear + parseInt(twoDigitYearMax, 10);
	                        }
	
	                        year = (defaultYear - defaultYear % 100) + year;
	                        if (year > twoDigitYearMax) {
	                            year -= 100;
	                        }
	                    }
	                } else if (ch === "h" ) {
	                    lookAhead("h");
	                    hours = getNumber(2);
	                    if (hours == 12) {
	                        hours = 0;
	                    }
	                    if (hours === null || outOfRange(hours, 0, 11)) {
	                        return null;
	                    }
	                } else if (ch === "H") {
	                    lookAhead("H");
	                    hours = getNumber(2);
	                    if (hours === null || outOfRange(hours, 0, 23)) {
	                        return null;
	                    }
	                } else if (ch === "m") {
	                    lookAhead("m");
	                    minutes = getNumber(2);
	                    if (minutes === null || outOfRange(minutes, 0, 59)) {
	                        return null;
	                    }
	                } else if (ch === "s") {
	                    lookAhead("s");
	                    seconds = getNumber(2);
	                    if (seconds === null || outOfRange(seconds, 0, 59)) {
	                        return null;
	                    }
	                } else if (ch === "f") {
	                    count = lookAhead("f");
	
	                    match = value.substr(valueIdx, count).match(numberRegExp[3]);
	                    milliseconds = getNumber(count);
	
	                    if (milliseconds !== null) {
	                        match = match[0].length;
	
	                        if (match < 3) {
	                            milliseconds *= Math.pow(10, (3 - match));
	                        }
	
	                        if (count > 3) {
	                            milliseconds = parseInt(milliseconds.toString().substring(0, 3), 10);
	                        }
	                    }
	
	                    if (milliseconds === null || outOfRange(milliseconds, 0, 999)) {
	                        return null;
	                    }
	
	                } else if (ch === "t") {
	                    count = lookAhead("t");
	                    amDesignators = calendar.AM;
	                    pmDesignators = calendar.PM;
	
	                    if (count === 1) {
	                        amDesignators = mapDesignators(amDesignators);
	                        pmDesignators = mapDesignators(pmDesignators);
	                    }
	
	                    pmHour = getIndexByName(pmDesignators);
	                    if (!pmHour && !getIndexByName(amDesignators)) {
	                        return null;
	                    }
	                }
	                else if (ch === "z") {
	                    UTC = true;
	                    count = lookAhead("z");
	
	                    if (value.substr(valueIdx, 1) === "Z") {
	                        if (!ISO8601) {
	                            return null;
	                        }
	
	                        checkLiteral();
	                        continue;
	                    }
	
	                    matches = value.substr(valueIdx, 6)
	                                   .match(count > 2 ? longTimeZoneRegExp : shortTimeZoneRegExp);
	
	                    if (!matches) {
	                        return null;
	                    }
	
	                    matches = matches[0];
	                    valueIdx = matches.length;
	                    matches = matches.split(":");
	
	                    hoursOffset = parseInt(matches[0], 10);
	                    if (outOfRange(hoursOffset, -12, 13)) {
	                        return null;
	                    }
	
	                    if (count > 2) {
	                        minutesOffset = parseInt(matches[1], 10);
	                        if (isNaN(minutesOffset) || outOfRange(minutesOffset, 0, 59)) {
	                            return null;
	                        }
	                    }
	                } else if (ch === "T") {
	                    ISO8601 = checkLiteral();
	                } else if (ch === "'") {
	                    literal = true;
	                    checkLiteral();
	                } else if (!checkLiteral()) {
	                    return null;
	                }
	            }
	        }
	
	        hasTime = hours !== null || minutes !== null || seconds || null;
	
	        if (year === null && month === null && day === null && hasTime) {
	            year = defaultYear;
	            month = date.getMonth();
	            day = date.getDate();
	        } else {
	            if (year === null) {
	                year = defaultYear;
	            }
	
	            if (day === null) {
	                day = 1;
	            }
	        }
	
	        if (pmHour && hours < 12) {
	            hours += 12;
	        }
	
	        if (UTC) {
	            if (hoursOffset) {
	                hours += -hoursOffset;
	            }
	
	            if (minutesOffset) {
	                minutes += -minutesOffset;
	            }
	
	            value = new Date(Date.UTC(year, month, day, hours, minutes, seconds, milliseconds));
	        } else {
	            value = new Date(year, month, day, hours, minutes, seconds, milliseconds);
	            adjustDST(value, hours);
	        }
	
	        if (year < 100) {
	            value.setFullYear(year);
	        }
	
	        if (value.getDate() !== day && UTC === undefined) {
	            return null;
	        }
	
	        return value;
	    }
	
	    function parseMicrosoftFormatOffset(offset) {
	        var sign = offset.substr(0, 1) === "-" ? -1 : 1;
	
	        offset = offset.substring(1);
	        offset = (parseInt(offset.substr(0, 2), 10) * 60) + parseInt(offset.substring(2), 10);
	
	        return sign * offset;
	    }
	
	    kendo.parseDate = function(value, formats, culture) {
	        if (objectToString.call(value) === "[object Date]") {
	            return value;
	        }
	
	        var idx = 0;
	        var date = null;
	        var length, patterns;
	        var tzoffset;
	        var sign;
	
	        if (value && value.indexOf("/D") === 0) {
	            date = dateRegExp.exec(value);
	            if (date) {
	                date = date[1];
	                tzoffset = offsetRegExp.exec(date.substring(1));
	
	                date = new Date(parseInt(date, 10));
	
	                if (tzoffset) {
	                    tzoffset = parseMicrosoftFormatOffset(tzoffset[0]);
	                    date = kendo.timezone.apply(date, 0);
	                    date = kendo.timezone.convert(date, 0, -1 * tzoffset);
	                }
	
	                return date;
	            }
	        }
	
	        culture = kendo.getCulture(culture);
	
	        if (!formats) {
	            formats = [];
	            patterns = culture.calendar.patterns;
	            length = formatsSequence.length;
	
	            for (; idx < length; idx++) {
	                formats[idx] = patterns[formatsSequence[idx]];
	            }
	
	            idx = 0;
	
	            formats = [
	                "yyyy/MM/dd HH:mm:ss",
	                "yyyy/MM/dd HH:mm",
	                "yyyy/MM/dd",
	                "ddd MMM dd yyyy HH:mm:ss",
	                "yyyy-MM-ddTHH:mm:ss.fffffffzzz",
	                "yyyy-MM-ddTHH:mm:ss.fffzzz",
	                "yyyy-MM-ddTHH:mm:sszzz",
	                "yyyy-MM-ddTHH:mmzzz",
	                "yyyy-MM-ddTHH:mmzz",
	                "yyyy-MM-ddTHH:mm:ss",
	                "yyyy-MM-ddTHH:mm",
	                "yyyy-MM-dd HH:mm:ss",
	                "yyyy-MM-dd HH:mm",
	                "yyyy-MM-dd",
	                "HH:mm:ss",
	                "HH:mm"
	            ].concat(formats);
	        }
	
	        formats = isArray(formats) ? formats: [formats];
	        length = formats.length;
	
	        for (; idx < length; idx++) {
	            date = parseExact(value, formats[idx], culture);
	            if (date) {
	                return date;
	            }
	        }
	
	        return date;
	    };
	
	    kendo.parseInt = function(value, culture) {
	        var result = kendo.parseFloat(value, culture);
	        if (result) {
	            result = result | 0;
	        }
	        return result;
	    };
	
	    kendo.parseFloat = function(value, culture, format) {
	        if (!value && value !== 0) {
	           return null;
	        }
	
	        if (typeof value === NUMBER) {
	           return value;
	        }
	
	        value = value.toString();
	        culture = kendo.getCulture(culture);
	
	        var number = culture.numberFormat,
	            percent = number.percent,
	            currency = number.currency,
	            symbol = currency.symbol,
	            percentSymbol = percent.symbol,
	            negative = value.indexOf("-"),
	            parts, isPercent;
	
	        //handle exponential number
	        if (exponentRegExp.test(value)) {
	            value = parseFloat(value.replace(number["."], "."));
	            if (isNaN(value)) {
	                value = null;
	            }
	            return value;
	        }
	
	        if (negative > 0) {
	            return null;
	        } else {
	            negative = negative > -1;
	        }
	
	        if (value.indexOf(symbol) > -1 || (format && format.toLowerCase().indexOf("c") > -1)) {
	            number = currency;
	            parts = number.pattern[0].replace("$", symbol).split("n");
	            if (value.indexOf(parts[0]) > -1 && value.indexOf(parts[1]) > -1) {
	                value = value.replace(parts[0], "").replace(parts[1], "");
	                negative = true;
	            }
	        } else if (value.indexOf(percentSymbol) > -1) {
	            isPercent = true;
	            number = percent;
	            symbol = percentSymbol;
	        }
	
	        value = value.replace("-", "")
	                     .replace(symbol, "")
	                     .replace(nonBreakingSpaceRegExp, " ")
	                     .split(number[","].replace(nonBreakingSpaceRegExp, " ")).join("")
	                     .replace(number["."], ".");
	
	        value = parseFloat(value);
	
	        if (isNaN(value)) {
	            value = null;
	        } else if (negative) {
	            value *= -1;
	        }
	
	        if (value && isPercent) {
	            value /= 100;
	        }
	
	        return value;
	    };
	
	    if (globalize) {
	        kendo.parseDate = function (value, format, culture) {
	            if (objectToString.call(value) === "[object Date]") {
	                return value;
	            }
	
	            return globalize.parseDate(value, format, culture);
	        };
	
	        kendo.parseFloat = function (value, culture) {
	            if (typeof value === NUMBER) {
	                return value;
	            }
	
	            if (value === undefined || value === null) {
	               return null;
	            }
	
	            if ($.isPlainObject(culture)) {
	                culture = culture.name;
	            }
	
	            value = globalize.parseFloat(value, culture);
	
	            return isNaN(value) ? null : value;
	        };
	    }
	})();
	
	    function getShadows(element) {
	        var shadow = element.css(kendo.support.transitions.css + "box-shadow") || element.css("box-shadow"),
	            radius = shadow ? shadow.match(boxShadowRegExp) || [ 0, 0, 0, 0, 0 ] : [ 0, 0, 0, 0, 0 ],
	            blur = math.max((+radius[3]), +(radius[4] || 0));
	
	        return {
	            left: (-radius[1]) + blur,
	            right: (+radius[1]) + blur,
	            bottom: (+radius[2]) + blur
	        };
	    }
	
	    function wrap(element, autosize) {
	        var browser = support.browser,
	            percentage,
	            isRtl = element.css("direction") == "rtl";
	
	        if (!element.parent().hasClass("k-animation-container")) {
	            var shadows = getShadows(element),
	                width = element[0].style.width,
	                height = element[0].style.height,
	                percentWidth = percentRegExp.test(width),
	                percentHeight = percentRegExp.test(height);
	
	            if (browser.opera) { // Box shadow can't be retrieved in Opera
	                shadows.left = shadows.right = shadows.bottom = 5;
	            }
	
	            percentage = percentWidth || percentHeight;
	
	            if (!percentWidth && (!autosize || (autosize && width))) { width = element.outerWidth(); }
	            if (!percentHeight && (!autosize || (autosize && height))) { height = element.outerHeight(); }
	
	            element.wrap(
	                         $("<div/>")
	                         .addClass("k-animation-container")
	                         .css({
	                             width: width,
	                             height: height,
	                             marginLeft: shadows.left * (isRtl ? 1 : -1),
	                             paddingLeft: shadows.left,
	                             paddingRight: shadows.right,
	                             paddingBottom: shadows.bottom
	                         }));
	
	            if (percentage) {
	                element.css({
	                    width: "100%",
	                    height: "100%",
	                    boxSizing: "border-box",
	                    mozBoxSizing: "border-box",
	                    webkitBoxSizing: "border-box"
	                });
	            }
	        } else {
	            var wrapper = element.parent(".k-animation-container"),
	                wrapperStyle = wrapper[0].style;
	
	            if (wrapper.is(":hidden")) {
	                wrapper.show();
	            }
	
	            percentage = percentRegExp.test(wrapperStyle.width) || percentRegExp.test(wrapperStyle.height);
	
	            if (!percentage) {
	                wrapper.css({
	                    width: element.outerWidth(),
	                    height: element.outerHeight(),
	                    boxSizing: "content-box",
	                    mozBoxSizing: "content-box",
	                    webkitBoxSizing: "content-box"
	                });
	            }
	        }
	
	        if (browser.msie && math.floor(browser.version) <= 7) {
	            element.css({ zoom: 1 });
	            element.children(".k-menu").width(element.width());
	        }
	
	        return element.parent();
	    }
	
	    function deepExtend(destination) {
	        var i = 1,
	            length = arguments.length;
	
	        for (i = 1; i < length; i++) {
	            deepExtendOne(destination, arguments[i]);
	        }
	
	        return destination;
	    }
	
	    function deepExtendOne(destination, source) {
	        var ObservableArray = kendo.data.ObservableArray,
	            DataSource = kendo.data.DataSource,
	            HierarchicalDataSource = kendo.data.HierarchicalDataSource,
	            property,
	            propValue,
	            propType,
	            destProp;
	
	        for (property in source) {
	            propValue = source[property];
	            propType = typeof propValue;
	            if (propType === OBJECT && propValue !== null &&
	                propValue.constructor !== Array && propValue.constructor !== ObservableArray &&
	                propValue.constructor !== DataSource && propValue.constructor !== HierarchicalDataSource) {
	                if (propValue instanceof Date) {
	                    destination[property] = new Date(propValue.getTime());
	                } else if (isFunction(propValue.clone)) {
	                    destination[property] = propValue.clone();
	                } else {
	                    destProp = destination[property];
	                    if (typeof (destProp) === OBJECT) {
	                        destination[property] = destProp || {};
	                    } else {
	                        destination[property] = {};
	                    }
	                    deepExtendOne(destination[property], propValue);
	                }
	            } else if (propType !== UNDEFINED) {
	                destination[property] = propValue;
	            }
	        }
	
	        return destination;
	    }
	
	    function testRx(agent, rxs, dflt) {
	        for (var rx in rxs) {
	            if (rxs.hasOwnProperty(rx) && rxs[rx].test(agent)) {
	                return rx;
	            }
	        }
	        return dflt !== undefined ? dflt : agent;
	    }
	
	    function toHyphens(str) {
	        return str.replace(/([a-z][A-Z])/g, function (g) {
	            return g.charAt(0) + '-' + g.charAt(1).toLowerCase();
	        });
	    }
	
	    function toCamelCase(str) {
	        return str.replace(/\-(\w)/g, function (strMatch, g1) {
	            return g1.toUpperCase();
	        });
	    }
	
	    function getComputedStyles(element, properties) {
	        var styles = {}, computedStyle;
	
	        if (document.defaultView && document.defaultView.getComputedStyle) {
	            computedStyle = document.defaultView.getComputedStyle(element, "");
	
	            if (properties) {
	                $.each(properties, function(idx, value) {
	                    styles[value] = computedStyle.getPropertyValue(value);
	                });
	            }
	        } else {
	            computedStyle = element.currentStyle;
	
	            if (properties) {
	                $.each(properties, function(idx, value) {
	                    styles[value] = computedStyle[toCamelCase(value)];
	                });
	            }
	        }
	
	        if (!kendo.size(styles)) {
	            styles = computedStyle;
	        }
	
	        return styles;
	    }
	
	    (function() {
	        support.scrollbar = function() {
	            var div = document.createElement("div"),
	                result;
	
	            div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both";
	            div.innerHTML = "&nbsp;";
	            document.body.appendChild(div);
	
	            result = div.offsetWidth - div.scrollWidth;
	
	            document.body.removeChild(div);
	            return result;
	        };
	
	        support.isRtl = function(element) {
	            return $(element).closest(".k-rtl").length > 0;
	        };
	
	        var table = document.createElement("table");
	
	        // Internet Explorer does not support setting the innerHTML of TBODY and TABLE elements
	        try {
	            table.innerHTML = "<tr><td></td></tr>";
	
	            support.tbodyInnerHtml = true;
	        } catch (e) {
	            support.tbodyInnerHtml = false;
	        }
	
	        support.touch = "ontouchstart" in window;
	        support.msPointers = window.MSPointerEvent;
	        support.pointers = window.PointerEvent;
	
	        var transitions = support.transitions = false,
	            transforms = support.transforms = false,
	            elementProto = "HTMLElement" in window ? HTMLElement.prototype : [];
	
	        support.hasHW3D = ("WebKitCSSMatrix" in window && "m11" in new window.WebKitCSSMatrix()) || "MozPerspective" in document.documentElement.style || "msPerspective" in document.documentElement.style;
	
	        each([ "Moz", "webkit", "O", "ms" ], function () {
	            var prefix = this.toString(),
	                hasTransitions = typeof table.style[prefix + "Transition"] === STRING;
	
	            if (hasTransitions || typeof table.style[prefix + "Transform"] === STRING) {
	                var lowPrefix = prefix.toLowerCase();
	
	                transforms = {
	                    css: (lowPrefix != "ms") ? "-" + lowPrefix + "-" : "",
	                    prefix: prefix,
	                    event: (lowPrefix === "o" || lowPrefix === "webkit") ? lowPrefix : ""
	                };
	
	                if (hasTransitions) {
	                    transitions = transforms;
	                    transitions.event = transitions.event ? transitions.event + "TransitionEnd" : "transitionend";
	                }
	
	                return false;
	            }
	        });
	
	        table = null;
	
	        support.transforms = transforms;
	        support.transitions = transitions;
	
	        support.devicePixelRatio = window.devicePixelRatio === undefined ? 1 : window.devicePixelRatio;
	
	        try {
	            support.screenWidth = window.outerWidth || window.screen ? window.screen.availWidth : window.innerWidth;
	            support.screenHeight = window.outerHeight || window.screen ? window.screen.availHeight : window.innerHeight;
	        } catch(e) {
	            //window.outerWidth throws error when in IE showModalDialog.
	            support.screenWidth = window.screen.availWidth;
	            support.screenHeight = window.screen.availHeight;
	        }
	
	        support.detectOS = function (ua) {
	            var os = false, minorVersion, match = [],
	                notAndroidPhone = !/mobile safari/i.test(ua),
	                agentRxs = {
	                    fire: /(Silk)\/(\d+)\.(\d+(\.\d+)?)/,
	                    android: /(Android|Android.*(?:Opera|Firefox).*?\/)\s*(\d+)\.(\d+(\.\d+)?)/,
	                    iphone: /(iPhone|iPod).*OS\s+(\d+)[\._]([\d\._]+)/,
	                    ipad: /(iPad).*OS\s+(\d+)[\._]([\d_]+)/,
	                    meego: /(MeeGo).+NokiaBrowser\/(\d+)\.([\d\._]+)/,
	                    webos: /(webOS)\/(\d+)\.(\d+(\.\d+)?)/,
	                    blackberry: /(BlackBerry|BB10).*?Version\/(\d+)\.(\d+(\.\d+)?)/,
	                    playbook: /(PlayBook).*?Tablet\s*OS\s*(\d+)\.(\d+(\.\d+)?)/,
	                    wp: /(Windows Phone(?: OS)?)\s(\d+)\.(\d+(\.\d+)?)/,
	                    windows: /(MSIE)\s+(\d+)\.(\d+(\.\d+)?)/,
	                    tizen: /(tizen).*?Version\/(\d+)\.(\d+(\.\d+)?)/i,
	                    sailfish: /(sailfish).*rv:(\d+)\.(\d+(\.\d+)?).*firefox/i,
	                    ffos: /(Mobile).*rv:(\d+)\.(\d+(\.\d+)?).*Firefox/
	                },
	                osRxs = {
	                    ios: /^i(phone|pad|pod)$/i,
	                    android: /^android|fire$/i,
	                    blackberry: /^blackberry|playbook/i,
	                    windows: /windows/,
	                    wp: /wp/,
	                    flat: /sailfish|ffos|tizen/i,
	                    meego: /meego/
	                },
	                formFactorRxs = {
	                    tablet: /playbook|ipad|fire/i
	                },
	                browserRxs = {
	                    omini: /Opera\sMini/i,
	                    omobile: /Opera\sMobi/i,
	                    firefox: /Firefox|Fennec/i,
	                    mobilesafari: /version\/.*safari/i,
	                    chrome: /chrome|crios/i,
	                    webkit: /webkit/i,
	                    ie: /MSIE|Windows\sPhone/i
	                };
	
	            for (var agent in agentRxs) {
	                if (agentRxs.hasOwnProperty(agent)) {
	                    match = ua.match(agentRxs[agent]);
	                    if (match) {
	                        if (agent == "windows" && "plugins" in navigator) { return false; } // Break if not Metro/Mobile Windows
	
	                        os = {};
	                        os.device = agent;
	                        os.tablet = testRx(agent, formFactorRxs, false);
	                        os.browser = testRx(ua, browserRxs, "default");
	                        os.name = testRx(agent, osRxs);
	                        os[os.name] = true;
	                        os.majorVersion = match[2];
	                        os.minorVersion = match[3].replace("_", ".");
	                        minorVersion = os.minorVersion.replace(".", "").substr(0, 2);
	                        os.flatVersion = os.majorVersion + minorVersion + (new Array(3 - (minorVersion.length < 3 ? minorVersion.length : 2)).join("0"));
	                        os.cordova = typeof window.PhoneGap !== UNDEFINED || typeof window.cordova !== UNDEFINED; // Use file protocol to detect appModes.
	                        os.appMode = window.navigator.standalone || (/file|local|wmapp/).test(window.location.protocol) || os.cordova; // Use file protocol to detect appModes.
	
	                        if (os.android && (support.devicePixelRatio < 1.5 && os.flatVersion < 400 || notAndroidPhone) && (support.screenWidth > 800 || support.screenHeight > 800)) {
	                            os.tablet = agent;
	                        }
	
	                        break;
	                    }
	                }
	            }
	            return os;
	        };
	
	        var mobileOS = support.mobileOS = support.detectOS(navigator.userAgent);
	
	        support.wpDevicePixelRatio = mobileOS.wp ? screen.width / 320 : 0;
	        support.kineticScrollNeeded = mobileOS && (support.touch || support.msPointers || support.pointers);
	
	        support.hasNativeScrolling = false;
	
	        if (mobileOS.ios || (mobileOS.android && mobileOS.majorVersion > 2) || mobileOS.wp) {
	            support.hasNativeScrolling = mobileOS;
	        }
	
	        support.mouseAndTouchPresent = support.touch && !(support.mobileOS.ios || support.mobileOS.android);
	
	        support.detectBrowser = function(ua) {
	            var browser = false, match = [],
	                browserRxs = {
	                    webkit: /(chrome)[ \/]([\w.]+)/i,
	                    safari: /(webkit)[ \/]([\w.]+)/i,
	                    opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i,
	                    msie: /(msie\s|trident.*? rv:)([\w.]+)/i,
	                    mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
	                };
	
	            for (var agent in browserRxs) {
	                if (browserRxs.hasOwnProperty(agent)) {
	                    match = ua.match(browserRxs[agent]);
	                    if (match) {
	                        browser = {};
	                        browser[agent] = true;
	                        browser[match[1].toLowerCase()] = true;
	                        browser.version = parseInt(document.documentMode || match[2], 10);
	
	                        break;
	                    }
	                }
	            }
	
	            return browser;
	        };
	
	        support.browser = support.detectBrowser(navigator.userAgent);
	
	        support.zoomLevel = function() {
	            try {
	                return support.touch ? (document.documentElement.clientWidth / window.innerWidth) :
	                       support.browser.msie && support.browser.version >= 10 ? ((top || window).document.documentElement.offsetWidth / (top || window).innerWidth) : 1;
	            } catch(e) {
	                return 1;
	            }
	        };
	
	        support.cssBorderSpacing = typeof document.documentElement.style.borderSpacing != "undefined" && !(support.browser.msie && support.browser.version < 8);
	
	        (function(browser) {
	            // add browser-specific CSS class
	            var cssClass = "",
	                docElement = $(document.documentElement),
	                majorVersion = parseInt(browser.version, 10);
	
	            if (browser.msie) {
	                cssClass = "ie";
	            } else if (browser.mozilla) {
	                cssClass = "ff";
	            } else if (browser.safari) {
	                cssClass = "safari";
	            } else if (browser.webkit) {
	                cssClass = "webkit";
	            } else if (browser.opera) {
	                cssClass = "opera";
	            }
	
	            if (cssClass) {
	                cssClass = "k-" + cssClass + " k-" + cssClass + majorVersion;
	            }
	            if (support.mobileOS) {
	                cssClass += " k-mobile";
	            }
	
	            docElement.addClass(cssClass);
	        })(support.browser);
	
	        support.eventCapture = document.documentElement.addEventListener;
	
	        var input = document.createElement("input");
	
	        support.placeholder = "placeholder" in input;
	        support.propertyChangeEvent = "onpropertychange" in input;
	
	        support.input = (function() {
	            var types = ["number", "date", "time", "month", "week", "datetime", "datetime-local"];
	            var length = types.length;
	            var value = "test";
	            var result = {};
	            var idx = 0;
	            var type;
	
	            for (;idx < length; idx++) {
	                type = types[idx];
	                input.setAttribute("type", type);
	                input.value = value;
	
	                result[type.replace("-", "")] = input.type !== "text" && input.value !== value;
	            }
	
	            return result;
	        })();
	
	        input.style.cssText = "float:left;";
	
	        support.cssFloat = !!input.style.cssFloat;
	
	        input = null;
	
	        support.stableSort = (function() {
	            // Chrome sort is not stable for more than *10* items
	            // IE9+ sort is not stable for than *512* items
	            var threshold = 513;
	
	            var sorted = [{
	                index: 0,
	                field: "b"
	            }];
	
	            for (var i = 1; i < threshold; i++) {
	                sorted.push({
	                    index: i,
	                    field: "a"
	                });
	            }
	
	            sorted.sort(function(a, b) {
	                return a.field > b.field ? 1 : (a.field < b.field ? -1 : 0);
	            });
	
	            return sorted[0].index === 1;
	        })();
	
	        support.matchesSelector = elementProto.webkitMatchesSelector || elementProto.mozMatchesSelector ||
	                                  elementProto.msMatchesSelector || elementProto.oMatchesSelector || elementProto.matchesSelector ||
	          function( selector ) {
	              var nodeList = document.querySelectorAll ? ( this.parentNode || document ).querySelectorAll( selector ) || [] : $(selector),
	                  i = nodeList.length;
	
	              while (i--) {
	                  if (nodeList[i] == this) {
	                      return true;
	                  }
	              }
	
	              return false;
	          };
	
	        support.pushState = window.history && window.history.pushState;
	
	        var documentMode = document.documentMode;
	
	        support.hashChange = ("onhashchange" in window) && !(support.browser.msie && (!documentMode || documentMode <= 8)); // old IE detection
	    })();
	
	
	    function size(obj) {
	        var result = 0, key;
	        for (key in obj) {
	            if (obj.hasOwnProperty(key) && key != "toJSON") { // Ignore fake IE7 toJSON.
	                result++;
	            }
	        }
	
	        return result;
	    }
	
	    function getOffset(element, type, positioned) {
	        if (!type) {
	            type = "offset";
	        }
	
	        var result = element[type](),
	            mobileOS = support.mobileOS;
	
	        // IE10 touch zoom is living in a separate viewport
	        if (support.browser.msie && (support.pointers || support.msPointers) && !positioned) {
	            result.top -= (window.pageYOffset - document.documentElement.scrollTop);
	            result.left -= (window.pageXOffset - document.documentElement.scrollLeft);
	        }
	
	        return result;
	    }
	
	    var directions = {
	        left: { reverse: "right" },
	        right: { reverse: "left" },
	        down: { reverse: "up" },
	        up: { reverse: "down" },
	        top: { reverse: "bottom" },
	        bottom: { reverse: "top" },
	        "in": { reverse: "out" },
	        out: { reverse: "in" }
	    };
	
	    function parseEffects(input) {
	        var effects = {};
	
	        each((typeof input === "string" ? input.split(" ") : input), function(idx) {
	            effects[idx] = this;
	        });
	
	        return effects;
	    }
	
	    function fx(element) {
	        return new kendo.effects.Element(element);
	    }
	
	    var effects = {};
	
	    $.extend(effects, {
	        enabled: true,
	        Element: function(element) {
	            this.element = $(element);
	        },
	
	        promise: function(element, options) {
	            if (!element.is(":visible")) {
	                element.css({ display: element.data("olddisplay") || "block" }).css("display");
	            }
	
	            if (options.hide) {
	                element.data("olddisplay", element.css("display")).hide();
	            }
	
	            if (options.init) {
	                options.init();
	            }
	
	            if (options.completeCallback) {
	                options.completeCallback(element); // call the external complete callback with the element
	            }
	
	            element.dequeue();
	        },
	
	        disable: function() {
	            this.enabled = false;
	            this.promise = this.promiseShim;
	        },
	
	        enable: function() {
	            this.enabled = true;
	            this.promise = this.animatedPromise;
	        }
	    });
	
	    effects.promiseShim = effects.promise;
	
	    function prepareAnimationOptions(options, duration, reverse, complete) {
	        if (typeof options === STRING) {
	            // options is the list of effect names separated by space e.g. animate(element, "fadeIn slideDown")
	
	            // only callback is provided e.g. animate(element, options, function() {});
	            if (isFunction(duration)) {
	                complete = duration;
	                duration = 400;
	                reverse = false;
	            }
	
	            if (isFunction(reverse)) {
	                complete = reverse;
	                reverse = false;
	            }
	
	            if (typeof duration === BOOLEAN){
	                reverse = duration;
	                duration = 400;
	            }
	
	            options = {
	                effects: options,
	                duration: duration,
	                reverse: reverse,
	                complete: complete
	            };
	        }
	
	        return extend({
	            //default options
	            effects: {},
	            duration: 400, //jQuery default duration
	            reverse: false,
	            init: noop,
	            teardown: noop,
	            hide: false
	        }, options, { completeCallback: options.complete, complete: noop }); // Move external complete callback, so deferred.resolve can be always executed.
	
	    }
	
	    function animate(element, options, duration, reverse, complete) {
	        var idx = 0,
	            length = element.length,
	            instance;
	
	        for (; idx < length; idx ++) {
	            instance = $(element[idx]);
	            instance.queue(function() {
	                effects.promise(instance, prepareAnimationOptions(options, duration, reverse, complete));
	            });
	        }
	
	        return element;
	    }
	
	    function toggleClass(element, classes, options, add) {
	        if (classes) {
	            classes = classes.split(" ");
	
	            each(classes, function(idx, value) {
	                element.toggleClass(value, add);
	            });
	        }
	
	        return element;
	    }
	
	    if (!("kendoAnimate" in $.fn)) {
	        extend($.fn, {
	            kendoStop: function(clearQueue, gotoEnd) {
	                return this.stop(clearQueue, gotoEnd);
	            },
	
	            kendoAnimate: function(options, duration, reverse, complete) {
	                return animate(this, options, duration, reverse, complete);
	            },
	
	            kendoAddClass: function(classes, options){
	                return kendo.toggleClass(this, classes, options, true);
	            },
	
	            kendoRemoveClass: function(classes, options){
	                return kendo.toggleClass(this, classes, options, false);
	            },
	            kendoToggleClass: function(classes, options, toggle){
	                return kendo.toggleClass(this, classes, options, toggle);
	            }
	        });
	    }
	
	    var ampRegExp = /&/g,
	        ltRegExp = /</g,
	        quoteRegExp = /"/g,
	        aposRegExp = /'/g,
	        gtRegExp = />/g;
	    function htmlEncode(value) {
	        return ("" + value).replace(ampRegExp, "&amp;").replace(ltRegExp, "&lt;").replace(gtRegExp, "&gt;").replace(quoteRegExp, "&quot;").replace(aposRegExp, "&#39;");
	    }
	
	    var eventTarget = function (e) {
	        return e.target;
	    };
	
	    if (support.touch) {
	
	        eventTarget = function(e) {
	            var touches = "originalEvent" in e ? e.originalEvent.changedTouches : "changedTouches" in e ? e.changedTouches : null;
	
	            return touches ? document.elementFromPoint(touches[0].clientX, touches[0].clientY) : e.target;
	        };
	
	        each(["swipe", "swipeLeft", "swipeRight", "swipeUp", "swipeDown", "doubleTap", "tap"], function(m, value) {
	            $.fn[value] = function(callback) {
	                return this.bind(value, callback);
	            };
	        });
	    }
	
	    if (support.touch) {
	        if (!support.mobileOS) {
	            support.mousedown = "mousedown touchstart";
	            support.mouseup = "mouseup touchend";
	            support.mousemove = "mousemove touchmove";
	            support.mousecancel = "mouseleave touchcancel";
	            support.click = "click";
	            support.resize = "resize";
	        } else {
	            support.mousedown = "touchstart";
	            support.mouseup = "touchend";
	            support.mousemove = "touchmove";
	            support.mousecancel = "touchcancel";
	            support.click = "touchend";
	            support.resize = "orientationchange";
	        }
	    } else if (support.pointers) {
	        support.mousemove = "pointermove";
	        support.mousedown = "pointerdown";
	        support.mouseup = "pointerup";
	        support.mousecancel = "pointercancel";
	        support.click = "pointerup";
	        support.resize = "orientationchange resize";
	    } else if (support.msPointers) {
	        support.mousemove = "MSPointerMove";
	        support.mousedown = "MSPointerDown";
	        support.mouseup = "MSPointerUp";
	        support.mousecancel = "MSPointerCancel";
	        support.click = "MSPointerUp";
	        support.resize = "orientationchange resize";
	    } else {
	        support.mousemove = "mousemove";
	        support.mousedown = "mousedown";
	        support.mouseup = "mouseup";
	        support.mousecancel = "mouseleave";
	        support.click = "click";
	        support.resize = "resize";
	    }
	
	    var wrapExpression = function(members, paramName) {
	        var result = paramName || "d",
	            index,
	            idx,
	            length,
	            member,
	            count = 1;
	
	        for (idx = 0, length = members.length; idx < length; idx++) {
	            member = members[idx];
	            if (member !== "") {
	                index = member.indexOf("[");
	
	                if (index !== 0) {
	                    if (index == -1) {
	                        member = "." + member;
	                    } else {
	                        count++;
	                        member = "." + member.substring(0, index) + " || {})" + member.substring(index);
	                    }
	                }
	
	                count++;
	                result += member + ((idx < length - 1) ? " || {})" : ")");
	            }
	        }
	        return new Array(count).join("(") + result;
	    },
	    localUrlRe = /^([a-z]+:)?\/\//i;
	
	    extend(kendo, {
	        ui: kendo.ui || {},
	        fx: kendo.fx || fx,
	        effects: kendo.effects || effects,
	        mobile: kendo.mobile || { },
	        data: kendo.data || {},
	        dataviz: kendo.dataviz || {ui: { roles: {}}},
	        keys: {
	            INSERT: 45,
	            DELETE: 46,
	            BACKSPACE: 8,
	            TAB: 9,
	            ENTER: 13,
	            ESC: 27,
	            LEFT: 37,
	            UP: 38,
	            RIGHT: 39,
	            DOWN: 40,
	            END: 35,
	            HOME: 36,
	            SPACEBAR: 32,
	            PAGEUP: 33,
	            PAGEDOWN: 34,
	            F2: 113,
	            F10: 121,
	            F12: 123,
	            NUMPAD_PLUS: 107,
	            NUMPAD_MINUS: 109,
	            NUMPAD_DOT: 110
	        },
	        support: kendo.support || support,
	        animate: kendo.animate || animate,
	        ns: "",
	        attr: function(value) {
	            return "data-" + kendo.ns + value;
	        },
	        getShadows: getShadows,
	        wrap: wrap,
	        deepExtend: deepExtend,
	        getComputedStyles: getComputedStyles,
	        size: size,
	        toCamelCase: toCamelCase,
	        toHyphens: toHyphens,
	        getOffset: kendo.getOffset || getOffset,
	        parseEffects: kendo.parseEffects || parseEffects,
	        toggleClass: kendo.toggleClass || toggleClass,
	        directions: kendo.directions || directions,
	        Observable: Observable,
	        Class: Class,
	        Template: Template,
	        template: proxy(Template.compile, Template),
	        render: proxy(Template.render, Template),
	        stringify: proxy(JSON.stringify, JSON),
	        eventTarget: eventTarget,
	        htmlEncode: htmlEncode,
	        isLocalUrl: function(url) {
	            return url && !localUrlRe.test(url);
	        },
	
	        expr: function(expression, safe, paramName) {
	            expression = expression || "";
	
	            if (typeof safe == STRING) {
	                paramName = safe;
	                safe = false;
	            }
	
	            paramName = paramName || "d";
	
	            if (expression && expression.charAt(0) !== "[") {
	                expression = "." + expression;
	            }
	
	            if (safe) {
	                expression = wrapExpression(expression.split("."), paramName);
	            } else {
	                expression = paramName + expression;
	            }
	
	            return expression;
	        },
	
	        getter: function(expression, safe) {
	            return getterCache[expression] = getterCache[expression] || new Function("d", "return " + kendo.expr(expression, safe));
	        },
	
	        setter: function(expression) {
	            return setterCache[expression] = setterCache[expression] || new Function("d,value", kendo.expr(expression) + "=value");
	        },
	
	        accessor: function(expression) {
	            return {
	                get: kendo.getter(expression),
	                set: kendo.setter(expression)
	            };
	        },
	
	        guid: function() {
	            var id = "", i, random;
	
	            for (i = 0; i < 32; i++) {
	                random = math.random() * 16 | 0;
	
	                if (i == 8 || i == 12 || i == 16 || i == 20) {
	                    id += "-";
	                }
	                id += (i == 12 ? 4 : (i == 16 ? (random & 3 | 8) : random)).toString(16);
	            }
	
	            return id;
	        },
	
	        roleSelector: function(role) {
	            return role.replace(/(\S+)/g, "[" + kendo.attr("role") + "=$1],").slice(0, -1);
	        },
	
	        triggeredByInput: function(e) {
	            return (/^(label|input|textarea|select)$/i).test(e.target.tagName);
	        },
	
	        logToConsole: function(message) {
	            var console = window.console;
	
	            if (typeof(console) != "undefined" && console.log) {
	                console.log(message);
	            }
	        }
	    });
	
	    var Widget = Observable.extend( {
	        init: function(element, options) {
	            var that = this;
	
	            that.element = kendo.jQuery(element).handler(that);
	
	            Observable.fn.init.call(that);
	
	            options = that.options = extend(true, {}, that.options, options);
	
	            if (!that.element.attr(kendo.attr("role"))) {
	                that.element.attr(kendo.attr("role"), (options.name || "").toLowerCase());
	            }
	
	            that.element.data("kendo" + options.prefix + options.name, that);
	
	            that.bind(that.events, options);
	        },
	
	        events: [],
	
	        options: {
	            prefix: ""
	        },
	
	        _hasBindingTarget: function() {
	            return !!this.element[0].kendoBindingTarget;
	        },
	
	        _tabindex: function(target) {
	            target = target || this.wrapper;
	
	            var element = this.element,
	                TABINDEX = "tabindex",
	                tabindex = target.attr(TABINDEX) || element.attr(TABINDEX);
	
	            element.removeAttr(TABINDEX);
	
	            target.attr(TABINDEX, !isNaN(tabindex) ? tabindex : 0);
	        },
	
	        setOptions: function(options) {
	            this._setEvents(options);
	            $.extend(this.options, options);
	        },
	
	        _setEvents: function(options) {
	            var that = this,
	                idx = 0,
	                length = that.events.length,
	                e;
	
	            for (; idx < length; idx ++) {
	                e = that.events[idx];
	                if (that.options[e] && options[e]) {
	                    that.unbind(e, that.options[e]);
	                }
	            }
	
	            that.bind(that.events, options);
	        },
	
	        resize: function(force) {
	            var size = this.getSize(),
	                currentSize = this._size;
	
	            if (force || !currentSize || size.width !== currentSize.width || size.height !== currentSize.height) {
	                this._resize(size);
	                this.trigger("resize", size);
	                this._size = size;
	            }
	        },
	
	        getSize: function() {
	            return kendo.dimensions(this.element);
	        },
	
	        size: function(size) {
	            if (!size) {
	                return this.getSize();
	            } else {
	                this.setSize(size);
	            }
	        },
	
	        setSize: $.noop,
	        _resize: $.noop,
	
	        destroy: function() {
	            var that = this;
	
	            that.element.removeData("kendo" + that.options.prefix + that.options.name);
	            that.element.removeData("handler");
	            that.unbind();
	        }
	    });
	
	    kendo.dimensions = function(element, dimensions) {
	        var domElement = element[0];
	
	        if (dimensions) {
	            element.css(dimensions);
	        }
	
	        return { width: domElement.offsetWidth, height: domElement.offsetHeight };
	    };
	
	    kendo.notify = noop;
	
	    var templateRegExp = /template$/i,
	        jsonRegExp = /^\s*(?:\{(?:.|\r\n|\n)*\}|\[(?:.|\r\n|\n)*\])\s*$/,
	        jsonFormatRegExp = /^\{(\d+)(:[^\}]+)?\}|^\[[A-Za-z_]*\]$/,
	        dashRegExp = /([A-Z])/g;
	
	    function parseOption(element, option) {
	        var value;
	
	        if (option.indexOf("data") === 0) {
	            option = option.substring(4);
	            option = option.charAt(0).toLowerCase() + option.substring(1);
	        }
	
	        option = option.replace(dashRegExp, "-$1");
	        value = element.getAttribute("data-" + kendo.ns + option);
	
	        if (value === null) {
	            value = undefined;
	        } else if (value === "null") {
	            value = null;
	        } else if (value === "true") {
	            value = true;
	        } else if (value === "false") {
	            value = false;
	        } else if (numberRegExp.test(value)) {
	            value = parseFloat(value);
	        } else if (jsonRegExp.test(value) && !jsonFormatRegExp.test(value)) {
	            value = new Function("return (" + value + ")")();
	        }
	
	        return value;
	    }
	
	    function parseOptions(element, options) {
	        var result = {},
	            option,
	            value;
	
	        for (option in options) {
	            value = parseOption(element, option);
	
	            if (value !== undefined) {
	
	                if (templateRegExp.test(option)) {
	                    value = kendo.template($("#" + value).html());
	                }
	
	                result[option] = value;
	            }
	        }
	
	        return result;
	    }
	
	    kendo.initWidget = function(element, options, roles) {
	        var result,
	            option,
	            widget,
	            idx,
	            length,
	            role,
	            value,
	            dataSource;
	
	        // Preserve backwards compatibility with (element, options, namespace) signature, where namespace was kendo.ui
	        if (!roles) {
	            roles = kendo.ui.roles;
	        } else if (roles.roles) {
	            roles = roles.roles;
	        }
	
	        element = element.nodeType ? element : element[0];
	
	        role = element.getAttribute("data-" + kendo.ns + "role");
	
	        if (!role) {
	            return;
	        }
	
	        if (role.indexOf(".") === -1) {
	            widget = roles[role];
	        } else { // full namespace path - like kendo.ui.Widget
	            widget = kendo.getter(role)(window);
	        }
	
	        if (!widget) {
	            return;
	        }
	
	        dataSource = parseOption(element, "dataSource");
	
	        options = $.extend({}, parseOptions(element, widget.fn.options), options);
	
	        if (dataSource) {
	            if (typeof dataSource === STRING) {
	                options.dataSource = kendo.getter(dataSource)(window);
	            } else {
	                options.dataSource = dataSource;
	            }
	        }
	
	        for (idx = 0, length = widget.fn.events.length; idx < length; idx++) {
	            option = widget.fn.events[idx];
	
	            value = parseOption(element, option);
	
	            if (value !== undefined) {
	                options[option] = kendo.getter(value)(window);
	            }
	        }
	
	        result = $(element).data("kendo" + widget.fn.options.prefix + widget.fn.options.name);
	
	        if (!result) {
	            result = new widget(element, options);
	        } else {
	            result.setOptions(options);
	        }
	
	        return result;
	    };
	
	    kendo.rolesFromNamespaces = function(namespaces) {
	        var roles = [],
	            idx,
	            length;
	
	        if (!namespaces[0]) {
	            namespaces = [kendo.ui, kendo.dataviz.ui];
	        }
	
	        for (idx = 0, length = namespaces.length; idx < length; idx ++) {
	            roles[idx] = namespaces[idx].roles;
	        }
	
	        return extend.apply(null, [{}].concat(roles.reverse()));
	    };
	
	    kendo.init = function(element) {
	        var roles = kendo.rolesFromNamespaces(slice.call(arguments, 1));
	
	        $(element).find("[data-" + kendo.ns + "role]").addBack().each(function(){
	            kendo.initWidget(this, {}, roles);
	        });
	    };
	
	    kendo.destroy = function(element) {
	        $(element).find("[data-" + kendo.ns + "role]").addBack().each(function(){
	            var widget = kendo.widgetInstance($(this));
	
	            if (widget) {
	                widget.destroy();
	            }
	        });
	    };
	
	    function containmentComparer(a, b) {
	        return $.contains(a, b) ? -1 : 1;
	    }
	
	    function resizableWidget() {
	        var widget = $(this);
	        return ($.inArray(widget.attr("data-role"), ["slider", "rangeslider"]) > 0) || widget.is(":visible");
	    }
	
	    kendo.resize = function(element) {
	        var widgets = $(element).find("[data-" + kendo.ns + "role]").addBack().filter(resizableWidget);
	
	        if (!widgets.length) {
	            return;
	        }
	
	        // sort widgets based on their parent-child relation
	        var widgetsArray = $.makeArray(widgets);
	        widgetsArray.sort(containmentComparer);
	
	        // resize widgets
	        $.each(widgetsArray, function () {
	            var widget = kendo.widgetInstance($(this));
	            if (widget) {
	                widget.resize();
	            }
	        });
	    };
	
	    kendo.parseOptions = parseOptions;
	
	    extend(kendo.ui, {
	        Widget: Widget,
	        roles: {},
	        progress: function(container, toggle) {
	            var mask = container.find(".k-loading-mask"),
	                support = kendo.support,
	                browser = support.browser,
	                isRtl, leftRight, webkitCorrection, containerScrollLeft;
	
	            if (toggle) {
	                if (!mask.length) {
	                    isRtl = support.isRtl(container);
	                    leftRight = isRtl ? "right" : "left";
	                    containerScrollLeft = container.scrollLeft();
	                    webkitCorrection = browser.webkit ? (!isRtl ? 0 : container[0].scrollWidth - container.width() - 2 * containerScrollLeft) : 0;
	
	                    mask = $("<div class='k-loading-mask'><span class='k-loading-text'>Loading...</span><div class='k-loading-image'/><div class='k-loading-color'/></div>")
	                        .width("100%").height("100%")
	                        .css("top", container.scrollTop())
	                        .css(leftRight, Math.abs(containerScrollLeft) + webkitCorrection)
	                        .prependTo(container);
	                }
	            } else if (mask) {
	                mask.remove();
	            }
	        },
	        plugin: function(widget, register, prefix) {
	            var name = widget.fn.options.name,
	                getter;
	
	            register = register || kendo.ui;
	            prefix = prefix || "";
	
	            register[name] = widget;
	
	            register.roles[name.toLowerCase()] = widget;
	
	            getter = "getKendo" + prefix + name;
	            name = "kendo" + prefix + name;
	
	            $.fn[name] = function(options) {
	                var value = this,
	                    args;
	
	                if (typeof options === STRING) {
	                    args = slice.call(arguments, 1);
	
	                    this.each(function(){
	                        var widget = $.data(this, name),
	                            method,
	                            result;
	
	                        if (!widget) {
	                            throw new Error(kendo.format("Cannot call method '{0}' of {1} before it is initialized", options, name));
	                        }
	
	                        method = widget[options];
	
	                        if (typeof method !== FUNCTION) {
	                            throw new Error(kendo.format("Cannot find method '{0}' of {1}", options, name));
	                        }
	
	                        result = method.apply(widget, args);
	
	                        if (result !== undefined) {
	                            value = result;
	                            return false;
	                        }
	                    });
	                } else {
	                    this.each(function() {
	                        new widget(this, options);
	                    });
	                }
	
	                return value;
	            };
	
	            $.fn[getter] = function() {
	                return this.data(name);
	            };
	        }
	    });
	
	    var ContainerNullObject = { bind: function () { return this; }, nullObject: true };
	
	    var MobileWidget = Widget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, options);
	            this.element.autoApplyNS();
	            this.wrapper = this.element;
	            this.element.addClass("km-widget");
	        },
	
	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.element.kendoDestroy();
	        },
	
	        options: {
	            prefix: "Mobile"
	        },
	
	        events: [],
	
	        view: function() {
	            var viewElement = this.element.closest(kendo.roleSelector("view splitview modalview drawer"));
	            return kendo.widgetInstance(viewElement, kendo.mobile.ui) || ContainerNullObject;
	        },
	
	        viewHasNativeScrolling: function() {
	            var view = this.view();
	            return view && view.options.useNativeScrolling;
	        },
	
	        container: function() {
	            var element = this.element.closest(kendo.roleSelector("view layout modalview drawer splitview"));
	            return kendo.widgetInstance(element.eq(0), kendo.mobile.ui) || ContainerNullObject;
	        }
	    });
	
	    extend(kendo.mobile, {
	        init: function(element) {
	            kendo.init(element, kendo.mobile.ui, kendo.ui, kendo.dataviz.ui);
	        },
	
	        appLevelNativeScrolling: function() {
	            return kendo.mobile.application && kendo.mobile.application.options && kendo.mobile.application.options.useNativeScrolling;
	        },
	
	        ui: {
	            Widget: MobileWidget,
	            roles: {},
	            plugin: function(widget) {
	                kendo.ui.plugin(widget, kendo.mobile.ui, "Mobile");
	            }
	        }
	    });
	
	    kendo.touchScroller = function(elements, options) {
	        // return the first touch scroller
	        return $(elements).map(function(idx, element) {
	            element = $(element);
	            if (support.kineticScrollNeeded && kendo.mobile.ui.Scroller && !element.data("kendoMobileScroller")) {
	                element.kendoMobileScroller(options);
	                return element.data("kendoMobileScroller");
	            } else {
	                return false;
	            }
	        })[0];
	    };
	
	    kendo.preventDefault = function(e) {
	        e.preventDefault();
	    };
	
	    kendo.widgetInstance = function(element, suites) {
	        var role = element.data(kendo.ns + "role"),
	            widgets = [], i, length;
	
	        if (role) {
	            // HACK!!! mobile view scroller widgets are instantiated on data-role="content" elements. We need to discover them when resizing.
	            if (role === "content") {
	                role = "scroller";
	            }
	
	            if (suites) {
	                if (suites[0]) {
	                    for (i = 0, length = suites.length; i < length; i ++) {
	                        widgets.push(suites[i].roles[role]);
	                    }
	                } else {
	                    widgets.push(suites.roles[role]);
	                }
	            }
	            else {
	                widgets = [ kendo.ui.roles[role], kendo.dataviz.ui.roles[role],  kendo.mobile.ui.roles[role] ];
	            }
	
	            if (role.indexOf(".") >= 0) {
	                widgets = [ kendo.getter(role)(window) ];
	            }
	
	            for (i = 0, length = widgets.length; i < length; i ++) {
	                var widget = widgets[i];
	                if (widget) {
	                    var instance = element.data("kendo" + widget.fn.options.prefix + widget.fn.options.name);
	                    if (instance) {
	                        return instance;
	                    }
	                }
	            }
	        }
	    };
	
	    kendo.onResize = function(callback) {
	        var handler = callback;
	        if (support.mobileOS.android) {
	            handler = function() { setTimeout(callback, 600); };
	        }
	
	        $(window).on(support.resize, handler);
	        return handler;
	    };
	
	    kendo.unbindResize = function(callback) {
	        $(window).off(support.resize, callback);
	    };
	
	    kendo.attrValue = function(element, key) {
	        return element.data(kendo.ns + key);
	    };
	
	    kendo.days = {
	        Sunday: 0,
	        Monday: 1,
	        Tuesday: 2,
	        Wednesday: 3,
	        Thursday: 4,
	        Friday: 5,
	        Saturday: 6
	    };
	
	    function focusable(element, isTabIndexNotNaN) {
	        var nodeName = element.nodeName.toLowerCase();
	
	        return (/input|select|textarea|button|object/.test(nodeName) ?
	                !element.disabled :
	                "a" === nodeName ?
	                element.href || isTabIndexNotNaN :
	                isTabIndexNotNaN
	               ) &&
	            visible(element);
	    }
	
	    function visible(element) {
	        return !$(element).parents().addBack().filter(function() {
	            return $.css(this,"visibility") === "hidden" || $.expr.filters.hidden(this);
	        }).length;
	    }
	
	    $.extend($.expr[ ":" ], {
	        kendoFocusable: function(element) {
	            var idx = $.attr(element, "tabindex");
	            return focusable(element, !isNaN(idx) && idx > -1);
	        }
	    });
	
	    var MOUSE_EVENTS = ["mousedown", "mousemove", "mouseenter", "mouseleave", "mouseover", "mouseout", "mouseup", "click"];
	    var EXCLUDE_BUST_CLICK_SELECTOR = "label, input, [data-rel=external]";
	
	    var MouseEventNormalizer = {
	        setupMouseMute: function() {
	            var idx = 0,
	                length = MOUSE_EVENTS.length,
	                element = document.documentElement;
	
	            if (MouseEventNormalizer.mouseTrap || !support.eventCapture) {
	                return;
	            }
	
	            MouseEventNormalizer.mouseTrap = true;
	
	            MouseEventNormalizer.bustClick = false;
	            MouseEventNormalizer.captureMouse = false;
	
	            var handler = function(e) {
	                if (MouseEventNormalizer.captureMouse) {
	                    if (e.type === "click") {
	                        if (MouseEventNormalizer.bustClick && !$(e.target).is(EXCLUDE_BUST_CLICK_SELECTOR)) {
	                            e.preventDefault();
	                            e.stopPropagation();
	                        }
	                    } else {
	                        e.stopPropagation();
	                    }
	                }
	            };
	
	            for (; idx < length; idx++) {
	                element.addEventListener(MOUSE_EVENTS[idx], handler, true);
	            }
	        },
	
	        muteMouse: function(e) {
	            MouseEventNormalizer.captureMouse = true;
	            if (e.data.bustClick) {
	                MouseEventNormalizer.bustClick = true;
	            }
	            clearTimeout(MouseEventNormalizer.mouseTrapTimeoutID);
	        },
	
	        unMuteMouse: function() {
	            clearTimeout(MouseEventNormalizer.mouseTrapTimeoutID);
	            MouseEventNormalizer.mouseTrapTimeoutID = setTimeout(function() {
	                MouseEventNormalizer.captureMouse = false;
	                MouseEventNormalizer.bustClick = false;
	            }, 400);
	        }
	    };
	
	    var eventMap = {
	        down: "touchstart mousedown",
	        move: "mousemove touchmove",
	        up: "mouseup touchend touchcancel",
	        cancel: "mouseleave touchcancel"
	    };
	
	    if (support.touch && (support.mobileOS.ios || support.mobileOS.android)) {
	        eventMap = {
	            down: "touchstart",
	            move: "touchmove",
	            up: "touchend touchcancel",
	            cancel: "touchcancel"
	        };
	    } else if (support.pointers) {
	        eventMap = {
	            down: "pointerdown",
	            move: "pointermove",
	            up: "pointerup",
	            cancel: "pointercancel pointerleave"
	        };
	    } else if (support.msPointers) {
	        eventMap = {
	            down: "MSPointerDown",
	            move: "MSPointerMove",
	            up: "MSPointerUp",
	            cancel: "MSPointerCancel MSPointerLeave"
	        };
	    }
	
	    if (support.msPointers && !("onmspointerenter" in window)) { // IE10
	        // Create MSPointerEnter/MSPointerLeave events using mouseover/out and event-time checks
	        $.each({
	            MSPointerEnter: "MSPointerOver",
	            MSPointerLeave: "MSPointerOut"
	        }, function( orig, fix ) {
	            $.event.special[ orig ] = {
	                delegateType: fix,
	                bindType: fix,
	
	                handle: function( event ) {
	                    var ret,
	                        target = this,
	                        related = event.relatedTarget,
	                        handleObj = event.handleObj;
	
	                    // For mousenter/leave call the handler if related is outside the target.
	                    // NB: No relatedTarget if the mouse left/entered the browser window
	                    if ( !related || (related !== target && !$.contains( target, related )) ) {
	                        event.type = handleObj.origType;
	                        ret = handleObj.handler.apply( this, arguments );
	                        event.type = fix;
	                    }
	                    return ret;
	                }
	            };
	        });
	    }
	
	
	    var getEventMap = function(e) { return (eventMap[e] || e); },
	        eventRegEx = /([^ ]+)/g;
	
	    kendo.applyEventMap = function(events, ns) {
	        events = events.replace(eventRegEx, getEventMap);
	
	        if (ns) {
	            events = events.replace(eventRegEx, "$1." + ns);
	        }
	
	        return events;
	    };
	
	    var on = $.fn.on;
	
	    function kendoJQuery(selector, context) {
	        return new kendoJQuery.fn.init(selector, context);
	    }
	
	    extend(true, kendoJQuery, $);
	
	    kendoJQuery.fn = kendoJQuery.prototype = new $();
	
	    kendoJQuery.fn.constructor = kendoJQuery;
	
	    kendoJQuery.fn.init = function(selector, context) {
	        if (context && context instanceof $ && !(context instanceof kendoJQuery)) {
	            context = kendoJQuery(context);
	        }
	
	        return $.fn.init.call(this, selector, context, rootjQuery);
	    };
	
	    kendoJQuery.fn.init.prototype = kendoJQuery.fn;
	
	    var rootjQuery = kendoJQuery(document);
	
	    extend(kendoJQuery.fn, {
	        handler: function(handler) {
	            this.data("handler", handler);
	            return this;
	        },
	
	        autoApplyNS: function(ns) {
	            this.data("kendoNS", ns || kendo.guid());
	            return this;
	        },
	
	        on: function() {
	            var that = this,
	                ns = that.data("kendoNS");
	
	            // support for event map signature
	            if (arguments.length === 1) {
	                return on.call(that, arguments[0]);
	            }
	
	            var context = that,
	                args = slice.call(arguments);
	
	            if (typeof args[args.length -1] === UNDEFINED) {
	                args.pop();
	            }
	
	            var callback =  args[args.length - 1],
	                events = kendo.applyEventMap(args[0], ns);
	
	            // setup mouse trap
	            if (support.mouseAndTouchPresent && events.search(/mouse|click/) > -1 && this[0] !== document.documentElement) {
	                MouseEventNormalizer.setupMouseMute();
	
	                var selector = args.length === 2 ? null : args[1],
	                    bustClick = events.indexOf("click") > -1 && events.indexOf("touchend") > -1;
	
	                on.call(this,
	                    {
	                        touchstart: MouseEventNormalizer.muteMouse,
	                        touchend: MouseEventNormalizer.unMuteMouse
	                    },
	                    selector,
	                    {
	                        bustClick: bustClick
	                    });
	            }
	
	            if (typeof callback === STRING) {
	                context = that.data("handler");
	                callback = context[callback];
	
	                args[args.length - 1] = function(e) {
	                    callback.call(context, e);
	                };
	            }
	
	            args[0] = events;
	
	            on.apply(that, args);
	
	            return that;
	        },
	
	        kendoDestroy: function(ns) {
	            ns = ns || this.data("kendoNS");
	
	            if (ns) {
	                this.off("." + ns);
	            }
	
	            return this;
	        }
	    });
	
	    kendo.jQuery = kendoJQuery;
	    kendo.eventMap = eventMap;
	
	    kendo.timezone = (function(){
	        var months =  { Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11 };
	        var days = { Sun: 0, Mon: 1, Tue: 2, Wed: 3, Thu: 4, Fri: 5, Sat: 6 };
	
	        function ruleToDate(year, rule) {
	            var date;
	            var targetDay;
	            var ourDay;
	            var month = rule[3];
	            var on = rule[4];
	            var time = rule[5];
	            var cache = rule[8];
	
	            if (!cache) {
	                rule[8] = cache = {};
	            }
	
	            if (cache[year]) {
	                return cache[year];
	            }
	
	            if (!isNaN(on)) {
	                date = new Date(Date.UTC(year, months[month], on, time[0], time[1], time[2], 0));
	            } else if (on.indexOf("last") === 0) {
	                date = new Date(Date.UTC(year, months[month] + 1, 1, time[0] - 24, time[1], time[2], 0));
	
	                targetDay = days[on.substr(4, 3)];
	                ourDay = date.getUTCDay();
	
	                date.setUTCDate(date.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));
	            } else if (on.indexOf(">=") >= 0) {
	                date = new Date(Date.UTC(year, months[month], on.substr(5), time[0], time[1], time[2], 0));
	
	                targetDay = days[on.substr(0, 3)];
	                ourDay = date.getUTCDay();
	
	                date.setUTCDate(date.getUTCDate() + targetDay - ourDay + (targetDay < ourDay ? 7 : 0));
	            }
	
	            return cache[year] = date;
	        }
	
	        function findRule(utcTime, rules, zone) {
	            rules = rules[zone];
	
	            if (!rules) {
	                var time = zone.split(":");
	                var offset = 0;
	
	                if (time.length > 1) {
	                    offset = time[0] * 60 + Number(time[1]);
	                }
	
	                return [-1000000, 'max', '-', 'Jan', 1, [0, 0, 0], offset, '-'];
	            }
	
	            var year = new Date(utcTime).getUTCFullYear();
	
	            rules = jQuery.grep(rules, function(rule) {
	                var from = rule[0];
	                var to = rule[1];
	
	                return from <= year && (to >= year || (from == year && to == "only") || to == "max");
	            });
	
	            rules.push(utcTime);
	
	            rules.sort(function(a, b) {
	                if (typeof a != "number") {
	                    a = Number(ruleToDate(year, a));
	                }
	
	                if (typeof b != "number") {
	                    b = Number(ruleToDate(year, b));
	                }
	
	                return a - b;
	            });
	
	            var rule = rules[jQuery.inArray(utcTime, rules) - 1] || rules[rules.length - 1];
	
	            return isNaN(rule) ? rule : null;
	        }
	
	        function findZone(utcTime, zones, timezone) {
	            var zoneRules = zones[timezone];
	
	            if (typeof zoneRules === "string") {
	                zoneRules = zones[zoneRules];
	            }
	
	            if (!zoneRules) {
	                throw new Error('Timezone "' + timezone + '" is either incorrect, or kendo.timezones.min.js is not included.');
	            }
	
	            for (var idx = zoneRules.length - 1; idx >= 0; idx--) {
	                var until = zoneRules[idx][3];
	
	                if (until && utcTime > until) {
	                    break;
	                }
	            }
	
	            var zone = zoneRules[idx + 1];
	
	            if (!zone) {
	                throw new Error('Timezone "' + timezone + '" not found on ' + utcTime + ".");
	            }
	
	            return zone;
	        }
	
	        function zoneAndRule(utcTime, zones, rules, timezone) {
	            if (typeof utcTime != NUMBER) {
	                utcTime = Date.UTC(utcTime.getFullYear(), utcTime.getMonth(),
	                    utcTime.getDate(), utcTime.getHours(), utcTime.getMinutes(),
	                    utcTime.getSeconds(), utcTime.getMilliseconds());
	            }
	
	            var zone = findZone(utcTime, zones, timezone);
	
	            return {
	                zone: zone,
	                rule: findRule(utcTime, rules, zone[1])
	            };
	        }
	
	        function offset(utcTime, timezone) {
	            if (timezone == "Etc/UTC" || timezone == "Etc/GMT") {
	                return 0;
	            }
	
	            var info = zoneAndRule(utcTime, this.zones, this.rules, timezone);
	            var zone = info.zone;
	            var rule = info.rule;
	
	            return rule? zone[0] - rule[6] : zone[0];
	        }
	
	        function abbr(utcTime, timezone) {
	            var info = zoneAndRule(utcTime, this.zones, this.rules, timezone);
	            var zone = info.zone;
	            var rule = info.rule;
	
	            var base = zone[2];
	
	            if (base.indexOf("/") >= 0) {
	                return base.split("/")[rule && +rule[6] ? 1 : 0];
	            } else if (base.indexOf("%s") >= 0) {
	                return base.replace("%s", (!rule || rule[7] == "-") ? '' : rule[7]);
	            }
	
	            return base;
	        }
	
	        function convert(date, fromOffset, toOffset) {
	            if (typeof fromOffset == STRING) {
	                fromOffset = this.offset(date, fromOffset);
	            }
	
	            if (typeof toOffset == STRING) {
	                toOffset = this.offset(date, toOffset);
	            }
	
	            var fromLocalOffset = date.getTimezoneOffset();
	
	            date = new Date(date.getTime() + (fromOffset - toOffset) * 60000);
	
	            var toLocalOffset = date.getTimezoneOffset();
	
	            return new Date(date.getTime() + (toLocalOffset - fromLocalOffset) * 60000);
	        }
	
	        function apply(date, timezone) {
	           return this.convert(date, date.getTimezoneOffset(), timezone);
	        }
	
	        function remove(date, timezone) {
	           return this.convert(date, timezone, date.getTimezoneOffset());
	        }
	
	        function toLocalDate(time) {
	            return this.apply(new Date(time), "Etc/UTC");
	        }
	
	        return {
	           zones: {},
	           rules: {},
	           offset: offset,
	           convert: convert,
	           apply: apply,
	           remove: remove,
	           abbr: abbr,
	           toLocalDate: toLocalDate
	        };
	    })();
	
	    kendo.date = (function(){
	        var MS_PER_MINUTE = 60000,
	            MS_PER_DAY = 86400000;
	
	        function adjustDST(date, hours) {
	            if (hours === 0 && date.getHours() === 23) {
	                date.setHours(date.getHours() + 2);
	                return true;
	            }
	
	            return false;
	        }
	
	        function setDayOfWeek(date, day, dir) {
	            var hours = date.getHours();
	
	            dir = dir || 1;
	            day = ((day - date.getDay()) + (7 * dir)) % 7;
	
	            date.setDate(date.getDate() + day);
	            adjustDST(date, hours);
	        }
	
	        function dayOfWeek(date, day, dir) {
	            date = new Date(date);
	            setDayOfWeek(date, day, dir);
	            return date;
	        }
	
	        function firstDayOfMonth(date) {
	            return new Date(
	                date.getFullYear(),
	                date.getMonth(),
	                1
	            );
	        }
	
	        function lastDayOfMonth(date) {
	            var last = new Date(date.getFullYear(), date.getMonth() + 1, 0),
	                first = firstDayOfMonth(date),
	                timeOffset = Math.abs(last.getTimezoneOffset() - first.getTimezoneOffset());
	
	            if (timeOffset) {
	                last.setHours(first.getHours() + (timeOffset / 60));
	            }
	
	            return last;
	        }
	
	        function getDate(date) {
	            date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
	            adjustDST(date, 0);
	            return date;
	        }
	
	        function toUtcTime(date) {
	            return Date.UTC(date.getFullYear(), date.getMonth(),
	                        date.getDate(), date.getHours(), date.getMinutes(),
	                        date.getSeconds(), date.getMilliseconds());
	        }
	
	        function getMilliseconds(date) {
	            return date.getTime() - getDate(date);
	        }
	
	        function isInTimeRange(value, min, max) {
	            var msMin = getMilliseconds(min),
	                msMax = getMilliseconds(max),
	                msValue;
	
	            if (!value || msMin == msMax) {
	                return true;
	            }
	
	            if (min >= max) {
	                max += MS_PER_DAY;
	            }
	
	            msValue = getMilliseconds(value);
	
	            if (msMin > msValue) {
	                msValue += MS_PER_DAY;
	            }
	
	            if (msMax < msMin) {
	                msMax += MS_PER_DAY;
	            }
	
	            return msValue >= msMin && msValue <= msMax;
	        }
	
	        function isInDateRange(value, min, max) {
	            var msMin = min.getTime(),
	                msMax = max.getTime(),
	                msValue;
	
	            if (msMin >= msMax) {
	                msMax += MS_PER_DAY;
	            }
	
	            msValue = value.getTime();
	
	            return msValue >= msMin && msValue <= msMax;
	        }
	
	        function addDays(date, offset) {
	            var hours = date.getHours();
	                date = new Date(date);
	
	            setTime(date, offset * MS_PER_DAY);
	            adjustDST(date, hours);
	            return date;
	        }
	
	        function setTime(date, milliseconds, ignoreDST) {
	            var offset = date.getTimezoneOffset();
	            var difference;
	
	            date.setTime(date.getTime() + milliseconds);
	
	            if (!ignoreDST) {
	                difference = date.getTimezoneOffset() - offset;
	                date.setTime(date.getTime() + difference * MS_PER_MINUTE);
	            }
	        }
	
	        function today() {
	            return getDate(new Date());
	        }
	
	        function isToday(date) {
	           return getDate(date).getTime() == today().getTime();
	        }
	
	        function toInvariantTime(date) {
	            var staticDate = new Date(1980, 1, 1, 0, 0, 0);
	
	            if (date) {
	                staticDate.setHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
	            }
	
	            return staticDate;
	        }
	
	        return {
	            adjustDST: adjustDST,
	            dayOfWeek: dayOfWeek,
	            setDayOfWeek: setDayOfWeek,
	            getDate: getDate,
	            isInDateRange: isInDateRange,
	            isInTimeRange: isInTimeRange,
	            isToday: isToday,
	            nextDay: function(date) {
	                return addDays(date, 1);
	            },
	            previousDay: function(date) {
	                return addDays(date, -1);
	            },
	            toUtcTime: toUtcTime,
	            MS_PER_DAY: MS_PER_DAY,
	            MS_PER_HOUR: 60 * MS_PER_MINUTE,
	            MS_PER_MINUTE: MS_PER_MINUTE,
	            setTime: setTime,
	            addDays: addDays,
	            today: today,
	            toInvariantTime: toInvariantTime,
	            firstDayOfMonth: firstDayOfMonth,
	            lastDayOfMonth: lastDayOfMonth,
	            getMilliseconds: getMilliseconds
	            //TODO methods: combine date portion and time portion from arguments - date1, date 2
	        };
	    })();
	
	
	    kendo.stripWhitespace = function(element) {
	        if (document.createNodeIterator) {
	            var iterator = document.createNodeIterator(element, NodeFilter.SHOW_TEXT, function(node) {
	                    return node.parentNode == element ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
	                }, false);
	
	            while (iterator.nextNode()) {
	                if (iterator.referenceNode && !iterator.referenceNode.textContent.trim()) {
	                    iterator.referenceNode.parentNode.removeChild(iterator.referenceNode);
	                }
	            }
	        } else { // IE7/8 support
	            for (var i = 0; i < element.childNodes.length; i++) {
	                var child = element.childNodes[i];
	
	                if (child.nodeType == 3 && !/\S/.test(child.nodeValue)) {
	                    element.removeChild(child);
	                    i--;
	                }
	
	                if (child.nodeType == 1) {
	                    kendo.stripWhitespace(child);
	                }
	            }
	        }
	    };
	
	    var animationFrame  = window.requestAnimationFrame       ||
	                          window.webkitRequestAnimationFrame ||
	                          window.mozRequestAnimationFrame    ||
	                          window.oRequestAnimationFrame      ||
	                          window.msRequestAnimationFrame     ||
	                          function(callback){ setTimeout(callback, 1000 / 60); };
	
	    kendo.animationFrame = function(callback) {
	        animationFrame.call(window, callback);
	    };
	
	    var animationQueue = [];
	
	    kendo.queueAnimation = function(callback) {
	        animationQueue[animationQueue.length] = callback;
	        if (animationQueue.length === 1) {
	            kendo.runNextAnimation();
	        }
	    };
	
	    kendo.runNextAnimation = function() {
	        kendo.animationFrame(function() {
	            if (animationQueue[0]) {
	                animationQueue.shift()();
	                if (animationQueue[0]) {
	                    kendo.runNextAnimation();
	                }
	            }
	        });
	    };
	
	    kendo.parseQueryStringParams = function(url) {
	        var queryString = url.split('?')[1] || "",
	            params = {},
	            paramParts = queryString.split(/&|=/),
	            length = paramParts.length,
	            idx = 0;
	
	        for (; idx < length; idx += 2) {
	            if(paramParts[idx] !== "") {
	                params[decodeURIComponent(paramParts[idx])] = decodeURIComponent(paramParts[idx + 1]);
	            }
	        }
	
	        return params;
	    };
	
	    kendo.elementUnderCursor = function(e) {
	        return document.elementFromPoint(e.x.client, e.y.client);
	    };
	
	    kendo.wheelDeltaY = function(jQueryEvent) {
	        var e = jQueryEvent.originalEvent,
	            deltaY = e.wheelDeltaY,
	            delta;
	
	            if (e.wheelDelta) { // Webkit and IE
	                if (deltaY === undefined || deltaY) { // IE does not have deltaY, thus always scroll (horizontal scrolling is treated as vertical)
	                    delta = e.wheelDelta;
	                }
	            } else if (e.detail && e.axis === e.VERTICAL_AXIS) { // Firefox and Opera
	                delta = (-e.detail) * 10;
	            }
	
	        return delta;
	    };
	
	    kendo.caret = function (element, start, end) {
	        var rangeElement;
	        var isPosition = start !== undefined;
	
	        if (end === undefined) {
	            end = start;
	        }
	
	        if (element[0]) {
	            element = element[0];
	        }
	
	        if (isPosition && element.disabled) {
	            return;
	        }
	
	        try {
	            if (element.selectionStart !== undefined) {
	                if (isPosition) {
	                    element.focus();
	                    element.setSelectionRange(start, end);
	                } else {
	                    start = [element.selectionStart, element.selectionEnd];
	                }
	            } else if (document.selection) {
	                if ($(element).is(":visible")) {
	                    element.focus();
	                }
	
	                rangeElement = element.createTextRange();
	
	                if (isPosition) {
	                    rangeElement.collapse(true);
	                    rangeElement.moveStart("character", start);
	                    rangeElement.moveEnd("character", end - start);
	                    rangeElement.select();
	                } else {
	                    var rangeDuplicated = rangeElement.duplicate(),
	                        selectionStart, selectionEnd;
	
	                        rangeElement.moveToBookmark(document.selection.createRange().getBookmark());
	                        rangeDuplicated.setEndPoint('EndToStart', rangeElement);
	                        selectionStart = rangeDuplicated.text.length;
	                        selectionEnd = selectionStart + rangeElement.text.length;
	
	                    start = [selectionStart, selectionEnd];
	                }
	            }
	        } catch(e) {
	            /* element is not focused or it is not in the DOM */
	            start = [];
	        }
	
	        return start;
	    };
	
	})(jQuery);
	
	return window.kendo;
	
	}, __webpack_require__(230));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(225)))

/***/ },

/***/ 230:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 231:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(229) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){
	
	var __meta__ = {
	    id: "userevents",
	    name: "User Events",
	    category: "framework",
	    depends: [ "core" ],
	    hidden: true
	};
	
	(function ($, undefined) {
	    var kendo = window.kendo,
	        support = kendo.support,
	        document = window.document,
	        Class = kendo.Class,
	        Observable = kendo.Observable,
	        SELECT_START = "onselectstart" in document.documentElement,
	        now = $.now,
	        extend = $.extend,
	        OS = support.mobileOS,
	        invalidZeroEvents = OS && OS.android,
	        DEFAULT_MIN_HOLD = 800,
	        DEFAULT_THRESHOLD = support.browser.msie ? 5 : 0, // WP8 and W8 are very sensitive and always report move.
	
	        // UserEvents events
	        PRESS = "press",
	        HOLD = "hold",
	        SELECT = "select",
	        START = "start",
	        MOVE = "move",
	        END = "end",
	        CANCEL = "cancel",
	        TAP = "tap",
	        RELEASE = "release",
	        GESTURESTART = "gesturestart",
	        GESTURECHANGE = "gesturechange",
	        GESTUREEND = "gestureend",
	        GESTURETAP = "gesturetap";
	
	    function touchDelta(touch1, touch2) {
	        var x1 = touch1.x.location,
	            y1 = touch1.y.location,
	            x2 = touch2.x.location,
	            y2 = touch2.y.location,
	            dx = x1 - x2,
	            dy = y1 - y2;
	
	        return {
	            center: {
	               x: (x1 + x2) / 2,
	               y: (y1 + y2) / 2
	            },
	
	            distance: Math.sqrt(dx*dx + dy*dy)
	        };
	    }
	
	    function getTouches(e) {
	        var touches = [],
	            originalEvent = e.originalEvent,
	            currentTarget = e.currentTarget,
	            idx = 0, length,
	            changedTouches,
	            touch;
	
	        if (e.api) {
	            touches.push({
	                id: 2,  // hardcoded ID for API call;
	                event: e,
	                target: e.target,
	                currentTarget: e.target,
	                location: e
	            });
	        }
	        else if (e.type.match(/touch/)) {
	            changedTouches = originalEvent ? originalEvent.changedTouches : [];
	            for (length = changedTouches.length; idx < length; idx ++) {
	                touch = changedTouches[idx];
	                touches.push({
	                    location: touch,
	                    event: e,
	                    target: touch.target,
	                    currentTarget: currentTarget,
	                    id: touch.identifier
	                });
	            }
	        }
	        else if (support.pointers || support.msPointers) {
	            touches.push({
	                location: originalEvent,
	                event: e,
	                target: e.target,
	                currentTarget: currentTarget,
	                id: originalEvent.pointerId
	            });
	        } else {
	            touches.push({
	                id: 1, // hardcoded ID for mouse event;
	                event: e,
	                target: e.target,
	                currentTarget: currentTarget,
	                location: e
	            });
	        }
	
	        return touches;
	    }
	
	    var TouchAxis = Class.extend({
	        init: function(axis, location) {
	            var that = this;
	
	            that.axis = axis;
	
	            that._updateLocationData(location);
	
	            that.startLocation = that.location;
	            that.velocity = that.delta = 0;
	            that.timeStamp = now();
	        },
	
	        move: function(location) {
	            var that = this,
	                offset = location["page" + that.axis],
	                timeStamp = now(),
	                timeDelta = (timeStamp - that.timeStamp) || 1; // Firing manually events in tests can make this 0;
	
	            if (!offset && invalidZeroEvents) {
	                return;
	            }
	
	            that.delta = offset - that.location;
	
	            that._updateLocationData(location);
	
	            that.initialDelta = offset - that.startLocation;
	            that.velocity = that.delta / timeDelta;
	            that.timeStamp = timeStamp;
	        },
	
	        _updateLocationData: function(location) {
	            var that = this, axis = that.axis;
	
	            that.location = location["page" + axis];
	            that.client = location["client" + axis];
	            that.screen = location["screen" + axis];
	        }
	    });
	
	    var Touch = Class.extend({
	        init: function(userEvents, target, touchInfo) {
	            extend(this, {
	                x: new TouchAxis("X", touchInfo.location),
	                y: new TouchAxis("Y", touchInfo.location),
	                userEvents: userEvents,
	                target: target,
	                currentTarget: touchInfo.currentTarget,
	                initialTouch: touchInfo.target,
	                id: touchInfo.id,
	                pressEvent: touchInfo,
	                _moved: false,
	                _finished: false
	            });
	        },
	
	        press: function() {
	            this._holdTimeout = setTimeout($.proxy(this, "_hold"), this.userEvents.minHold);
	            this._trigger(PRESS, this.pressEvent);
	        },
	
	        _hold: function() {
	            this._trigger(HOLD, this.pressEvent);
	        },
	
	        move: function(touchInfo) {
	            var that = this;
	
	            if (that._finished) { return; }
	
	            that.x.move(touchInfo.location);
	            that.y.move(touchInfo.location);
	
	            if (!that._moved) {
	                if (that._withinIgnoreThreshold()) {
	                    return;
	                }
	
	                if (!UserEvents.current || UserEvents.current === that.userEvents) {
	                    that._start(touchInfo);
	                } else {
	                    return that.dispose();
	                }
	            }
	
	            // Event handlers may cancel the drag in the START event handler, hence the double check for pressed.
	            if (!that._finished) {
	                that._trigger(MOVE, touchInfo);
	            }
	        },
	
	        end: function(touchInfo) {
	            var that = this;
	
	            that.endTime = now();
	
	            if (that._finished) { return; }
	
	            // Mark the object as finished if there are blocking operations in the event handlers (alert/confirm)
	            that._finished = true;
	
	            if (that._moved) {
	                that._trigger(END, touchInfo);
	            } else {
	                that._trigger(TAP, touchInfo);
	            }
	
	            clearTimeout(that._holdTimeout);
	            that._trigger(RELEASE, touchInfo);
	
	            that.dispose();
	        },
	
	        dispose: function() {
	            var userEvents = this.userEvents,
	                activeTouches = userEvents.touches;
	
	            this._finished = true;
	            this.pressEvent = null;
	            clearTimeout(this._holdTimeout);
	
	            activeTouches.splice($.inArray(this, activeTouches), 1);
	        },
	
	        skip: function() {
	            this.dispose();
	        },
	
	        cancel: function() {
	            this.dispose();
	        },
	
	        isMoved: function() {
	            return this._moved;
	        },
	
	        _start: function(touchInfo) {
	            clearTimeout(this._holdTimeout);
	
	            this.startTime = now();
	            this._moved = true;
	            this._trigger(START, touchInfo);
	        },
	
	        _trigger: function(name, touchInfo) {
	            var that = this,
	                jQueryEvent = touchInfo.event,
	                data = {
	                    touch: that,
	                    x: that.x,
	                    y: that.y,
	                    target: that.target,
	                    event: jQueryEvent
	                };
	
	            if(that.userEvents.notify(name, data)) {
	                jQueryEvent.preventDefault();
	            }
	        },
	
	        _withinIgnoreThreshold: function() {
	            var xDelta = this.x.initialDelta,
	                yDelta = this.y.initialDelta;
	
	            return Math.sqrt(xDelta * xDelta + yDelta * yDelta) <= this.userEvents.threshold;
	        }
	    });
	
	    function withEachUpEvent(callback) {
	        var downEvents = kendo.eventMap.up.split(" "),
	            idx = 0,
	            length = downEvents.length;
	
	        for(; idx < length; idx ++) {
	            callback(downEvents[idx]);
	        }
	    }
	
	    var UserEvents = Observable.extend({
	        init: function(element, options) {
	            var that = this,
	                filter,
	                ns = kendo.guid();
	
	            options = options || {};
	            filter = that.filter = options.filter;
	            that.threshold = options.threshold || DEFAULT_THRESHOLD;
	            that.minHold = options.minHold || DEFAULT_MIN_HOLD;
	            that.touches = [];
	            that._maxTouches = options.multiTouch ? 2 : 1;
	            that.allowSelection = options.allowSelection;
	            that.captureUpIfMoved = options.captureUpIfMoved;
	            that.eventNS = ns;
	
	            element = $(element).handler(that);
	            Observable.fn.init.call(that);
	
	            extend(that, {
	                element: element,
	                surface: options.global ? $(document.documentElement) : $(options.surface || element),
	                stopPropagation: options.stopPropagation,
	                pressed: false
	            });
	
	            that.surface.handler(that)
	                .on(kendo.applyEventMap("move", ns), "_move")
	                .on(kendo.applyEventMap("up cancel", ns), "_end");
	
	            element.on(kendo.applyEventMap("down", ns), filter, "_start");
	
	            if (support.pointers || support.msPointers) {
	                element.css("-ms-touch-action", "pinch-zoom double-tap-zoom");
	            }
	
	            if (options.preventDragEvent) {
	                element.on(kendo.applyEventMap("dragstart", ns), kendo.preventDefault);
	            }
	
	            if (SELECT_START) {
	                element.on(kendo.applyEventMap("selectstart", ns), filter, { root: element }, "_select");
	            } else {
	                element.on(kendo.applyEventMap("mousedown", ns), filter, { root: element }, "_select");
	            }
	
	            if (that.captureUpIfMoved && support.eventCapture) {
	                var surfaceElement = that.surface[0],
	                    preventIfMovingProxy = $.proxy(that.preventIfMoving, that);
	
	                withEachUpEvent(function(eventName) {
	                    surfaceElement.addEventListener(eventName, preventIfMovingProxy, true);
	                });
	            }
	
	            that.bind([
	            PRESS,
	            HOLD,
	            TAP,
	            START,
	            MOVE,
	            END,
	            RELEASE,
	            CANCEL,
	            GESTURESTART,
	            GESTURECHANGE,
	            GESTUREEND,
	            GESTURETAP,
	            SELECT
	            ], options);
	        },
	
	        preventIfMoving: function(e) {
	            if (this._isMoved()) {
	                e.preventDefault();
	            }
	        },
	
	        destroy: function() {
	            var that = this;
	
	            if (that._destroyed) {
	                return;
	            }
	
	            that._destroyed = true;
	
	            if (that.captureUpIfMoved && support.eventCapture) {
	                var surfaceElement = that.surface[0];
	                withEachUpEvent(function(eventName) {
	                    surfaceElement.removeEventListener(eventName, that.preventIfMoving);
	                });
	            }
	
	            that.element.kendoDestroy(that.eventNS);
	            that.surface.kendoDestroy(that.eventNS);
	            that.element.removeData("handler");
	            that.surface.removeData("handler");
	            that._disposeAll();
	
	            that.unbind();
	            delete that.surface;
	            delete that.element;
	            delete that.currentTarget;
	        },
	
	        capture: function() {
	            UserEvents.current = this;
	        },
	
	        cancel: function() {
	            this._disposeAll();
	            this.trigger(CANCEL);
	        },
	
	        notify: function(eventName, data) {
	            var that = this,
	                touches = that.touches;
	
	            if (this._isMultiTouch()) {
	                switch(eventName) {
	                    case MOVE:
	                        eventName = GESTURECHANGE;
	                        break;
	                    case END:
	                        eventName = GESTUREEND;
	                        break;
	                    case TAP:
	                        eventName = GESTURETAP;
	                        break;
	                }
	
	                extend(data, {touches: touches}, touchDelta(touches[0], touches[1]));
	            }
	
	            if (!SELECT_START && (eventName == CANCEL || eventName == END)) {
	                $(document.body).css("userSelect", "");
	            }
	
	            return this.trigger(eventName, data);
	        },
	
	        // API
	        press: function(x, y, target) {
	            this._apiCall("_start", x, y, target);
	        },
	
	        move: function(x, y) {
	            this._apiCall("_move", x, y);
	        },
	
	        end: function(x, y) {
	            this._apiCall("_end", x, y);
	        },
	
	        _isMultiTouch: function() {
	            return this.touches.length > 1;
	        },
	
	        _maxTouchesReached: function() {
	            return this.touches.length >= this._maxTouches;
	        },
	
	        _disposeAll: function() {
	            var touches = this.touches;
	            while (touches.length > 0) {
	                touches.pop().dispose();
	            }
	        },
	
	        _isMoved: function() {
	            return $.grep(this.touches, function(touch) {
	                return touch.isMoved();
	            }).length;
	        },
	
	        _select: function(e) {
	           if (!this.allowSelection || this.trigger(SELECT, { event: e })) {
	                if (SELECT_START) {
	                    e.preventDefault();
	                } else {
	                    $(document.body).css("userSelect", "none");
	                }
	           }
	        },
	
	        _start: function(e) {
	            var that = this,
	                idx = 0,
	                filter = that.filter,
	                target,
	                touches = getTouches(e),
	                length = touches.length,
	                touch,
	                which = e.which;
	
	            if (which && which > 1){
	                return;
	            }
	
	            if (that._maxTouchesReached()) {
	                return;
	            }
	
	            UserEvents.current = null;
	
	            that.currentTarget = e.currentTarget;
	
	            if (that.stopPropagation) {
	                e.stopPropagation();
	            }
	
	            for (; idx < length; idx ++) {
	                if (that._maxTouchesReached()) {
	                    break;
	                }
	
	                touch = touches[idx];
	
	                if (filter) {
	                    target = $(touch.currentTarget); // target.is(filter) ? target : target.closest(filter, that.element);
	                } else {
	                    target = that.element;
	                }
	
	                if (!target.length) {
	                    continue;
	                }
	
	                touch = new Touch(that, target, touch);
	                that.touches.push(touch);
	                touch.press();
	
	                if (that._isMultiTouch()) {
	                    that.notify("gesturestart", {});
	                }
	            }
	        },
	
	        _move: function(e) {
	            this._eachTouch("move", e);
	        },
	
	        _end: function(e) {
	            this._eachTouch("end", e);
	        },
	
	        _eachTouch: function(methodName, e) {
	            var that = this,
	                dict = {},
	                touches = getTouches(e),
	                activeTouches = that.touches,
	                idx,
	                touch,
	                touchInfo,
	                matchingTouch;
	
	            for (idx = 0; idx < activeTouches.length; idx ++) {
	                touch = activeTouches[idx];
	                dict[touch.id] = touch;
	            }
	
	            for (idx = 0; idx < touches.length; idx ++) {
	                touchInfo = touches[idx];
	                matchingTouch = dict[touchInfo.id];
	
	                if (matchingTouch) {
	                    matchingTouch[methodName](touchInfo);
	                }
	            }
	        },
	
	        _apiCall: function(type, x, y, target) {
	            this[type]({
	                api: true,
	                pageX: x,
	                pageY: y,
	                clientX: x,
	                clientY: y,
	                target: $(target || this.element)[0],
	                stopPropagation: $.noop,
	                preventDefault: $.noop
	            });
	        }
	    });
	
	    UserEvents.minHold = function(value) {
	        DEFAULT_MIN_HOLD = value;
	    };
	
	    kendo.getTouches = getTouches;
	    kendo.touchDelta = touchDelta;
	    kendo.UserEvents = UserEvents;
	 })(window.kendo.jQuery);
	
	return window.kendo;
	
	}, __webpack_require__(230));


/***/ },

/***/ 232:
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(233);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(235)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../../node_modules/css-loader/index.js?sourceMap!./../../../../../node_modules/sass-loader/index.js?sourceMap!./window.scss", function() {
				var newContent = require("!!./../../../../../node_modules/css-loader/index.js?sourceMap!./../../../../../node_modules/sass-loader/index.js?sourceMap!./window.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 233:
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(234)();
	// imports
	
	
	// module
	exports.push([module.id, ".x-window {\n  width: 500px;\n  background-color: #FFF;\n  outline: none;\n  position: absolute;\n  border: solid 1px #eeeeee;\n  box-shadow: 0px 2px 13px 1px #D4D4D4;\n  font-family: verdana;\n  font-size: 12px;\n  z-index: 999; }\n  .x-window .x-window-title {\n    clear: both;\n    padding: 10px;\n    padding-left: 10px;\n    padding-top: 10px;\n    border-style: solid;\n    border-width: 0;\n    font-weight: bold;\n    font-size: 12px;\n    border-bottom-width: 1px !important;\n    border-bottom-color: #D4D4D4; }\n  .x-window .x-tool-wrap {\n    position: absolute;\n    right: 10px;\n    top: 8px; }\n    .x-window .x-tool-wrap .x-tool {\n      cursor: pointer;\n      font-size: 12px;\n      color: #CCC; }\n      .x-window .x-tool-wrap .x-tool:hover {\n        color: #000; }\n\n.k-window {\n  font-family: verdana;\n  font-size: 12px;\n  border-color: #D4D4D4;\n  -webkit-box-shadow: 0px 2px 13px 1px #D4D4D4;\n  box-shadow: 0px 2px 13px 1px #D4D4D4;\n  background-color: #FFF; }\n  .k-window .k-header {\n    border-color: #D4D4D4; }\n  .k-window .k-window-titlebar {\n    width: auto;\n    left: 0;\n    right: 0;\n    padding: 6px;\n    border-style: solid;\n    border-width: 0;\n    font-weight: bold;\n    font-size: 12px;\n    border-bottom-width: 1px !important;\n    border-bottom-color: #D4D4D4;\n    color: #333333;\n    text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75);\n    background-color: #f0f0f0;\n    background: #f0f0f0;\n    background: -webkit-gradient(linear, 0 0, 0 100%, from(#f8f8f8), to(#eaeaea));\n    background: -moz-linear-gradient(100% 100% 90deg, #eaeaea, #f8f8f8);\n    background: -ms-linear-gradient(top, #f8f8f8 0%, #eaeaea 100%);\n    background: linear-gradient(top, #f8f8f8 0%, #eaeaea 100%);\n    border-color: #cccccc;\n    -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);\n    -moz-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);\n    box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05); }\n  .k-window .k-window-content {\n    margin-top: 0;\n    height: auto;\n    padding: 0;\n    height: 100%; }\n\n.toolbar-wrapper {\n  border-bottom: solid 1px #E8E8E8;\n  clear: both;\n  height: 38px; }\n\ntd {\n  padding: 3px; }\n\n.form-control {\n  height: 30px; }\n\n.p-toolbar {\n  display: flex;\n  flex-direction: row;\n  padding: 2px 0 2px 2px;\n  border-style: solid;\n  border-color: #DADADA;\n  border-width: 0 0 1px 0;\n  background-image: none;\n  background-color: #d8d8d8;\n  background-image: -webkit-gradient(linear, top, bottom, color-stop(0%, #e6e6e6), color-stop(0%, #efefef));\n  background-image: -webkit-linear-gradient(top, #e6e6e6, #efefef);\n  background-image: -moz-linear-gradient(top, #e6e6e6, #efefef);\n  background-image: -o-linear-gradient(top, #e6e6e6, #efefef);\n  background-image: -ms-linear-gradient(top, #e6e6e6, #efefef);\n  background-image: linear-gradient(top, #e6e6e6, #efefef); }\n  .p-toolbar .p-toolbar-separator {\n    margin: 5px 2px 0;\n    height: 14px;\n    border-style: solid;\n    border-width: 0 1px;\n    border-left-color: #aca899;\n    border-right-color: #fff; }\n  .p-toolbar .p-toolbar-button {\n    cursor: pointer;\n    padding: 4px;\n    display: inline-block;\n    border-radius: 2px;\n    border-width: 1px;\n    border-style: solid;\n    border-color: transparent;\n    -webkit-user-select: none;\n    text-decoration: none;\n    color: #525252; }\n    .p-toolbar .p-toolbar-button i {\n      display: inline-block;\n      margin-right: 4px; }\n    .p-toolbar .p-toolbar-button span {\n      margin-top: 1px; }\n    .p-toolbar .p-toolbar-button:hover {\n      text-decoration: none;\n      border-color: #C7C7C7;\n      background-image: none;\n      background-color: #f3f3f3;\n      background-image: -webkit-gradient(linear, top, bottom, color-stop(0%, #fbfbfb), color-stop(0%, #e9e9e9));\n      background-image: -webkit-linear-gradient(top, #fbfbfb, #e9e9e9);\n      background-image: -moz-linear-gradient(top, #fbfbfb, #e9e9e9);\n      background-image: -o-linear-gradient(top, #fbfbfb, #e9e9e9);\n      background-image: -ms-linear-gradient(top, #fbfbfb, #e9e9e9);\n      background-image: linear-gradient(top, #fbfbfb, #e9e9e9); }\n    .p-toolbar .p-toolbar-button:active {\n      border-color: #9d9d9d;\n      background-image: none;\n      background-color: #d6d6d6;\n      background-image: -webkit-gradient(linear, top, bottom, color-stop(0%, #c7c7c7), color-stop(0%, #e0e0e0));\n      background-image: -webkit-linear-gradient(top, #c7c7c7, #e0e0e0);\n      background-image: -moz-linear-gradient(top, #c7c7c7, #e0e0e0);\n      background-image: -o-linear-gradient(top, #c7c7c7, #e0e0e0);\n      background-image: -ms-linear-gradient(top, #c7c7c7, #e0e0e0);\n      background-image: linear-gradient(top, #c7c7c7, #e0e0e0); }\n\n.p-window-buttons {\n  position: absolute;\n  padding: 10px;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  background-color: #F4F4F4;\n  border-top: solid 1px #ECECEC;\n  display: flex;\n  flex-direction: row; }\n\n.p-button {\n  display: inline-block;\n  outline: 0;\n  cursor: pointer;\n  white-space: nowrap;\n  text-decoration: none;\n  vertical-align: top;\n  overflow: hidden;\n  position: relative;\n  color: #4E4E4E;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  -ms-border-radius: 3px;\n  -o-border-radius: 3px;\n  border-radius: 3px;\n  padding: 3px 5px;\n  border-width: 1px;\n  border-style: solid;\n  background-image: none;\n  background-color: #f8f8f8;\n  background-image: -webkit-gradient(linear, top, bottom, color-stop(0%, #fff), color-stop(0%, #eee));\n  background-image: -webkit-linear-gradient(top, #fff, #eee);\n  background-image: -moz-linear-gradient(top, #fff, #eee);\n  background-image: -o-linear-gradient(top, #fff, #eee);\n  background-image: -ms-linear-gradient(top, #fff, #eee);\n  background-image: linear-gradient(top, #fff, #eee);\n  border-color: #bbb; }\n  .p-button i {\n    margin-right: 4px; }\n  .p-button:hover {\n    text-decoration: none; }\n", "", {"version":3,"sources":["/./src/app/components/src/app/components/ux/window/window.scss"],"names":[],"mappings":"AAUA;EACI,aAAa;EACb,uBAZ0B;EAc1B,cAAc;EACd,mBAAmB;EACnB,0BAAyB;EACzB,qCATkB;EAWlB,qBAAqB;EACrB,gBAf2B;EAiB3B,aAAa,EAgChB;EA5CD;IAeQ,YAAY;IACZ,cAAc;IACd,mBAAmB;IACnB,kBAAkB;IAClB,oBAAoB;IACpB,gBAAgB;IAChB,kBAAkB;IAClB,gBA1BqB;IA2BrB,oCAAgE;IAChE,6BAjCqB,EAkCxB;EAzBL;IA4BQ,mBAAmB;IACnB,YAAY;IACZ,SAAS,EAYZ;IA1CL;MAiCY,gBAAgB;MAChB,gBAvCmB;MAwCnB,YA1CY,EA+Cf;MAxCT;QAsCgB,YA5Cc,EA6CjB;;AAOb;EAEI,qBAAqB;EACrB,gBAtD2B;EAwD3B,sBA5DyB;EA6DzB,6CAtDkB;EAuDlB,qCAvDkB;EAwDlB,uBAhE0B,EAqG7B;EA7CD;IAWQ,sBAlEqB,EAmExB;EAZL;IAeQ,YAAY;IACZ,QAAQ;IACR,SAAS;IACT,aAAa;IACb,oBAAoB;IACpB,gBAAgB;IAChB,kBAAkB;IAClB,gBAxEqB;IAyErB,oCAAgE;IAChE,6BA/EqB;IAgFrB,eAAe;IACf,iDAA2B;IAC3B,0BAA0B;IAC1B,oBAAoB;IACpB,8EAA4B;IAC5B,oEAAgC;IAChC,+DAA+B;IAC/B,2DAA2B;IAC3B,sBAAsB;IACtB,0FAA0E;IAC1E,uFAAuE;IACvE,kFAAkE,EACrE;EArCL;IAwCQ,cAAc;IACd,aAAa;IACb,WAAW;IACX,aAAa,EAChB;;AAGL;EACI,iCAAiC;EACjC,YAAY;EACZ,aAAa,EAChB;;AAED;EACI,aAAa,EAChB;;AAED;EACI,aAAa,EAChB;;AAED;EACI,cAAc;EACd,oBAAoB;EACpB,uBAAuB;EACvB,oBAAoB;EACpB,sBAAsB;EACtB,wBAAwB;EACxB,uBAAuB;EACvB,0BAA0B;EAC1B,0GAAkC;EAClC,iEAAyC;EACzC,8DAAsC;EACtC,4DAAoC;EACpC,6DAAqC;EACrC,yDAAiC,EA2DpC;EAzED;IAiBQ,kBAAkB;IAClB,aAAa;IACb,oBAAoB;IACpB,oBAAoB;IACpB,2BAA2B;IAC3B,yBAAyB,EAC5B;EAvBL;IA0BQ,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,kBAAkB;IAClB,oBAAoB;IACpB,0BAA0B;IAE1B,0BAA0B;IAC1B,sBAAsB;IACtB,eAAe,EAoClB;IAxEL;MAwCY,sBAAsB;MACtB,kBAAkB,EACrB;IA1CT;MA6CY,gBAAgB,EACnB;IA9CT;MAiDY,sBAAsB;MACtB,sBAAsB;MACtB,uBAAuB;MACvB,0BAA0B;MAC1B,0GAAkC;MAClC,iEAAyC;MACzC,8DAAsC;MACtC,4DAAoC;MACpC,6DAAqC;MACrC,yDAAiC,EACpC;IA3DT;MA8DY,sBAAsB;MACtB,uBAAuB;MACvB,0BAA0B;MAC1B,0GAAkC;MAClC,iEAAyC;MACzC,8DAAsC;MACtC,4DAAoC;MACpC,6DAAqC;MACrC,yDAAiC,EACpC;;AAIT;EACI,mBAAmB;EACnB,cAAc;EACd,UAAU;EACV,SAAS;EACT,QAAQ;EACR,0BAA0B;EAC1B,8BAA8B;EAC9B,cAAc;EACd,oBAAoB,EACvB;;AAED;EACI,sBAAsB;EACtB,WAAW;EACX,gBAAgB;EAChB,oBAAoB;EACpB,sBAAsB;EACtB,oBAAoB;EACpB,iBAAiB;EACjB,mBAAmB;EACnB,eAAe;EACf,2BAA2B;EAC3B,wBAAwB;EACxB,uBAAuB;EACvB,sBAAsB;EACtB,mBAAmB;EACnB,iBAAiB;EACjB,kBAAkB;EAClB,oBAAoB;EACpB,uBAAuB;EACvB,0BAA0B;EAC1B,oGAAkC;EAClC,2DAAyC;EACzC,wDAAsC;EACtC,sDAAoC;EACpC,uDAAqC;EACrC,mDAAiC;EACjC,mBAAmB,EAStB;EAnCD;IA6BQ,kBAAkB,EACrB;EA9BL;IAiCQ,sBAAsB,EACzB","file":"window.scss","sourcesContent":["$window-background-color: #FFF;\n$window-border-color: #D4D4D4;\n$window-border-title-bottom-width: 1px;\n$window-tool-color: #CCC;\n$window-tool-hover-color: #000;\n$window-default-font-size: 12px;\n$window-title-font-size: 12px;\n\n$shadow-color: #D4D4D4;\n\n.x-window {\n    width: 500px;\n    background-color: $window-background-color;\n\n    outline: none;\n    position: absolute;\n    border: solid 1px lighten($window-border-color, 10%);\n    box-shadow: 0px 2px 13px 1px $shadow-color;\n\n    font-family: verdana;\n    font-size:  $window-default-font-size;\n\n    z-index: 999;\n\n    .x-window-title {\n        clear: both;\n        padding: 10px;\n        padding-left: 10px;\n        padding-top: 10px;\n        border-style: solid;\n        border-width: 0;\n        font-weight: bold;\n        font-size: $window-title-font-size;\n        border-bottom-width: $window-border-title-bottom-width!important;\n        border-bottom-color: $window-border-color;\n    }\n\n    .x-tool-wrap {\n        position: absolute;\n        right: 10px;\n        top: 8px;\n\n        .x-tool {\n            cursor: pointer;\n            font-size: $window-default-font-size;\n            color: $window-tool-color;\n\n            &:hover {\n                color: $window-tool-hover-color;\n            }\n        }\n\n    }\n\n}\n\n.k-window {\n\n    font-family: verdana;\n    font-size:  $window-default-font-size;\n\n    border-color: $window-border-color;\n    -webkit-box-shadow: 0px 2px 13px 1px $shadow-color;\n    box-shadow: 0px 2px 13px 1px $shadow-color;\n    background-color: $window-background-color;\n\n    .k-header {\n        border-color: $window-border-color;\n    }\n\n    .k-window-titlebar {\n        width: auto;\n        left: 0;\n        right: 0;\n        padding: 6px;\n        border-style: solid;\n        border-width: 0;\n        font-weight: bold;\n        font-size: $window-title-font-size;\n        border-bottom-width: $window-border-title-bottom-width!important;\n        border-bottom-color: $window-border-color;\n        color: #333333;\n        text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75);\n        background-color: #f0f0f0;\n        background: #f0f0f0;\n        background: -webkit-gradient(linear, 0 0, 0 100%, from(#f8f8f8), to(#eaeaea));\n        background: -moz-linear-gradient(100% 100% 90deg, #eaeaea, #f8f8f8);\n        background: -ms-linear-gradient(top, #f8f8f8 0%,#eaeaea 100%);\n        background: linear-gradient(top, #f8f8f8 0%,#eaeaea 100%);\n        border-color: #cccccc;\n        -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);\n        -moz-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);\n        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);\n    }\n\n    .k-window-content {\n        margin-top: 0;\n        height: auto;\n        padding: 0;\n        height: 100%;\n    }\n}\n\n.toolbar-wrapper {\n    border-bottom: solid 1px #E8E8E8;\n    clear: both;\n    height: 38px;\n}\n\ntd {\n    padding: 3px;\n}\n\n.form-control {\n    height: 30px;\n}\n\n.p-toolbar {\n    display: flex;\n    flex-direction: row;\n    padding: 2px 0 2px 2px;\n    border-style: solid;\n    border-color: #DADADA;\n    border-width: 0 0 1px 0;\n    background-image: none;\n    background-color: #d8d8d8;\n    background-image: -webkit-gradient(linear, top, bottom, color-stop(0%, #e6e6e6), color-stop(0%, #efefef));\n    background-image: -webkit-linear-gradient(top, #e6e6e6, #efefef);\n    background-image: -moz-linear-gradient(top, #e6e6e6, #efefef);\n    background-image: -o-linear-gradient(top, #e6e6e6, #efefef);\n    background-image: -ms-linear-gradient(top, #e6e6e6, #efefef);\n    background-image: linear-gradient(top,#e6e6e6, #efefef);\n\n    .p-toolbar-separator {\n        margin: 5px 2px 0;\n        height: 14px;\n        border-style: solid;\n        border-width: 0 1px;\n        border-left-color: #aca899;\n        border-right-color: #fff;\n    }\n\n    .p-toolbar-button {\n        cursor: pointer;\n        padding: 4px;\n        display: inline-block;\n        border-radius: 2px;\n        border-width: 1px;\n        border-style: solid;\n        border-color: transparent;\n\n        -webkit-user-select: none;\n        text-decoration: none;\n        color: #525252;\n\n\n        i {\n            display: inline-block;\n            margin-right: 4px;\n        }\n\n        span {\n            margin-top: 1px;\n        }\n\n        &:hover {\n            text-decoration: none;\n            border-color: #C7C7C7;\n            background-image: none;\n            background-color: #f3f3f3;\n            background-image: -webkit-gradient(linear, top, bottom, color-stop(0%, #fbfbfb), color-stop(0%, #e9e9e9));\n            background-image: -webkit-linear-gradient(top, #fbfbfb, #e9e9e9);\n            background-image: -moz-linear-gradient(top, #fbfbfb, #e9e9e9);\n            background-image: -o-linear-gradient(top, #fbfbfb, #e9e9e9);\n            background-image: -ms-linear-gradient(top, #fbfbfb, #e9e9e9);\n            background-image: linear-gradient(top,#fbfbfb, #e9e9e9);\n        }\n\n        &:active {\n            border-color: #9d9d9d;\n            background-image: none;\n            background-color: #d6d6d6;\n            background-image: -webkit-gradient(linear, top, bottom, color-stop(0%, #c7c7c7), color-stop(0%, #e0e0e0));\n            background-image: -webkit-linear-gradient(top, #c7c7c7, #e0e0e0);\n            background-image: -moz-linear-gradient(top, #c7c7c7, #e0e0e0);\n            background-image: -o-linear-gradient(top, #c7c7c7, #e0e0e0);\n            background-image: -ms-linear-gradient(top, #c7c7c7, #e0e0e0);\n            background-image: linear-gradient(top,#c7c7c7, #e0e0e0);\n        }\n    }\n}\n\n.p-window-buttons {\n    position: absolute;\n    padding: 10px;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    background-color: #F4F4F4;\n    border-top: solid 1px #ECECEC;\n    display: flex;\n    flex-direction: row;\n}\n\n.p-button {\n    display: inline-block;\n    outline: 0;\n    cursor: pointer;\n    white-space: nowrap;\n    text-decoration: none;\n    vertical-align: top;\n    overflow: hidden;\n    position: relative;\n    color: #4E4E4E;\n    -webkit-border-radius: 3px;\n    -moz-border-radius: 3px;\n    -ms-border-radius: 3px;\n    -o-border-radius: 3px;\n    border-radius: 3px;\n    padding: 3px 5px;\n    border-width: 1px;\n    border-style: solid;\n    background-image: none;\n    background-color: #f8f8f8;\n    background-image: -webkit-gradient(linear, top, bottom, color-stop(0%, #fff), color-stop(0%, #eee));\n    background-image: -webkit-linear-gradient(top, #fff, #eee);\n    background-image: -moz-linear-gradient(top, #fff, #eee);\n    background-image: -o-linear-gradient(top, #fff, #eee);\n    background-image: -ms-linear-gradient(top, #fff, #eee);\n    background-image: linear-gradient(top,#fff, #eee);\n    border-color: #bbb;\n\n    i {\n        margin-right: 4px;\n    }\n\n    &:hover {\n        text-decoration: none;\n    }\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports


/***/ },

/***/ 234:
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },

/***/ 235:
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(true) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },

/***/ 236:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Navbar = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _navbarBrand = __webpack_require__(237);
	
	var _navbarNotifications = __webpack_require__(238);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Navigation Bar
	 *
	 * @class Navbar
	 * @extends React.Component
	 */
	
	var Navbar = exports.Navbar = function (_React$Component) {
	    _inherits(Navbar, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function Navbar(args) {
	        _classCallCheck(this, Navbar);
	
	        return _possibleConstructorReturn(this, Object.getPrototypeOf(Navbar).call(this, args));
	    }
	
	    /**
	     * @render
	     * @return {View} view
	     */
	
	    _createClass(Navbar, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'navbar' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'navbar-inner' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'navbar-container' },
	                        _react2.default.createElement(_navbarBrand.NavbarBrand, null),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'sidebar-collapse' },
	                            _react2.default.createElement('i', { className: 'collapse-icon fa fa-bars' })
	                        ),
	                        _react2.default.createElement(_navbarNotifications.NavbarNotifications, null)
	                    )
	                )
	            );
	        }
	    }]);
	
	    return Navbar;
	}(_react2.default.Component);

/***/ },

/***/ 237:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.NavbarBrand = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Application Brand
	 *
	 * @class NavbarBrand
	 * @extends React.Component
	 */
	
	var NavbarBrand = exports.NavbarBrand = function (_React$Component) {
	    _inherits(NavbarBrand, _React$Component);
	
	    function NavbarBrand() {
	        _classCallCheck(this, NavbarBrand);
	
	        return _possibleConstructorReturn(this, Object.getPrototypeOf(NavbarBrand).apply(this, arguments));
	    }
	
	    _createClass(NavbarBrand, [{
	        key: 'render',
	
	        /**
	         * @render
	         * @return {View} view
	         */
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'navbar-header pull-left' },
	                _react2.default.createElement(
	                    'a',
	                    { href: '#', className: 'navbar-brand' },
	                    _react2.default.createElement(
	                        'small',
	                        null,
	                        _react2.default.createElement('img', { src: '../assets/images/theme/logo.png', alt: '' })
	                    )
	                )
	            );
	        }
	    }]);
	
	    return NavbarBrand;
	}(_react2.default.Component);

/***/ },

/***/ 238:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.NavbarNotifications = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Navbar Notification Bar
	 *
	 * @class NotificationBar
	 * @extends React.Component
	 */
	
	var NavbarNotifications = exports.NavbarNotifications = function (_React$Component) {
	    _inherits(NavbarNotifications, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function NavbarNotifications(args) {
	        _classCallCheck(this, NavbarNotifications);
	
	        return _possibleConstructorReturn(this, Object.getPrototypeOf(NavbarNotifications).call(this, args));
	    }
	
	    /**
	     * @render
	     * @return {View} view
	     */
	
	    _createClass(NavbarNotifications, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'navbar-header pull-right' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'navbar-account' },
	                    _react2.default.createElement(
	                        'ul',
	                        { className: 'account-area' },
	                        _react2.default.createElement(
	                            'li',
	                            null,
	                            _react2.default.createElement(
	                                'a',
	                                { className: ' dropdown-toggle', 'data-toggle': 'dropdown', title: 'Notifications', href: '#', 'aria-expanded': 'false' },
	                                _react2.default.createElement('i', { className: 'icon fa fa-warning' })
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'li',
	                            null,
	                            _react2.default.createElement(
	                                'a',
	                                { className: 'dropdown-toggle', 'data-toggle': 'dropdown', title: 'Mails', href: '#', 'aria-expanded': 'false' },
	                                _react2.default.createElement('i', { className: 'icon fa fa-envelope' }),
	                                _react2.default.createElement(
	                                    'span',
	                                    { className: 'badge' },
	                                    '3'
	                                )
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'li',
	                            null,
	                            _react2.default.createElement(
	                                'a',
	                                { className: 'dropdown-toggle', 'data-toggle': 'dropdown', title: 'Tasks', href: '#', 'aria-expanded': 'false' },
	                                _react2.default.createElement('i', { className: 'icon fa fa-tasks' }),
	                                _react2.default.createElement(
	                                    'span',
	                                    { className: 'badge' },
	                                    '4'
	                                )
	                            )
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return NavbarNotifications;
	}(_react2.default.Component);

/***/ },

/***/ 239:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	                            value: true
	});
	exports.ApplicationMenu = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _window = __webpack_require__(240);
	
	var _toolbar = __webpack_require__(241);
	
	var _customer = __webpack_require__(244);
	
	var _Enquiry = __webpack_require__(250);
	
	var _Quotation = __webpack_require__(252);
	
	var _SalesOrder = __webpack_require__(253);
	
	var _DeliveryNote = __webpack_require__(254);
	
	var _Invoice = __webpack_require__(255);
	
	var _ProFormaInvoice = __webpack_require__(256);
	
	var _PurchaseOrder = __webpack_require__(257);
	
	var _Material = __webpack_require__(258);
	
	var _Product = __webpack_require__(259);
	
	var _ChartOfAccount = __webpack_require__(260);
	
	var _Grade = __webpack_require__(261);
	
	var _MaterialRequisition = __webpack_require__(262);
	
	var _RequestQuotation = __webpack_require__(263);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Application Menu
	 *
	 * @class ApplicationMenu
	 * @extends React.Component
	 */
	
	var ApplicationMenu = exports.ApplicationMenu = function (_React$Component) {
	                            _inherits(ApplicationMenu, _React$Component);
	
	                            /**
	                             * @constructor
	                             */
	
	                            function ApplicationMenu(args) {
	                                                        _classCallCheck(this, ApplicationMenu);
	
	                                                        return _possibleConstructorReturn(this, Object.getPrototypeOf(ApplicationMenu).call(this, args));
	                            }
	
	                            _createClass(ApplicationMenu, [{
	                                                        key: 'onMenuClick',
	                                                        value: function onMenuClick() {
	                                                                                    _window.Window.show(_react2.default.createElement(_customer.Customer, null), { title: 'Customer', height: 500, width: 800 });
	                                                        }
	
	                                                        /**
	                                                         * @render
	                                                         * @return {View} view
	                                                         */
	
	                            }, {
	                                                        key: 'render',
	                                                        value: function render() {
	                                                                                    return _react2.default.createElement(
	                                                                                                                'div',
	                                                                                                                { className: 'page-header position-relative appmenu' },
	                                                                                                                _react2.default.createElement(
	                                                                                                                                            _toolbar.Toolbar,
	                                                                                                                                            null,
	                                                                                                                                            _react2.default.createElement(
	                                                                                                                                                                        _toolbar.ToolbarItem,
	                                                                                                                                                                        { text: 'Party Master', icon: 'fa-th' },
	                                                                                                                                                                        _react2.default.createElement(
	                                                                                                                                                                                                    'div',
	                                                                                                                                                                                                    { className: 'x-menu' },
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-item', onClick: this.onMenuClick.bind(this) }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Company'
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'shortcut' },
	                                                                                                                                                                                                                                                            'Ctrl + C'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Financial Year'
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'shortcut' },
	                                                                                                                                                                                                                                                            'Ctrl + F'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item', onClick: this.onMenuClick.bind(this) },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            _react2.default.createElement('i', { className: 'fa fa-user', style: { color: '#62B2FF' } }),
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Customer'
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'shortcut' },
	                                                                                                                                                                                                                                                            'Ctrl + O'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            _react2.default.createElement('i', { className: 'fa fa-th', style: { color: '#DF5138' } }),
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Product'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Stock'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Tax'
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'shortcut' },
	                                                                                                                                                                                                                                                            'Ctrl + T'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    )
	                                                                                                                                                                        )
	                                                                                                                                            ),
	                                                                                                                                            _react2.default.createElement(_toolbar.ToolbarSeparator, null),
	                                                                                                                                            _react2.default.createElement(
	                                                                                                                                                                        _toolbar.ToolbarItem,
	                                                                                                                                                                        { text: 'Transactions', icon: 'fa-table' },
	                                                                                                                                                                        _react2.default.createElement(
	                                                                                                                                                                                                    'div',
	                                                                                                                                                                                                    { className: 'x-menu' },
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Purchase'
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'shortcut' },
	                                                                                                                                                                                                                                                            'Ctrl + P'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Sales'
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'shortcut' },
	                                                                                                                                                                                                                                                            'Ctrl + S'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Inward Material'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Outward Material'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Product Barcode'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Label Printing'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Delivery Challan'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Bill Printing'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Receipt Voucher'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Payment Voucher'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Expense'
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'shortcut' },
	                                                                                                                                                                                                                                                            'Ctrl +E'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    )
	                                                                                                                                                                        )
	                                                                                                                                            ),
	                                                                                                                                            _react2.default.createElement(_toolbar.ToolbarSeparator, null),
	                                                                                                                                            _react2.default.createElement(
	                                                                                                                                                                        _toolbar.ToolbarItem,
	                                                                                                                                                                        { text: 'Reports', icon: 'fa-calendar' },
	                                                                                                                                                                        _react2.default.createElement(
	                                                                                                                                                                                                    'div',
	                                                                                                                                                                                                    { className: 'x-menu' },
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Purchase Register'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Sales Register'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Inward Register'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Outward Register'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Stock Register'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Closing Stock'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Godown Wise Register'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Tax Wise Register'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Product Wise Register'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Cash Book Register'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Expense Wise Register'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Party Wise Register'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Cash/Credit Sales'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Month wise Party wise Register'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Bank Book Register'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Attendance Register'
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'shortcut' },
	                                                                                                                                                                                                                                                            'Ctrl + A'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    )
	                                                                                                                                                                        )
	                                                                                                                                            ),
	                                                                                                                                            _react2.default.createElement(_toolbar.ToolbarSeparator, null),
	                                                                                                                                            _react2.default.createElement(
	                                                                                                                                                                        _toolbar.ToolbarItem,
	                                                                                                                                                                        { text: 'Accounts', icon: 'fa-money' },
	                                                                                                                                                                        _react2.default.createElement(
	                                                                                                                                                                                                    'div',
	                                                                                                                                                                                                    { className: 'x-menu' },
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Receipts'
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'shortcut' },
	                                                                                                                                                                                                                                                            'Ctrl + R'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Payments'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Cash/Bank'
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'shortcut' },
	                                                                                                                                                                                                                                                            'Ctrl + C'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Journal'
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'shortcut' },
	                                                                                                                                                                                                                                                            'Ctrl + J'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Bank Record'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Outstanding Reports'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Outstanding Debtors'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Outstanding Creditors'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Reports'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Trial Balance'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement('div', { className: 'x-menu-divider' }),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Profile & Loss'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    ),
	                                                                                                                                                                                                    _react2.default.createElement(
	                                                                                                                                                                                                                                'div',
	                                                                                                                                                                                                                                { className: 'x-menu-item' },
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'u',
	                                                                                                                                                                                                                                                            null,
	                                                                                                                                                                                                                                                            ' '
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'x-menu-text' },
	                                                                                                                                                                                                                                                            'Balance Sheet'
	                                                                                                                                                                                                                                ),
	                                                                                                                                                                                                                                _react2.default.createElement(
	                                                                                                                                                                                                                                                            'span',
	                                                                                                                                                                                                                                                            { className: 'shortcut' },
	                                                                                                                                                                                                                                                            'Ctrl + B'
	                                                                                                                                                                                                                                )
	                                                                                                                                                                                                    )
	                                                                                                                                                                        )
	                                                                                                                                            ),
	                                                                                                                                            _react2.default.createElement(_toolbar.ToolbarSeparator, null),
	                                                                                                                                            _react2.default.createElement(_toolbar.ToolbarItem, { text: 'Settings', icon: 'fa-cog' }),
	                                                                                                                                            _react2.default.createElement(_toolbar.ToolbarSeparator, null),
	                                                                                                                                            _react2.default.createElement(_toolbar.ToolbarItem, { text: 'Users & Roles', icon: 'fa-user' }),
	                                                                                                                                            _react2.default.createElement(_toolbar.ToolbarSeparator, null),
	                                                                                                                                            _react2.default.createElement(_toolbar.ToolbarItem, { text: 'Help', icon: 'fa-question' })
	                                                                                                                )
	                                                                                    );
	                                                        }
	                            }]);
	
	                            return ApplicationMenu;
	}(_react2.default.Component);

/***/ },

/***/ 240:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Window = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _kendo = __webpack_require__(227);
	
	var _kendo2 = _interopRequireDefault(_kendo);
	
	__webpack_require__(232);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Custom Class Header
	 *
	 * @class Window
	 * @extends React.Component
	 */
	var Window = exports.Window = {
	
	    /**
	     * Default Width
	     * @property {String} defaultWidth
	     */
	    defaultWidth: '100px',
	
	    /**
	     * Default Width
	     * @property {String} defaultHeight
	     */
	    defaultHeight: '30px',
	
	    /**
	     * Default window tool actions
	     * @property {Array<String>} defaultActions
	     */
	    defaultActions: ["Minimize", "Maximize", "Close"],
	
	    /**
	     * @render
	     * @return {View} view
	     */
	    show: function show(component, options) {
	
	        var config = {
	            width: options.width || this.defaultWidth,
	            height: options.height || this.defaultHeight,
	            title: options.title || null,
	            actions: this.defaultActions,
	            position: {
	                top: "15%",
	                left: "35%"
	            }
	        };
	
	        var $dialog = $('<div/>');
	        $dialog.appendTo(document.body);
	        $dialog.kendoWindow(config);
	        _reactDom2.default.render(component, $dialog[0]);
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(225)))

/***/ },

/***/ 241:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.ToolbarSeparator = exports.ToolbarItem = exports.Toolbar = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _kendo = __webpack_require__(242);
	
	var _kendo2 = _interopRequireDefault(_kendo);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class Toolbar
	 * @extends React.Component
	 */
	
	var Toolbar = exports.Toolbar = function (_React$Component) {
	    _inherits(Toolbar, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function Toolbar() {
	        _classCallCheck(this, Toolbar);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Toolbar).call(this));
	
	        _this.state = {};
	        return _this;
	    }
	
	    _createClass(Toolbar, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {}
	        //$(this.refs.xToolbar).kendoMenu();
	
	        /**
	         * @render
	         * @return {HTMLDivElement} container
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'toolbar', ref: 'xToolbar' },
	                this.props.children
	            );
	        }
	    }]);
	
	    return Toolbar;
	}(_react2.default.Component);
	
	/**
	 * @class ToolbarItem
	 * @extends React.Component
	 */
	
	var ToolbarItem = exports.ToolbarItem = function (_React$Component2) {
	    _inherits(ToolbarItem, _React$Component2);
	
	    /**
	     * @constructor
	     */
	
	    function ToolbarItem() {
	        _classCallCheck(this, ToolbarItem);
	
	        /**
	         * @state
	         */
	
	        var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToolbarItem).call(this));
	
	        _this2.state = {};
	        return _this2;
	    }
	
	    /**
	     * @lifecycle
	     * @componentDidMount
	     * @return {Void} undefined
	     */
	
	    _createClass(ToolbarItem, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.el = this.refs['x-toolbar-item'];
	            //if(this.props.children)
	            // $(this.el).kendoMenu();
	        }
	
	        /**
	         * @render
	         * @return {HTMLDivElement} container
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            var caret = null;
	            var className = "toolbar-item";
	            return _react2.default.createElement(
	                'div',
	                { ref: 'x-toolbar-item', onClick: this.props.onClick, className: className },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'toolbar-item-inner' },
	                    _react2.default.createElement('i', { className: "menu-icon fa " + (this.props.icon || "fa-picture-o") }),
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'menu-text' },
	                        this.props.text || "Purchases"
	                    )
	                ),
	                this.props.children
	            );
	        }
	    }]);
	
	    return ToolbarItem;
	}(_react2.default.Component);
	
	/**
	 * @class ToolbarSeparator
	 * @extends React.Component
	 */
	
	var ToolbarSeparator = exports.ToolbarSeparator = function (_React$Component3) {
	    _inherits(ToolbarSeparator, _React$Component3);
	
	    /**
	     * @constructor
	     */
	
	    function ToolbarSeparator() {
	        _classCallCheck(this, ToolbarSeparator);
	
	        /**
	         * @state
	         */
	
	        var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToolbarSeparator).call(this));
	
	        _this3.state = {};
	        return _this3;
	    }
	
	    /**
	     * @render
	     * @return {HTMLDivElement} container
	     */
	
	    _createClass(ToolbarSeparator, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'toolbar-item toolbar-separator' },
	                _react2.default.createElement(
	                    'span',
	                    null,
	                    ' '
	                )
	            );
	        }
	    }]);
	
	    return ToolbarSeparator;
	}(_react2.default.Component);

/***/ },

/***/ 242:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/
	var $ = __webpack_require__(225);
	
	(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(243) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){
	
	var __meta__ = {
	    id: "menu",
	    name: "Menu",
	    category: "web",
	    description: "The Menu widget displays hierarchical data as a multi-level menu.",
	    depends: [ "popup" ]
	};
	
	(function ($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        activeElement = kendo._activeElement,
	        touch = (kendo.support.touch && kendo.support.mobileOS),
	        MOUSEDOWN = "mousedown",
	        CLICK = "click",
	        extend = $.extend,
	        proxy = $.proxy,
	        each = $.each,
	        template = kendo.template,
	        keys = kendo.keys,
	        Widget = ui.Widget,
	        excludedNodesRegExp = /^(ul|a|div)$/i,
	        NS = ".kendoMenu",
	        IMG = "img",
	        OPEN = "open",
	        MENU = "k-menu",
	        LINK = "k-link",
	        LAST = "k-last",
	        CLOSE = "close",
	        TIMER = "timer",
	        FIRST = "k-first",
	        IMAGE = "k-image",
	        SELECT = "select",
	        ZINDEX = "zIndex",
	        ACTIVATE = "activate",
	        DEACTIVATE = "deactivate",
	        POINTERDOWN = "touchstart" + NS + " MSPointerDown" + NS + " pointerdown" + NS,
	        pointers = kendo.support.pointers,
	        msPointers = kendo.support.msPointers,
	        MOUSEENTER = pointers ? "pointerover" : (msPointers ? "MSPointerOver" : "mouseenter"),
	        MOUSELEAVE = pointers ? "pointerout" : (msPointers ? "MSPointerOut" : "mouseleave"),
	        mobile = touch || msPointers || pointers,
	        KENDOPOPUP = "kendoPopup",
	        DEFAULTSTATE = "k-state-default",
	        HOVERSTATE = "k-state-hover",
	        FOCUSEDSTATE = "k-state-focused",
	        DISABLEDSTATE = "k-state-disabled",
	        groupSelector = ".k-group",
	        popupSelector = groupSelector + ",.k-animation-container",
	        allItemsSelector = ":not(.k-list) > .k-item",
	        disabledSelector = ".k-item.k-state-disabled",
	        itemSelector = ".k-item:not(.k-state-disabled)",
	        linkSelector = ".k-item:not(.k-state-disabled) > .k-link",
	        exclusionSelector = ":not(.k-item.k-separator)",
	        nextSelector = exclusionSelector + ":eq(0)",
	        lastSelector = exclusionSelector + ":last",
	        templateSelector = "div:not(.k-animation-container,.k-list-container)",
	
	        templates = {
	            content: template(
	                "<div class='k-content k-group' tabindex='-1'>#= content(item) #</div>"
	            ),
	            group: template(
	                "<ul class='#= groupCssClass(group) #'#= groupAttributes(group) # role='menu' aria-hidden='true'>" +
	                    "#= renderItems(data) #" +
	                "</ul>"
	            ),
	            itemWrapper: template(
	                "<#= tag(item) # class='#= textClass(item) #'#= textAttributes(item) #>" +
	                    "#= image(item) ##= sprite(item) ##= text(item) #" +
	                    "#= arrow(data) #" +
	                "</#= tag(item) #>"
	            ),
	            item: template(
	                "<li class='#= wrapperCssClass(group, item) #' role='menuitem' #=item.items ? \"aria-haspopup='true'\": \"\"#" +
	                    "#=item.enabled === false ? \"aria-disabled='true'\" : ''#>" +
	                    "#= itemWrapper(data) #" +
	                    "# if (item.items) { #" +
	                    "#= subGroup({ items: item.items, menu: menu, group: { expanded: item.expanded } }) #" +
	                    "# } else if (item.content || item.contentUrl) { #" +
	                    "#= renderContent(data) #" +
	                    "# } #" +
	                "</li>"
	            ),
	            image: template("<img class='k-image' alt='' src='#= imageUrl #' />"),
	            arrow: template("<span class='#= arrowClass(item, group) #'></span>"),
	            sprite: template("<span class='k-sprite #= spriteCssClass #'></span>"),
	            empty: template("")
	        },
	
	        rendering = {
	
	            wrapperCssClass: function (group, item) {
	                var result = "k-item",
	                    index = item.index;
	
	                if (item.enabled === false) {
	                    result += " k-state-disabled";
	                } else {
	                    result += " k-state-default";
	                }
	
	                if (group.firstLevel && index === 0) {
	                    result += " k-first";
	                }
	
	                if (index == group.length-1) {
	                    result += " k-last";
	                }
	
	                if (item.cssClass) {
	                    result += " " + item.cssClass;
	                }
	
	                return result;
	            },
	
	            textClass: function() {
	                return LINK;
	            },
	
	            textAttributes: function(item) {
	                return item.url ? " href='" + item.url + "'" : "";
	            },
	
	            arrowClass: function(item, group) {
	                var result = "k-icon";
	
	                if (group.horizontal) {
	                    result += " k-i-arrow-s";
	                } else {
	                    result += " k-i-arrow-e";
	                }
	
	                return result;
	            },
	
	            text: function(item) {
	                return item.encoded === false ? item.text : kendo.htmlEncode(item.text);
	            },
	
	            tag: function(item) {
	                return item.url ? "a" : "span";
	            },
	
	            groupAttributes: function(group) {
	                return group.expanded !== true ? " style='display:none'" : "";
	            },
	
	            groupCssClass: function() {
	                return "k-group";
	            },
	
	            content: function(item) {
	                return item.content ? item.content : "&nbsp;";
	            }
	        };
	
	    function getEffectDirection(direction, root) {
	        direction = direction.split(" ")[!root+0] || direction;
	        return direction.replace("top", "up").replace("bottom", "down");
	    }
	
	    function parseDirection(direction, root, isRtl) {
	        direction = direction.split(" ")[!root+0] || direction;
	        var output = { origin: ["bottom", (isRtl ? "right" : "left")], position: ["top", (isRtl ? "right" : "left")] },
	            horizontal = /left|right/.test(direction);
	
	        if (horizontal) {
	            output.origin = [ "top", direction ];
	            output.position[1] = kendo.directions[direction].reverse;
	        } else {
	            output.origin[0] = direction;
	            output.position[0] = kendo.directions[direction].reverse;
	        }
	
	        output.origin = output.origin.join(" ");
	        output.position = output.position.join(" ");
	
	        return output;
	    }
	
	    function contains(parent, child) {
	        try {
	            return $.contains(parent, child);
	        } catch (e) {
	            return false;
	        }
	    }
	
	    function updateItemClasses (item) {
	        item = $(item);
	
	        item.addClass("k-item")
	            .children(IMG)
	            .addClass(IMAGE);
	        item
	            .children("a")
	            .addClass(LINK)
	            .children(IMG)
	            .addClass(IMAGE);
	        item
	            .filter(":not([disabled])")
	            .addClass(DEFAULTSTATE);
	        item
	            .filter(".k-separator:empty")
	            .append("&nbsp;");
	        item
	            .filter("li[disabled]")
	            .addClass(DISABLEDSTATE)
	            .removeAttr("disabled")
	            .attr("aria-disabled", true);
	
	        if (!item.filter("[role]").length) {
	            item.attr("role", "menuitem");
	        }
	
	        if (!item.children("." + LINK).length) {
	            item
	                .contents()      // exclude groups, real links, templates and empty text nodes
	                .filter(function() { return (!this.nodeName.match(excludedNodesRegExp) && !(this.nodeType == 3 && !$.trim(this.nodeValue))); })
	                .wrapAll("<span class='" + LINK + "'/>");
	        }
	
	        updateArrow(item);
	        updateFirstLast(item);
	    }
	
	    function updateArrow (item) {
	        item = $(item);
	
	        item.find("> .k-link > [class*=k-i-arrow]:not(.k-sprite)").remove();
	
	        item.filter(":has(.k-group)")
	            .children(".k-link:not(:has([class*=k-i-arrow]:not(.k-sprite)))")
	            .each(function () {
	                var item = $(this),
	                    parent = item.parent().parent();
	
	                item.append("<span class='k-icon " + (parent.hasClass(MENU + "-horizontal") ? "k-i-arrow-s" : "k-i-arrow-e") + "'/>");
	            });
	    }
	
	    function updateFirstLast (item) {
	        item = $(item);
	
	        item.filter(".k-first:not(:first-child)").removeClass(FIRST);
	        item.filter(".k-last:not(:last-child)").removeClass(LAST);
	        item.filter(":first-child").addClass(FIRST);
	        item.filter(":last-child").addClass(LAST);
	    }
	
	    var Menu = Widget.extend({
	        init: function(element, options) {
	            var that = this;
	
	            Widget.fn.init.call(that, element, options);
	
	            element = that.wrapper = that.element;
	            options = that.options;
	
	            that._initData(options);
	
	            that._updateClasses();
	
	            that._animations(options);
	
	            that.nextItemZIndex = 100;
	
	            that._tabindex();
	
	            that._focusProxy = proxy(that._focusHandler, that);
	
	            element.on(POINTERDOWN, that._focusProxy)
	                   .on(CLICK + NS, disabledSelector, false)
	                   .on(CLICK + NS, itemSelector, proxy(that._click , that))
	                   .on("keydown" + NS, proxy(that._keydown, that))
	                   .on("focus" + NS, proxy(that._focus, that))
	                   .on("focus" + NS, ".k-content", proxy(that._focus, that))
	                   .on(POINTERDOWN + " " + MOUSEDOWN + NS, ".k-content", proxy(that._preventClose, that))
	                   .on("blur" + NS, proxy(that._removeHoverItem, that))
	                   .on("blur" + NS, "[tabindex]", proxy(that._checkActiveElement, that))
	                   .on(MOUSEENTER + NS, itemSelector, proxy(that._mouseenter, that))
	                   .on(MOUSELEAVE + NS, itemSelector, proxy(that._mouseleave, that))
	                   .on(MOUSEENTER + NS + " " + MOUSELEAVE + NS + " " +
	                       MOUSEDOWN + NS + " " + CLICK + NS, linkSelector, proxy(that._toggleHover, that));
	
	            if (options.openOnClick) {
	                that.clicked = false;
	                that._documentClickHandler = proxy(that._documentClick, that);
	                $(document).click(that._documentClickHandler);
	            }
	
	            element.attr("role", "menubar");
	
	            if (element[0].id) {
	                that._ariaId = kendo.format("{0}_mn_active", element[0].id);
	            }
	
	            kendo.notify(that);
	        },
	
	        events: [
	            OPEN,
	            CLOSE,
	            ACTIVATE,
	            DEACTIVATE,
	            SELECT
	        ],
	
	        options: {
	            name: "Menu",
	            animation: {
	                open: {
	                    duration: 200
	                },
	                close: { // if close animation effects are defined, they will be used instead of open.reverse
	                    duration: 100
	                }
	            },
	            orientation: "horizontal",
	            direction: "default",
	            openOnClick: false,
	            closeOnClick: true,
	            hoverDelay: 100,
	            popupCollision: undefined
	        },
	
	        _initData: function(options) {
	            var that = this;
	
	            if (options.dataSource) {
	                that.element.empty();
	                that.append(options.dataSource, that.element);
	            }
	        },
	
	        setOptions: function(options) {
	            var animation = this.options.animation;
	
	            this._animations(options);
	
	            options.animation = extend(true, animation, options.animation);
	
	            if ("dataSource" in options) {
	                this._initData(options);
	            }
	
	            Widget.fn.setOptions.call(this, options);
	        },
	
	        destroy: function() {
	            var that = this;
	
	            Widget.fn.destroy.call(that);
	
	            that.element.off(NS);
	
	            if (that._documentClickHandler) {
	                $(document).unbind("click", that._documentClickHandler);
	            }
	
	            kendo.destroy(that.element);
	        },
	
	        enable: function (element, enable) {
	            this._toggleDisabled(element, enable !== false);
	
	            return this;
	        },
	
	        disable: function (element) {
	            this._toggleDisabled(element, false);
	
	            return this;
	        },
	
	        append: function (item, referenceItem) {
	            referenceItem = this.element.find(referenceItem);
	
	            var inserted = this._insert(item, referenceItem, referenceItem.length ? referenceItem.find("> .k-group, > .k-animation-container > .k-group") : null);
	
	            each(inserted.items, function () {
	                inserted.group.append(this);
	                updateArrow(this);
	            });
	
	            updateArrow(referenceItem);
	            updateFirstLast(inserted.group.find(".k-first, .k-last").add(inserted.items));
	
	            return this;
	        },
	
	        insertBefore: function (item, referenceItem) {
	            referenceItem = this.element.find(referenceItem);
	
	            var inserted = this._insert(item, referenceItem, referenceItem.parent());
	
	            each(inserted.items, function () {
	                referenceItem.before(this);
	                updateArrow(this);
	                updateFirstLast(this);
	            });
	
	            updateFirstLast(referenceItem);
	
	            return this;
	        },
	
	        insertAfter: function (item, referenceItem) {
	            referenceItem = this.element.find(referenceItem);
	
	            var inserted = this._insert(item, referenceItem, referenceItem.parent());
	
	            each(inserted.items, function () {
	                referenceItem.after(this);
	                updateArrow(this);
	                updateFirstLast(this);
	            });
	
	            updateFirstLast(referenceItem);
	
	            return this;
	        },
	
	        _insert: function (item, referenceItem, parent) {
	            var that = this,
	                items, groups;
	
	            if (!referenceItem || !referenceItem.length) {
	                parent = that.element;
	            }
	
	            var plain = $.isPlainObject(item),
	                groupData = {
	                    firstLevel: parent.hasClass(MENU),
	                    horizontal: parent.hasClass(MENU + "-horizontal"),
	                    expanded: true,
	                    length: parent.children().length
	                };
	
	            if (referenceItem && !parent.length) {
	                parent = $(Menu.renderGroup({ group: groupData })).appendTo(referenceItem);
	            }
	
	            if (plain || $.isArray(item)) { // is JSON
	                items = $($.map(plain ? [ item ] : item, function (value, idx) {
	                            if (typeof value === "string") {
	                                return $(value).get();
	                            } else {
	                                return $(Menu.renderItem({
	                                    group: groupData,
	                                    item: extend(value, { index: idx })
	                                })).get();
	                            }
	                        }));
	            } else {
	                if (typeof item == "string" && item[0] != "<") {
	                    items = that.element.find(item);
	                } else {
	                    items = $(item);
	                }
	
	                groups = items.find("> ul")
	                                .addClass("k-group")
	                                .attr("role", "menu");
	
	                items = items.filter("li");
	
	                items.add(groups.find("> li")).each(function () {
	                    updateItemClasses(this);
	                });
	            }
	
	            return { items: items, group: parent };
	        },
	
	        remove: function (element) {
	            element = this.element.find(element);
	
	            var that = this,
	                parent = element.parentsUntil(that.element, allItemsSelector),
	                group = element.parent("ul:not(.k-menu)");
	
	            element.remove();
	
	            if (group && !group.children(allItemsSelector).length) {
	                var container = group.parent(".k-animation-container");
	                if (container.length) {
	                    container.remove();
	                } else {
	                    group.remove();
	                }
	            }
	
	            if (parent.length) {
	                parent = parent.eq(0);
	
	                updateArrow(parent);
	                updateFirstLast(parent);
	            }
	
	            return that;
	        },
	
	        open: function (element) {
	            var that = this,
	                options = that.options,
	                horizontal = options.orientation == "horizontal",
	                direction = options.direction,
	                isRtl = kendo.support.isRtl(that.wrapper);
	            element = that.element.find(element);
	
	            if (/^(top|bottom|default)$/.test(direction)) {
	                if (isRtl) {
	                    direction = horizontal ? (direction + " left").replace("default", "bottom") : "left";
	                } else {
	                    direction = horizontal ? (direction + " right").replace("default", "bottom") : "right";
	                }
	            }
	
	            element.siblings()
	                   .find(">.k-popup:visible,>.k-animation-container>.k-popup:visible")
	                   .each(function () {
	                       var popup = $(this).data("kendoPopup");
	
	                       if (popup) {
	                           popup.close();
	                       }
	                   });
	
	            element.each(function () {
	                var li = $(this);
	
	                clearTimeout(li.data(TIMER));
	
	                li.data(TIMER, setTimeout(function () {
	                    var ul = li.find(".k-group:first:hidden"),
	                        popup;
	
	                    if (ul[0] && that.trigger(OPEN, { item: li[0] }) === false) {
	
	                        if (!ul.find(".k-group")[0] && ul.children(".k-item").length > 1) {
	                            var windowHeight = $(window).height(),
	                                setScrolling = function(){
	                                    ul.css({maxHeight: windowHeight - (ul.outerHeight() - ul.height()) - kendo.getShadows(ul).bottom, overflow: "auto"});
	                                };
	
	                            if (kendo.support.browser.msie && kendo.support.browser.version <= 7) {
	                                setTimeout(setScrolling, 0); // timeout required by IE7
	                            } else {
	                                setScrolling();
	                            }
	                        } else {
	                            ul.css({maxHeight: "", overflow: ""});
	                        }
	
	                        li.data(ZINDEX, li.css(ZINDEX));
	                        li.css(ZINDEX, that.nextItemZIndex ++);
	
	                        popup = ul.data(KENDOPOPUP);
	                        var root = li.parent().hasClass(MENU),
	                            parentHorizontal = root && horizontal,
	                            directions = parseDirection(direction, root, isRtl),
	                            effects = options.animation.open.effects,
	                            openEffects = effects !== undefined ? effects : "slideIn:" + getEffectDirection(direction, root);
	
	                        if (!popup) {
	                            popup = ul.kendoPopup({
	                                activate: function() { that.trigger(ACTIVATE, { item: this.wrapper.parent() }); },
	                                deactivate: function() { that.trigger(DEACTIVATE, { item: this.wrapper.parent() }); },
	                                origin: directions.origin,
	                                position: directions.position,
	                                collision: options.popupCollision !== undefined ? options.popupCollision : (parentHorizontal ? "fit" : "fit flip"),
	                                anchor: li,
	                                appendTo: li,
	                                animation: {
	                                    open: extend(true, { effects: openEffects }, options.animation.open),
	                                    close: options.animation.close
	                                },
	                                close: function (e) {
	                                    var li = e.sender.wrapper.parent();
	
	                                    if (!that.trigger(CLOSE, { item: li[0] })) {
	                                        li.css(ZINDEX, li.data(ZINDEX));
	                                        li.removeData(ZINDEX);
	
	                                        if (mobile) {
	                                            li.removeClass(HOVERSTATE);
	                                            that._removeHoverItem();
	                                        }
	                                    } else {
	                                        e.preventDefault();
	                                    }
	                                }
	                            }).data(KENDOPOPUP);
	                        } else {
	                            popup = ul.data(KENDOPOPUP);
	                            popup.options.origin = directions.origin;
	                            popup.options.position = directions.position;
	                            popup.options.animation.open.effects = openEffects;
	                        }
	                        ul.removeAttr("aria-hidden");
	                        popup.open();
	                    }
	
	                }, that.options.hoverDelay));
	            });
	
	            return that;
	        },
	
	        close: function (items, dontClearClose) {
	            var that = this,
	                element = that.element;
	
	            items = element.find(items);
	
	            if (!items.length) {
	                items = element.find(">.k-item");
	            }
	
	            items.each(function () {
	                var li = $(this);
	
	                if (!dontClearClose && that._isRootItem(li)) {
	                    that.clicked = false;
	                }
	
	                clearTimeout(li.data(TIMER));
	
	                li.data(TIMER, setTimeout(function () {
	                    var popup = li.find(".k-group:not(.k-list-container):not(.k-calendar-container):first:visible").data(KENDOPOPUP);
	
	                    if (popup) {
	                        popup.close();
	                        popup.element.attr("aria-hidden", true);
	                    }
	                }, that.options.hoverDelay));
	            });
	
	            return that;
	        },
	
	        _toggleDisabled: function (items, enable) {
	            this.element.find(items).each(function () {
	                $(this)
	                    .toggleClass(DEFAULTSTATE, enable)
	                    .toggleClass(DISABLEDSTATE, !enable)
	                    .attr("aria-disabled", !enable);
	            });
	        },
	
	        _toggleHover: function(e) {
	            var target = $(kendo.eventTarget(e) || e.target).closest(allItemsSelector),
	                isEnter = e.type == MOUSEENTER || MOUSEDOWN.indexOf(e.type) !== -1;
	
	            if (!target.parents("li." + DISABLEDSTATE).length) {
	                target.toggleClass(HOVERSTATE, isEnter || e.type == "mousedown" || e.type == "click");
	            }
	
	            this._removeHoverItem();
	        },
	
	        _preventClose: function() {
	            if (!this.options.closeOnClick) {
	                this._closurePrevented = true;
	            }
	        },
	
	        _checkActiveElement: function(e) {
	            var that = this,
	                hoverItem = $(e ? e.currentTarget : this._hoverItem()),
	                target = that._findRootParent(hoverItem)[0];
	
	            if (!this._closurePrevented) {
	                setTimeout(function() {
	                    if (!document.hasFocus() || (!contains(target, kendo._activeElement()) && e && !contains(target, e.currentTarget))) {
	                        that.close(target);
	                    }
	                }, 0);
	            }
	
	            this._closurePrevented = false;
	        },
	
	        _removeHoverItem: function() {
	            var oldHoverItem = this._hoverItem();
	
	            if (oldHoverItem && oldHoverItem.hasClass(FOCUSEDSTATE)) {
	                oldHoverItem.removeClass(FOCUSEDSTATE);
	                this._oldHoverItem = null;
	            }
	        },
	
	        _updateClasses: function() {
	            var element = this.element,
	                items;
	
	            element.addClass("k-widget k-reset k-header " + MENU).addClass(MENU + "-" + this.options.orientation);
	
	            element.find("li > ul")
	                   .addClass("k-group")
	                   .attr("role", "menu")
	                   .attr("aria-hidden", element.is(":visible"))
	                   .end()
	                   .find("li > div")
	                   .addClass("k-content")
	                   .attr("tabindex", "-1"); // Capture the focus before the Menu
	
	            items = element.find("> li,.k-group > li");
	
	            items.each(function () {
	                updateItemClasses(this);
	            });
	        },
	
	        _mouseenter: function (e) {
	            var that = this,
	                element = $(e.currentTarget),
	                hasChildren = (element.children(".k-animation-container").length || element.children(groupSelector).length);
	
	            if (e.delegateTarget != element.parents(".k-menu")[0]) {
	                return;
	            }
	
	            if ((!that.options.openOnClick || that.clicked) && !touch) {
	                if (!contains(e.currentTarget, e.relatedTarget) && hasChildren) {
	                    that.open(element);
	                }
	            }
	
	            if (that.options.openOnClick && that.clicked || mobile) {
	                element.siblings().each(proxy(function (_, sibling) {
	                    that.close(sibling, true);
	                }, that));
	            }
	        },
	
	        _mouseleave: function (e) {
	            var that = this,
	                element = $(e.currentTarget),
	                hasChildren = (element.children(".k-animation-container").length || element.children(groupSelector).length);
	
	            if (element.parentsUntil(".k-animation-container", ".k-list-container,.k-calendar-container")[0]) {
	                e.stopImmediatePropagation();
	                return;
	            }
	
	            if (!that.options.openOnClick && !touch && !((pointers || msPointers) &&
	                e.originalEvent.pointerType == e.originalEvent.MSPOINTER_TYPE_TOUCH) &&
	                !contains(e.currentTarget, e.relatedTarget || e.target) && hasChildren) {
	                    that.close(element);
	            }
	        },
	
	        _click: function (e) {
	            var that = this, openHandle,
	                options = that.options,
	                target = $(kendo.eventTarget(e)),
	                nodeName = target[0] ? target[0].nodeName.toUpperCase() : "",
	                formNode = (nodeName == "INPUT" || nodeName == "SELECT" || nodeName == "BUTTON" || nodeName == "LABEL"),
	                link = target.closest("." + LINK),
	                element = target.closest(allItemsSelector),
	                href = link.attr("href"), childGroup, childGroupVisible,
	                isLink = (!!href && href !== $("<a href='#' />").attr("href"));
	
	            if (!options.openOnClick && element.children(templateSelector)[0]) {
	                return;
	            }
	
	            if (element.hasClass(DISABLEDSTATE)) {
	                e.preventDefault();
	                return;
	            }
	
	            if (!e.handled && that.trigger(SELECT, { item: element[0] }) && !formNode) { // We shouldn't stop propagation and shoudn't prevent form elements.
	                e.preventDefault();
	            }
	
	            e.handled = true;
	
	            childGroup = element.children(popupSelector);
	            childGroupVisible = childGroup.is(":visible");
	
	            if (options.closeOnClick && !isLink && (!childGroup.length || (options.openOnClick && childGroupVisible))) {
	                element.removeClass(HOVERSTATE).css("height"); // Force refresh for Chrome
	                that._oldHoverItem = that._findRootParent(element);
	                that.close(link.parentsUntil(that.element, allItemsSelector));
	                that.clicked = false;
	                if ("MSPointerUp".indexOf(e.type) != -1) {
	                    e.preventDefault();
	                }
	                return;
	            }
	
	            if (isLink && e.enterKey) {
	                link[0].click();
	            }
	
	            if ((!element.parent().hasClass(MENU) || !options.openOnClick) && !kendo.support.touch) {
	                return;
	            }
	
	            if (!isLink && !formNode) {
	                e.preventDefault();
	            }
	
	            that.clicked = true;
	            openHandle = childGroup.is(":visible") ? CLOSE : OPEN;
	            if (!options.closeOnClick && openHandle == CLOSE) {
	                return;
	            }
	            that[openHandle](element);
	        },
	
	        _documentClick: function (e) {
	            if (contains(this.element[0], e.target)) {
	                return;
	            }
	
	            this.clicked = false;
	        },
	
	        _focus: function (e) {
	            var that = this,
	                target = e.target,
	                hoverItem = that._hoverItem(),
	                active = activeElement();
	
	            if (target != that.wrapper[0] && !$(target).is(":kendoFocusable")) {
	                e.stopPropagation();
	                $(target).closest(".k-content").closest(".k-group").closest(".k-item").addClass(FOCUSEDSTATE);
	                that.wrapper.focus();
	                return;
	            }
	
	            if (active === e.currentTarget) {
	                if (hoverItem.length) {
	                    that._moveHover([], hoverItem);
	                } else if (!that._oldHoverItem) {
	                    that._moveHover([], that.wrapper.children().first());
	                }
	            }
	        },
	
	        _keydown: function (e) {
	            var that = this,
	                key = e.keyCode,
	                hoverItem = that._oldHoverItem,
	                target,
	                belongsToVertical,
	                hasChildren,
	                isRtl = kendo.support.isRtl(that.wrapper);
	
	            if (e.target != e.currentTarget && key != keys.ESC) {
	                return;
	            }
	
	            if (!hoverItem) {
	                hoverItem  = that._oldHoverItem = that._hoverItem();
	            }
	
	            belongsToVertical = that._itemBelongsToVertival(hoverItem);
	            hasChildren = that._itemHasChildren(hoverItem);
	
	            if (key == keys.RIGHT) {
	                target = that[isRtl ? "_itemLeft" : "_itemRight"](hoverItem, belongsToVertical, hasChildren);
	            } else if (key == keys.LEFT) {
	                target = that[isRtl ? "_itemRight" : "_itemLeft"](hoverItem, belongsToVertical, hasChildren);
	            } else if (key == keys.DOWN) {
	                target = that._itemDown(hoverItem, belongsToVertical, hasChildren);
	            } else if (key == keys.UP) {
	                target = that._itemUp(hoverItem, belongsToVertical, hasChildren);
	            } else if (key == keys.ESC) {
	                target = that._itemEsc(hoverItem, belongsToVertical);
	            } else if (key == keys.ENTER || key == keys.SPACEBAR) {
	                target = hoverItem.children(".k-link");
	                if (target.length > 0) {
	                    that._click({ target: target[0], preventDefault: function () {}, enterKey: true });
	                    that._moveHover(hoverItem, that._findRootParent(hoverItem));
	                }
	            } else if (key == keys.TAB) {
	                target = that._findRootParent(hoverItem);
	                that._moveHover(hoverItem, target);
	                that._checkActiveElement();
	                return;
	            }
	
	            if (target && target[0]) {
	                e.preventDefault();
	                e.stopPropagation(); // needed to handle ESC in column menu only when a root item is focused
	            }
	        },
	
	        _hoverItem: function() {
	            return this.wrapper.find(".k-item.k-state-hover,.k-item.k-state-focused").filter(":visible");
	        },
	
	        _itemBelongsToVertival: function (item) {
	            var menuIsVertical = this.wrapper.hasClass("k-menu-vertical");
	
	            if (!item.length) {
	                return menuIsVertical;
	            }
	            return item.parent().hasClass("k-group") || menuIsVertical;
	        },
	
	        _itemHasChildren: function (item) {
	            if (!item.length) {
	                return false;
	            }
	            return item.children("ul.k-group, div.k-animation-container").length > 0;
	        },
	
	        _moveHover: function (item, nextItem) {
	            var that = this,
	                id = that._ariaId;
	
	            if (item.length && nextItem.length) {
	                item.removeClass(FOCUSEDSTATE);
	            }
	
	            if (nextItem.length) {
	                if (nextItem[0].id) {
	                    id = nextItem[0].id;
	                }
	
	                nextItem.addClass(FOCUSEDSTATE);
	                that._oldHoverItem = nextItem;
	
	                if (id) {
	                    that.element.removeAttr("aria-activedescendant");
	                    $("#" + id).removeAttr("id");
	                    nextItem.attr("id", id);
	                    that.element.attr("aria-activedescendant", id);
	                }
	            }
	        },
	
	        _findRootParent: function (item) {
	            if (item.parent().hasClass("k-menu")) {
	                return item;
	            } else {
	                return item.parentsUntil(".k-menu", "li.k-item").last();
	            }
	        },
	
	        _isRootItem: function (item) {
	            return item.parent().hasClass("k-menu");
	        },
	
	        _itemRight: function (item, belongsToVertical, hasChildren) {
	            var that = this,
	                nextItem,
	                parentItem;
	
	            if (item.hasClass(DISABLEDSTATE)) {
	                return;
	            }
	
	            if (!belongsToVertical) {
	                nextItem = item.nextAll(nextSelector);
	                if (!nextItem.length) {
	                    nextItem = item.prevAll(lastSelector);
	                }
	            } else if (hasChildren) {
	                that.open(item);
	                nextItem = item.find(".k-group").children().first();
	            } else if (that.options.orientation == "horizontal") {
	                parentItem = that._findRootParent(item);
	                that.close(parentItem);
	                nextItem = parentItem.nextAll(nextSelector);
	            }
	
	            if (nextItem && !nextItem.length) {
	                nextItem = that.wrapper.children(".k-item").first();
	            } else if (!nextItem) {
	                nextItem = [];
	            }
	
	            that._moveHover(item, nextItem);
	            return nextItem;
	        },
	
	        _itemLeft: function (item, belongsToVertical) {
	            var that = this,
	                nextItem;
	
	            if (!belongsToVertical) {
	                nextItem = item.prevAll(nextSelector);
	                if (!nextItem.length) {
	                    nextItem = item.nextAll(lastSelector);
	                }
	            } else {
	                nextItem = item.parent().closest(".k-item");
	                that.close(nextItem);
	                if (that._isRootItem(nextItem) && that.options.orientation == "horizontal") {
	                    nextItem = nextItem.prevAll(nextSelector);
	                }
	            }
	
	            if (!nextItem.length) {
	                nextItem = that.wrapper.children(".k-item").last();
	            }
	
	            that._moveHover(item, nextItem);
	            return nextItem;
	        },
	
	        _itemDown: function (item, belongsToVertical, hasChildren) {
	            var that = this,
	                nextItem;
	
	            if (!belongsToVertical) {
	                if (!hasChildren || item.hasClass(DISABLEDSTATE)) {
	                    return;
	                } else {
	                    that.open(item);
	                    nextItem = item.find(".k-group").children().first();
	                }
	            } else {
	                nextItem = item.nextAll(nextSelector);
	            }
	
	            if (!nextItem.length && item.length) {
	                nextItem = item.parent().children().first();
	            } else if (!item.length) {
	                nextItem = that.wrapper.children(".k-item").first();
	            }
	
	            that._moveHover(item, nextItem);
	            return nextItem;
	        },
	
	        _itemUp: function (item, belongsToVertical) {
	            var that = this,
	                nextItem;
	
	            if (!belongsToVertical) {
	                return;
	            } else {
	                nextItem = item.prevAll(nextSelector);
	            }
	
	            if (!nextItem.length && item.length) {
	                nextItem = item.parent().children().last();
	            } else if (!item.length) {
	                nextItem = that.wrapper.children(".k-item").last();
	            }
	
	            that._moveHover(item, nextItem);
	            return nextItem;
	        },
	
	        _itemEsc: function (item, belongsToVertical) {
	            var that = this,
	                nextItem;
	
	            if (!belongsToVertical) {
	                return item;
	            } else {
	                nextItem = item.parent().closest(".k-item");
	                that.close(nextItem);
	                that._moveHover(item, nextItem);
	            }
	
	            return nextItem;
	        },
	
	        _focusHandler: function (e) {
	            var that = this,
	                item = $(kendo.eventTarget(e)).closest(allItemsSelector);
	
	            setTimeout(function () {
	                that._moveHover([], item);
	                if (item.children(".k-content")[0]) {
	                    item.parent().closest(".k-item").removeClass(FOCUSEDSTATE);
	                }
	            }, 200);
	        },
	
	        _animations: function(options) {
	            if (options && ("animation" in options) && !options.animation) {
	                options.animation = { open: { effects: {} }, close: { hide: true, effects: {} } };
	            }
	        }
	
	    });
	
	    // client-side rendering
	    extend(Menu, {
	        renderItem: function (options) {
	            options = extend({ menu: {}, group: {} }, options);
	
	            var empty = templates.empty,
	                item = options.item;
	
	            return templates.item(extend(options, {
	                image: item.imageUrl ? templates.image : empty,
	                sprite: item.spriteCssClass ? templates.sprite : empty,
	                itemWrapper: templates.itemWrapper,
	                renderContent: Menu.renderContent,
	                arrow: item.items || item.content ? templates.arrow : empty,
	                subGroup: Menu.renderGroup
	            }, rendering));
	        },
	
	        renderGroup: function (options) {
	            return templates.group(extend({
	                renderItems: function(options) {
	                    var html = "",
	                        i = 0,
	                        items = options.items,
	                        len = items ? items.length : 0,
	                        group = extend({ length: len }, options.group);
	
	                    for (; i < len; i++) {
	                        html += Menu.renderItem(extend(options, {
	                            group: group,
	                            item: extend({ index: i }, items[i])
	                        }));
	                    }
	
	                    return html;
	                }
	            }, options, rendering));
	        },
	
	        renderContent: function (options) {
	            return templates.content(extend(options, rendering));
	        }
	    });
	
	    kendo.ui.plugin(Menu);
	
	})(window.kendo.jQuery);
	
	return window.kendo;
	
	}, __webpack_require__(230));
	


/***/ },

/***/ 243:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(229) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){
	
	var __meta__ = {
	    id: "popup",
	    name: "Pop-up",
	    category: "framework",
	    depends: [ "core" ],
	    advanced: true
	};
	
	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        support = kendo.support,
	        getOffset = kendo.getOffset,
	        activeElement = kendo._activeElement,
	        OPEN = "open",
	        CLOSE = "close",
	        DEACTIVATE = "deactivate",
	        ACTIVATE = "activate",
	        CENTER = "center",
	        LEFT = "left",
	        RIGHT = "right",
	        TOP = "top",
	        BOTTOM = "bottom",
	        ABSOLUTE = "absolute",
	        HIDDEN = "hidden",
	        BODY = "body",
	        LOCATION = "location",
	        POSITION = "position",
	        VISIBLE = "visible",
	        EFFECTS = "effects",
	        ACTIVE = "k-state-active",
	        ACTIVEBORDER = "k-state-border",
	        ACTIVEBORDERREGEXP = /k-state-border-(\w+)/,
	        ACTIVECHILDREN = ".k-picker-wrap, .k-dropdown-wrap, .k-link",
	        MOUSEDOWN = "down",
	        WINDOW = $(window),
	        DOCUMENT_ELEMENT = $(document.documentElement),
	        RESIZE_SCROLL = "resize scroll",
	        cssPrefix = support.transitions.css,
	        TRANSFORM = cssPrefix + "transform",
	        extend = $.extend,
	        NS = ".kendoPopup",
	        styles = ["font-size",
	                  "font-family",
	                  "font-stretch",
	                  "font-style",
	                  "font-weight",
	                  "line-height"];
	
	    function contains(container, target) {
	        return container === target || $.contains(container, target);
	    }
	
	    var Popup = Widget.extend({
	        init: function(element, options) {
	            var that = this, parentPopup;
	
	            options = options || {};
	
	            if (options.isRtl) {
	                options.origin = options.origin || BOTTOM + " " + RIGHT;
	                options.position = options.position || TOP + " " + RIGHT;
	            }
	
	            Widget.fn.init.call(that, element, options);
	
	            element = that.element;
	            options = that.options;
	
	            that.collisions = options.collision ? options.collision.split(" ") : [];
	
	            if (that.collisions.length === 1) {
	                that.collisions.push(that.collisions[0]);
	            }
	
	            parentPopup = $(that.options.anchor).closest(".k-popup,.k-group").filter(":not([class^=km-])"); // When popup is in another popup, make it relative.
	            options.appendTo = $($(options.appendTo)[0] || parentPopup[0] || BODY);
	
	            that.element.hide()
	                .addClass("k-popup k-group k-reset")
	                .toggleClass("k-rtl", !!options.isRtl)
	                .css({ position : ABSOLUTE })
	                .appendTo(options.appendTo)
	                .on("mouseenter" + NS, function() {
	                    that._hovered = true;
	                })
	                .on("mouseleave" + NS, function() {
	                    that._hovered = false;
	                });
	
	            that.wrapper = $();
	
	            if (options.animation === false) {
	                options.animation = { open: { effects: {} }, close: { hide: true, effects: {} } };
	            }
	
	            extend(options.animation.open, {
	                complete: function() {
	                    that.wrapper.css({ overflow: VISIBLE }); // Forcing refresh causes flickering in mobile.
	                    that.trigger(ACTIVATE);
	                }
	            });
	
	            extend(options.animation.close, {
	                complete: function() {
	                    that.wrapper.hide();
	
	                    var location = that.wrapper.data(LOCATION),
	                        anchor = $(options.anchor),
	                        direction, dirClass;
	
	                    if (location) {
	                        that.wrapper.css(location);
	                    }
	
	                    if (options.anchor != BODY) {
	                        direction = (anchor[0].className.match(ACTIVEBORDERREGEXP) || ["", "down"])[1];
	                        dirClass = ACTIVEBORDER + "-" + direction;
	
	                        anchor
	                            .removeClass(dirClass)
	                            .children(ACTIVECHILDREN)
	                            .removeClass(ACTIVE)
	                            .removeClass(dirClass);
	
	                        element.removeClass(ACTIVEBORDER + "-" + kendo.directions[direction].reverse);
	                    }
	
	                    that._closing = false;
	                    that.trigger(DEACTIVATE);
	                }
	            });
	
	            that._mousedownProxy = function(e) {
	                that._mousedown(e);
	            };
	
	            that._resizeProxy = function(e) {
	                that._resize(e);
	            };
	
	            if (options.toggleTarget) {
	                $(options.toggleTarget).on(options.toggleEvent + NS, $.proxy(that.toggle, that));
	            }
	        },
	
	        events: [
	            OPEN,
	            ACTIVATE,
	            CLOSE,
	            DEACTIVATE
	        ],
	
	        options: {
	            name: "Popup",
	            toggleEvent: "click",
	            origin: BOTTOM + " " + LEFT,
	            position: TOP + " " + LEFT,
	            anchor: BODY,
	            collision: "flip fit",
	            viewport: window,
	            copyAnchorStyles: true,
	            autosize: false,
	            modal: false,
	            animation: {
	                open: {
	                    effects: "slideIn:down",
	                    transition: true,
	                    duration: 200
	                },
	                close: { // if close animation effects are defined, they will be used instead of open.reverse
	                    duration: 100,
	                    hide: true
	                }
	            }
	        },
	
	        destroy: function() {
	            var that = this,
	                options = that.options,
	                element = that.element.off(NS),
	                parent;
	
	            Widget.fn.destroy.call(that);
	
	            if (options.toggleTarget) {
	                $(options.toggleTarget).off(NS);
	            }
	
	            if (!options.modal) {
	                DOCUMENT_ELEMENT.unbind(MOUSEDOWN, that._mousedownProxy);
	                WINDOW.unbind(RESIZE_SCROLL, that._resizeProxy);
	            }
	
	            kendo.destroy(that.element.children());
	            element.removeData();
	
	            if (options.appendTo[0] === document.body) {
	                parent = element.parent(".k-animation-container");
	
	                if (parent[0]) {
	                    parent.remove();
	                } else {
	                    element.remove();
	                }
	            }
	        },
	
	        open: function(x, y) {
	            var that = this,
	                fixed = { isFixed: !isNaN(parseInt(y,10)), x: x, y: y },
	                element = that.element,
	                options = that.options,
	                direction = "down",
	                animation, wrapper,
	                anchor = $(options.anchor),
	                mobile = element[0] && element.hasClass("km-widget");
	
	            if (!that.visible()) {
	                if (options.copyAnchorStyles) {
	                    if (mobile && styles[0] == "font-size") {
	                        styles.shift();
	                    }
	                    element.css(kendo.getComputedStyles(anchor[0], styles));
	                }
	
	                if (element.data("animating") || that.trigger(OPEN)) {
	                    return;
	                }
	
	                if (!options.modal) {
	                    DOCUMENT_ELEMENT.unbind(MOUSEDOWN, that._mousedownProxy)
	                                .bind(MOUSEDOWN, that._mousedownProxy);
	
	                    // this binding hangs iOS in editor
	                    if (!(support.mobileOS.ios || support.mobileOS.android)) {
	                        WINDOW.unbind(RESIZE_SCROLL, that._resizeProxy)
	                              .bind(RESIZE_SCROLL, that._resizeProxy);
	                    }
	                }
	
	                that.wrapper = wrapper = kendo.wrap(element, options.autosize)
	                                        .css({
	                                            overflow: HIDDEN,
	                                            display: "block",
	                                            position: ABSOLUTE
	                                        });
	
	                if (support.mobileOS.android) {
	                    wrapper.add(anchor).css(TRANSFORM, "translatez(0)"); // Android is VERY slow otherwise. Should be tested in other droids as well since it may cause blur.
	                }
	
	                wrapper.css(POSITION);
	
	                if ($(options.appendTo)[0] == document.body) {
	                    wrapper.css(TOP, "-10000px");
	                }
	
	                animation = extend(true, {}, options.animation.open);
	                that.flipped = that._position(fixed);
	                animation.effects = kendo.parseEffects(animation.effects, that.flipped);
	
	                direction = animation.effects.slideIn ? animation.effects.slideIn.direction : direction;
	
	                if (options.anchor != BODY) {
	                    var dirClass = ACTIVEBORDER + "-" + direction;
	
	                    element.addClass(ACTIVEBORDER + "-" + kendo.directions[direction].reverse);
	
	                    anchor
	                        .addClass(dirClass)
	                        .children(ACTIVECHILDREN)
	                        .addClass(ACTIVE)
	                        .addClass(dirClass);
	                }
	
	                element.data(EFFECTS, animation.effects)
	                       .kendoStop(true)
	                       .kendoAnimate(animation);
	            }
	        },
	
	        toggle: function() {
	            var that = this;
	
	            that[that.visible() ? CLOSE : OPEN]();
	        },
	
	        visible: function() {
	            return this.element.is(":" + VISIBLE);
	        },
	
	        close: function() {
	            var that = this,
	                options = that.options, wrap,
	                animation, openEffects, closeEffects;
	
	            if (that.visible()) {
	                wrap = (that.wrapper[0] ? that.wrapper : kendo.wrap(that.element).hide());
	
	                if (that._closing || that.trigger(CLOSE)) {
	                    return;
	                }
	
	                // Close all inclusive popups.
	                that.element.find(".k-popup").each(function () {
	                    var that = $(this),
	                        popup = that.data("kendoPopup");
	
	                    if (popup) {
	                        popup.close();
	                    }
	                });
	
	                DOCUMENT_ELEMENT.unbind(MOUSEDOWN, that._mousedownProxy);
	                WINDOW.unbind(RESIZE_SCROLL, that._resizeProxy);
	
	                animation = extend(true, {}, options.animation.close);
	                openEffects = that.element.data(EFFECTS);
	                closeEffects = animation.effects;
	
	                if (!closeEffects && !kendo.size(closeEffects) && openEffects && kendo.size(openEffects)) {
	                    animation.effects = openEffects;
	                    animation.reverse = true;
	                }
	
	                that._closing = true;
	
	                that.element.kendoStop(true);
	                wrap.css({ overflow: HIDDEN }); // stop callback will remove hidden overflow
	                that.element.kendoAnimate(animation);
	            }
	        },
	
	        _resize: function(e) {
	            var that = this;
	
	            if (e.type === "resize") {
	                clearTimeout(that._resizeTimeout);
	                that._resizeTimeout = setTimeout(function() {
	                    that._position();
	                    that._resizeTimeout = null;
	                }, 50);
	            } else {
	                if (!that._hovered && !contains(that.element[0], activeElement())) {
	                    that.close();
	                }
	            }
	        },
	
	        _mousedown: function(e) {
	            var that = this,
	                container = that.element[0],
	                options = that.options,
	                anchor = $(options.anchor)[0],
	                toggleTarget = options.toggleTarget,
	                target = kendo.eventTarget(e),
	                popup = $(target).closest(".k-popup"),
	                mobile = popup.parent().parent(".km-shim").length;
	
	            popup = popup[0];
	            if (!mobile && popup && popup !== that.element[0]){
	                return;
	            }
	
	            // This MAY result in popup not closing in certain cases.
	            if ($(e.target).closest("a").data("rel") === "popover") {
	                return;
	            }
	
	            if (!contains(container, target) && !contains(anchor, target) && !(toggleTarget && contains($(toggleTarget)[0], target))) {
	                that.close();
	            }
	        },
	
	        _fit: function(position, size, viewPortSize) {
	            var output = 0;
	
	            if (position + size > viewPortSize) {
	                output = viewPortSize - (position + size);
	            }
	
	            if (position < 0) {
	                output = -position;
	            }
	
	            return output;
	        },
	
	        _flip: function(offset, size, anchorSize, viewPortSize, origin, position, boxSize) {
	            var output = 0;
	                boxSize = boxSize || size;
	
	            if (position !== origin && position !== CENTER && origin !== CENTER) {
	                if (offset + boxSize > viewPortSize) {
	                    output += -(anchorSize + size);
	                }
	
	                if (offset + output < 0) {
	                    output += anchorSize + size;
	                }
	            }
	            return output;
	        },
	
	        _position: function(fixed) {
	            var that = this,
	                element = that.element.css(POSITION, ""),
	                wrapper = that.wrapper,
	                options = that.options,
	                viewport = $(options.viewport),
	                viewportOffset = viewport.offset(),
	                anchor = $(options.anchor),
	                origins = options.origin.toLowerCase().split(" "),
	                positions = options.position.toLowerCase().split(" "),
	                collisions = that.collisions,
	                zoomLevel = support.zoomLevel(),
	                siblingContainer, parents,
	                parentZIndex, zIndex = 10002,
	                isWindow = !!((viewport[0] == window) && window.innerWidth && (zoomLevel <= 1.02)),
	                idx = 0, length, viewportWidth, viewportHeight;
	
	            // $(window).height() uses documentElement to get the height
	            viewportWidth = isWindow ? window.innerWidth : viewport.width();
	            viewportHeight = isWindow ? window.innerHeight : viewport.height();
	
	            siblingContainer = anchor.parents().filter(wrapper.siblings());
	
	            if (siblingContainer[0]) {
	                parentZIndex = Number($(siblingContainer).css("zIndex"));
	                if (parentZIndex) {
	                    zIndex = parentZIndex + 1;
	                } else {
	                    parents = anchor.parentsUntil(siblingContainer);
	                    for (length = parents.length; idx < length; idx++) {
	                        parentZIndex = Number($(parents[idx]).css("zIndex"));
	                        if (parentZIndex && zIndex < parentZIndex) {
	                            zIndex = parentZIndex + 1;
	                        }
	                    }
	                }
	            }
	
	            wrapper.css("zIndex", zIndex);
	
	            if (fixed && fixed.isFixed) {
	                wrapper.css({ left: fixed.x, top: fixed.y });
	            } else {
	                wrapper.css(that._align(origins, positions));
	            }
	
	            var pos = getOffset(wrapper, POSITION, anchor[0] === wrapper.offsetParent()[0]),
	                offset = getOffset(wrapper),
	                anchorParent = anchor.offsetParent().parent(".k-animation-container,.k-popup,.k-group"); // If the parent is positioned, get the current positions
	
	            if (anchorParent.length) {
	                pos = getOffset(wrapper, POSITION, true);
	                offset = getOffset(wrapper);
	            }
	
	            if (viewport[0] === window) {
	                offset.top -= (window.pageYOffset || document.documentElement.scrollTop || 0);
	                offset.left -= (window.pageXOffset || document.documentElement.scrollLeft || 0);
	            }
	            else {
	                offset.top -= viewportOffset.top;
	                offset.left -= viewportOffset.left;
	            }
	
	            if (!that.wrapper.data(LOCATION)) { // Needed to reset the popup location after every closure - fixes the resize bugs.
	                wrapper.data(LOCATION, extend({}, pos));
	            }
	
	            var offsets = extend({}, offset),
	                location = extend({}, pos);
	
	            if (collisions[0] === "fit") {
	                location.top += that._fit(offsets.top, wrapper.outerHeight(), viewportHeight / zoomLevel);
	            }
	
	            if (collisions[1] === "fit") {
	                location.left += that._fit(offsets.left, wrapper.outerWidth(), viewportWidth / zoomLevel);
	            }
	
	            var flipPos = extend({}, location);
	
	            if (collisions[0] === "flip") {
	                location.top += that._flip(offsets.top, element.outerHeight(), anchor.outerHeight(), viewportHeight / zoomLevel, origins[0], positions[0], wrapper.outerHeight());
	            }
	
	            if (collisions[1] === "flip") {
	                location.left += that._flip(offsets.left, element.outerWidth(), anchor.outerWidth(), viewportWidth / zoomLevel, origins[1], positions[1], wrapper.outerWidth());
	            }
	
	            element.css(POSITION, ABSOLUTE);
	            wrapper.css(location);
	
	            return (location.left != flipPos.left || location.top != flipPos.top);
	        },
	
	        _align: function(origin, position) {
	            var that = this,
	                element = that.wrapper,
	                anchor = $(that.options.anchor),
	                verticalOrigin = origin[0],
	                horizontalOrigin = origin[1],
	                verticalPosition = position[0],
	                horizontalPosition = position[1],
	                anchorOffset = getOffset(anchor),
	                appendTo = $(that.options.appendTo),
	                appendToOffset,
	                width = element.outerWidth(),
	                height = element.outerHeight(),
	                anchorWidth = anchor.outerWidth(),
	                anchorHeight = anchor.outerHeight(),
	                top = anchorOffset.top,
	                left = anchorOffset.left,
	                round = Math.round;
	
	            if (appendTo[0] != document.body) {
	                appendToOffset = getOffset(appendTo);
	                top -= appendToOffset.top;
	                left -= appendToOffset.left;
	            }
	
	
	            if (verticalOrigin === BOTTOM) {
	                top += anchorHeight;
	            }
	
	            if (verticalOrigin === CENTER) {
	                top += round(anchorHeight / 2);
	            }
	
	            if (verticalPosition === BOTTOM) {
	                top -= height;
	            }
	
	            if (verticalPosition === CENTER) {
	                top -= round(height / 2);
	            }
	
	            if (horizontalOrigin === RIGHT) {
	                left += anchorWidth;
	            }
	
	            if (horizontalOrigin === CENTER) {
	                left += round(anchorWidth / 2);
	            }
	
	            if (horizontalPosition === RIGHT) {
	                left -= width;
	            }
	
	            if (horizontalPosition === CENTER) {
	                left -= round(width / 2);
	            }
	
	            return {
	                top: top,
	                left: left
	            };
	        }
	    });
	
	    ui.plugin(Popup);
	})(window.kendo.jQuery);
	
	return window.kendo;
	
	}, __webpack_require__(230));


/***/ },

/***/ 244:
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Customer = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _tabPanel = __webpack_require__(245);
	
	var _formToolbar = __webpack_require__(247);
	
	var _TextField = __webpack_require__(248);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class Customer
	 * @extends React.Component
	 */
	
	var Customer = exports.Customer = function (_React$Component) {
	    _inherits(Customer, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function Customer(args) {
	        _classCallCheck(this, Customer);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Customer).call(this, args));
	
	        _this.state = {
	            customer: {}
	        };
	        return _this;
	    }
	
	    _createClass(Customer, [{
	        key: 'changeValues',
	        value: function changeValues(value, field) {
	            var customer = this.state.customer;
	            customer[field] = value;
	            this.setState({ customer: customer });
	            console.log(this.state.customer);
	        }
	    }, {
	        key: 'saveCustomer',
	        value: function saveCustomer() {
	            var service = "http://localhost:19377/breeze/radix/";
	            var EntityManager = new breeze.EntityManager(service);
	            EntityManager.fetchMetadata().then(function () {
	                /* var customer = EntityManager.createEntity('Customers', this.state.customer);
	                 EntityManager.addEntity(customer);
	                 EntityManager.saveChanges();*/
	                var query = breeze.EntityQuery.from('Customers');
	                EntityManager.executeQuery(query).then(function (data) {
	                    console.log(data);
	                });
	            });
	            /* var data = this.state.customer;
	             $.ajax({
	                url: 'http://localhost:10946/api/customer/save',
	                data : data,
	                type: 'POST',
	                dataType: 'json',
	                crossDomain: true,
	                success: function (data) {
	                    //WriteResponses(data);
	                    console.log(data);
	                },
	                error: function (x, y, z) {
	                    alert(x + '\n' + y + '\n' + z);
	                }
	            });*/
	        }
	
	        /**
	         * @render
	         * @return {View} view
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            return _react2.default.createElement(
	                'div',
	                { style: { backgroundColor: '#F8F8F8', height: '100%' } },
	                _react2.default.createElement(_formToolbar.FormToolbar, { onSave: this.saveCustomer.bind(this) }),
	                _react2.default.createElement('div', { style: { height: 60, backgroundColor: '#FFF', borderBottom: 'solid 1px #D1D1D1' } }),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10, margin: 10, border: 'solid 1px #D1D1D1' } },
	                    _react2.default.createElement(
	                        'div',
	                        { style: { marginBottom: 6 } },
	                        _react2.default.createElement(_TextField.TextField, { value: this.state.customer.CustomerId, onChange: function onChange(value) {
	                                _this2.changeValues(value, 'CustomerId');
	                            }, label: 'CustomerId', width: 220, placeholder: '#CR256330' })
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { marginBottom: 6 } },
	                        _react2.default.createElement(_TextField.TextField, { value: this.state.customer.Name, onChange: function onChange(value) {
	                                _this2.changeValues(value, 'Name');
	                            }, label: 'Name', width: 420, placeholder: 'Customer Full Name' })
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(
	                                'div',
	                                { style: { borderBottom: 'dashed 1px #D1D1D1', paddingTop: 10, paddingBottom: 5, marginBottom: 10 } },
	                                'Address & Location'
	                            ),
	                            _react2.default.createElement(_TextField.TextField, { value: this.state.customer.Name, label: 'Address 1', width: 350, placeholder: 'Address' }),
	                            _react2.default.createElement(_TextField.TextField, { label: 'Address 2', width: 350, placeholder: 'Address' }),
	                            _react2.default.createElement(_TextField.TextField, { label: 'City', width: 300, placeholder: 'City' }),
	                            _react2.default.createElement(_TextField.TextField, { label: 'Country', width: 300, placeholder: 'Country' }),
	                            _react2.default.createElement(
	                                'div',
	                                { style: { borderBottom: 'dashed 1px #D1D1D1', paddingTop: 10, paddingBottom: 5, marginBottom: 10 } },
	                                'Phone & Fax'
	                            ),
	                            _react2.default.createElement(_TextField.TextField, { label: 'Phone', width: 230, placeholder: '+91952636633' }),
	                            _react2.default.createElement(_TextField.TextField, { label: 'Fax', width: 230, placeholder: '+91952636633' }),
	                            _react2.default.createElement(_TextField.TextField, { label: 'Mobile', width: 230, placeholder: '+91952636633' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 20 } },
	                            _react2.default.createElement(
	                                'div',
	                                { style: { borderBottom: 'dashed 1px #D1D1D1', paddingTop: 10, paddingBottom: 5, marginBottom: 10 } },
	                                'Email & Social Media'
	                            ),
	                            _react2.default.createElement(_TextField.TextField, { label: 'Email', placeholder: 'name@domain.com' }),
	                            _react2.default.createElement(_TextField.TextField, { label: 'Website', width: 350, placeholder: 'http://www.customerdomain.com' }),
	                            _react2.default.createElement(
	                                'div',
	                                { style: { borderBottom: 'dashed 1px #D1D1D1', paddingTop: 10, paddingBottom: 5, marginBottom: 10 } },
	                                'Other Details'
	                            ),
	                            _react2.default.createElement(_TextField.TextField, { label: 'Opening Balance', placeholder: 'name@domain.com' }),
	                            _react2.default.createElement(_TextField.TextField, { label: 'Credit Limit', width: 350, placeholder: 'http://www.customerdomain.com' })
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return Customer;
	}(_react2.default.Component);

/***/ },

/***/ 245:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Tab = exports.TabPanel = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	__webpack_require__(246);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class TabPanel
	 * @extends React.Component
	 */
	
	var TabPanel = exports.TabPanel = function (_React$Component) {
	    _inherits(TabPanel, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function TabPanel(props) {
	        _classCallCheck(this, TabPanel);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TabPanel).call(this));
	
	        _this.state = {
	            selectedIndex: 0,
	            items: []
	        };
	
	        if (props.children) {
	            props.children.map(function (item, index) {
	                _this.state.items.push(item);
	            });
	        }
	        return _this;
	    }
	
	    _createClass(TabPanel, [{
	        key: 'renderChildren',
	        value: function renderChildren() {
	            /*
	             * Create new children array
	             */
	            var children = new Array();
	
	            /*
	             * Transform childrens
	             */
	            this.props.children.map(function (child) {
	                children.push(child);
	            });
	
	            /*
	             * Return children
	             */
	            return children;
	        }
	
	        /**
	         * Calculate the childrens and create the tabs automatically
	         * @return {HtmlElement} component
	         */
	
	    }, {
	        key: 'renderTabStripes',
	        value: function renderTabStripes() {
	            var _this2 = this;
	
	            return _react2.default.createElement(
	                'ul',
	                { style: { paddingLeft: 30 }, className: 'p-list-inline p-tab-bar p-inset-panel', tabIndex: '-1' },
	                this.state.items.map(function (child, index) {
	                    var activeCls = _this2.state.selectedIndex == index ? "p-active" : "";
	                    return _react2.default.createElement(
	                        'li',
	                        { className: "p-tab " + activeCls, onClick: function onClick() {
	                                return _this2.onTabClick(index);
	                            } },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'p-title' },
	                            child.props.title
	                        ),
	                        _react2.default.createElement('i', { className: 'close-icon fa fa-close', onClick: function onClick(event) {
	                                event.stopPropagation();event.preventDefault();_this2.onTabClose(index);
	                            } })
	                    );
	                })
	            );
	        }
	
	        /**
	         * @eventhandler
	         * @param {Number} index
	         * @return {Void} undefined
	         */
	
	    }, {
	        key: 'onTabClick',
	        value: function onTabClick(index) {
	            this.setState({ selectedIndex: index });
	        }
	
	        /**
	         * @eventhandler
	         * @param {Number} index
	         * @return {Void} undefined
	         */
	
	    }, {
	        key: 'onTabClose',
	        value: function onTabClose(index) {
	            var items = this.state.items.splice(index, 1);
	            this.setState({ items: this.state.items });
	        }
	
	        /**
	         * Transforms child elements
	         * @return {HTMLDivElement} element
	         */
	
	    }, {
	        key: 'transformTabs',
	        value: function transformTabs() {
	            var _this3 = this;
	
	            return _react2.default.createElement(
	                'div',
	                { className: 'x-tabs-container' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'x-tabs-container-inner' },
	                    this.state.items.map(function (child, index) {
	                        var isActive = _this3.state.selectedIndex == index;
	                        return _react2.default.cloneElement(child, { isActive: isActive, key: index });
	                    })
	                )
	            );
	        }
	
	        /**
	         * @render
	         * @return {HTMLDivElement} container
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'p-tab-panel', style: this.props.style },
	                this.renderTabStripes(),
	                this.transformTabs()
	            );
	        }
	    }]);
	
	    return TabPanel;
	}(_react2.default.Component);
	
	/**
	 * @class Tab
	 * @extends React.Component
	 */
	
	var Tab = exports.Tab = function (_React$Component2) {
	    _inherits(Tab, _React$Component2);
	
	    /**
	     * @constructor
	     */
	
	    function Tab() {
	        _classCallCheck(this, Tab);
	
	        /**
	         * @state
	         */
	
	        var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(Tab).call(this));
	
	        _this4.state = {};
	        return _this4;
	    }
	
	    /**
	     * @render
	     * @return {HTMLDivElement} container
	     */
	
	    _createClass(Tab, [{
	        key: 'render',
	        value: function render() {
	            var cls = "p-tab-body";
	            if (this.props.isActive) cls += " p-active";
	            return _react2.default.createElement(
	                'div',
	                { className: cls },
	                this.props.children
	            );
	        }
	    }]);
	
	    return Tab;
	}(_react2.default.Component);

/***/ },

/***/ 246:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 247:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.FormToolbar = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class FormToolbar
	 * @extends React.Component
	 */
	
	var FormToolbar = exports.FormToolbar = function (_React$Component) {
	    _inherits(FormToolbar, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function FormToolbar() {
	        _classCallCheck(this, FormToolbar);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(FormToolbar).call(this));
	
	        _this.state = {};
	        return _this;
	    }
	
	    /**
	     * @render
	     * @return {HTMLDivElement} container
	     */
	
	    _createClass(FormToolbar, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'div',
	                    { className: 'p-toolbar' },
	                    _react2.default.createElement(
	                        'a',
	                        { className: 'p-toolbar-button' },
	                        _react2.default.createElement('i', { className: 'fa fa-th' }),
	                        _react2.default.createElement(
	                            'span',
	                            null,
	                            'Add New'
	                        )
	                    ),
	                    _react2.default.createElement('span', { className: 'p-toolbar-separator' }),
	                    _react2.default.createElement(
	                        'a',
	                        { className: 'p-toolbar-button' },
	                        _react2.default.createElement('i', { className: 'fa fa-pencil' }),
	                        _react2.default.createElement(
	                            'span',
	                            null,
	                            'Edit'
	                        )
	                    ),
	                    _react2.default.createElement('span', { className: 'p-toolbar-separator' }),
	                    _react2.default.createElement(
	                        'a',
	                        { className: 'p-toolbar-button', onClick: this.props.onSave },
	                        _react2.default.createElement('i', { className: 'fa fa-floppy-o' }),
	                        _react2.default.createElement(
	                            'span',
	                            null,
	                            'Save'
	                        )
	                    ),
	                    _react2.default.createElement('span', { className: 'p-toolbar-separator' }),
	                    _react2.default.createElement(
	                        'a',
	                        { className: 'p-toolbar-button' },
	                        _react2.default.createElement('i', { className: 'fa fa-times' }),
	                        _react2.default.createElement(
	                            'span',
	                            null,
	                            'Cancel'
	                        )
	                    ),
	                    _react2.default.createElement('span', { className: 'p-toolbar-separator' }),
	                    _react2.default.createElement(
	                        'a',
	                        { className: 'p-toolbar-button' },
	                        _react2.default.createElement('i', { className: 'fa fa-trash' }),
	                        _react2.default.createElement(
	                            'span',
	                            null,
	                            'Delete'
	                        )
	                    ),
	                    _react2.default.createElement('div', { style: { flex: 1 } }),
	                    _react2.default.createElement('input', { type: 'text' }),
	                    _react2.default.createElement(
	                        'a',
	                        { className: 'p-toolbar-button' },
	                        _react2.default.createElement('i', { className: 'fa fa-search' }),
	                        _react2.default.createElement(
	                            'span',
	                            null,
	                            'Search'
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'p-window-buttons' },
	                    _react2.default.createElement(
	                        'a',
	                        { className: 'p-button' },
	                        _react2.default.createElement('i', { className: 'fa fa-question' }),
	                        _react2.default.createElement(
	                            'span',
	                            null,
	                            'Help'
	                        )
	                    ),
	                    _react2.default.createElement('div', { style: { flex: 1 } }),
	                    _react2.default.createElement(
	                        'a',
	                        { className: 'p-button', style: { marginRight: 5 } },
	                        _react2.default.createElement('i', { className: 'fa fa-list' }),
	                        _react2.default.createElement(
	                            'span',
	                            null,
	                            'List'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'a',
	                        { className: 'p-button' },
	                        _react2.default.createElement('i', { className: 'fa fa-times' }),
	                        _react2.default.createElement(
	                            'span',
	                            null,
	                            'Close'
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return FormToolbar;
	}(_react2.default.Component);

/***/ },

/***/ 248:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.TextField = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	__webpack_require__(249);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class TextField
	 * @extends React.Component
	 */
	
	var TextField = exports.TextField = function (_React$Component) {
	    _inherits(TextField, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function TextField(args) {
	        _classCallCheck(this, TextField);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TextField).call(this, args));
	
	        _this.state = {};
	
	        _this.defaultLabelWidth = 100;
	        return _this;
	    }
	
	    _createClass(TextField, [{
	        key: 'onFocus',
	        value: function onFocus() {}
	    }, {
	        key: 'onBlur',
	        value: function onBlur() {}
	    }, {
	        key: 'onChange',
	        value: function onChange() {
	            var input = this.refs.inputEl;
	            if (this.props.onChange) {
	                this.props.onChange(input.value);
	            }
	        }
	
	        /**
	         * @render
	         * @return {View} view
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            var label = _react2.default.createElement(
	                'label',
	                { className: 'p-form-item-label', style: { width: this.props.labelWidth || this.defaultLabelWidth } },
	                _react2.default.createElement(
	                    'span',
	                    null,
	                    this.props.label
	                ),
	                _react2.default.createElement(
	                    'span',
	                    null,
	                    ':'
	                )
	            );
	            if (!this.props.label) label = null;
	            return _react2.default.createElement(
	                'div',
	                { className: 'p-form-item', style: { width: this.props.width } },
	                label,
	                _react2.default.createElement(
	                    'div',
	                    { className: 'p-form-item-body' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'p-form-trigger-wrap' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'p-form-text-wrap' },
	                            _react2.default.createElement('input', { className: 'p-form-text', ref: 'inputEl', onFocus: this.onFocus.bind(this), onChange: this.onChange.bind(this), value: this.props.value, placeholder: this.props.placeholder })
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return TextField;
	}(_react2.default.Component);

/***/ },

/***/ 249:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 250:
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Enquiry = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _detailPanel = __webpack_require__(251);
	
	var _formToolbar = __webpack_require__(247);
	
	var _TextField = __webpack_require__(248);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class Enquiry
	 * @extends React.Component
	 */
	
	var Enquiry = exports.Enquiry = function (_React$Component) {
	    _inherits(Enquiry, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function Enquiry(args) {
	        _classCallCheck(this, Enquiry);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Enquiry).call(this, args));
	
	        _this.state = {};
	        return _this;
	    }
	
	    /**
	     * @render
	     * @return {View} view
	     */
	
	    _createClass(Enquiry, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { style: { backgroundColor: '#F8F8F8', height: '100%' } },
	                _react2.default.createElement(_formToolbar.FormToolbar, null),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10, margin: 5, border: 'solid 1px #D1D1D1' } },
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Enquiry No', width: 200, placeholder: '0001' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Reference', width: 225, labelWidth: 70 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Created On', width: 200, labelWidth: 70, placeholder: 'dd-mm-yy' })
	                        )
	                    ),
	                    _react2.default.createElement(_TextField.TextField, { label: 'Customer', width: 435 }),
	                    _react2.default.createElement(_TextField.TextField, { label: 'Contact Name', width: 435 }),
	                    _react2.default.createElement(_TextField.TextField, { label: 'Project', width: 435 }),
	                    _react2.default.createElement(_TextField.TextField, { label: 'Executive', width: 435 }),
	                    _react2.default.createElement(_detailPanel.DetailPanel, null)
	                )
	            );
	        }
	    }]);
	
	    return Enquiry;
	}(_react2.default.Component);

/***/ },

/***/ 251:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DetailPanel = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class FormToolbar
	 * @extends React.Component
	 */
	
	var DetailPanel = exports.DetailPanel = function (_React$Component) {
	  _inherits(DetailPanel, _React$Component);
	
	  /**
	   * @constructor
	   */
	
	  function DetailPanel() {
	    _classCallCheck(this, DetailPanel);
	
	    /**
	     * @state
	     */
	
	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DetailPanel).call(this));
	
	    _this.state = {};
	    return _this;
	  }
	
	  /**
	   * @render
	   * @return {HTMLDivElement} container
	   */
	
	  _createClass(DetailPanel, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          'div',
	          { style: { border: 'solid 1px #D4d4D4', marginTop: 10, height: 250 } },
	          _react2.default.createElement(
	            'div',
	            { style: { backgroundImage: '-webkit-linear-gradient(top, #f3f3f3, #f3f3f3)', height: 30 } },
	            _react2.default.createElement(
	              'a',
	              { className: 'p-button', style: { marginLeft: 5, marginTop: 3 } },
	              _react2.default.createElement('i', { className: 'fa fa-plus' }),
	              _react2.default.createElement(
	                'span',
	                null,
	                'Add New'
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);
	
	  return DetailPanel;
	}(_react2.default.Component);

/***/ },

/***/ 252:
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Quotation = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _detailPanel = __webpack_require__(251);
	
	var _formToolbar = __webpack_require__(247);
	
	var _TextField = __webpack_require__(248);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class Quotation
	 * @extends React.Component
	 */
	
	var Quotation = exports.Quotation = function (_React$Component) {
	    _inherits(Quotation, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function Quotation(args) {
	        _classCallCheck(this, Quotation);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Quotation).call(this, args));
	
	        _this.state = {};
	        return _this;
	    }
	
	    /**
	     * @render
	     * @return {View} view
	     */
	
	    _createClass(Quotation, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { style: { backgroundColor: '#F8F8F8', height: '100%' } },
	                _react2.default.createElement(_formToolbar.FormToolbar, null),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10, margin: 5, border: 'solid 1px #D1D1D1' } },
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Number', width: 200, placeholder: '0001' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Sales Order', width: 225, labelWidth: 70 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Created On', width: 200, labelWidth: 70, placeholder: 'dd-mm-yy' })
	                        )
	                    ),
	                    _react2.default.createElement(_TextField.TextField, { label: 'Customer', width: 645 }),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Contact Name', width: 330 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Customer PO', width: 305, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Project', width: 330 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Executive', width: 305, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(_detailPanel.DetailPanel, null)
	                )
	            );
	        }
	    }]);
	
	    return Quotation;
	}(_react2.default.Component);

/***/ },

/***/ 253:
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.SalesOrder = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _detailPanel = __webpack_require__(251);
	
	var _formToolbar = __webpack_require__(247);
	
	var _TextField = __webpack_require__(248);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class SalesOrder
	 * @extends React.Component
	 */
	
	var SalesOrder = exports.SalesOrder = function (_React$Component) {
	    _inherits(SalesOrder, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function SalesOrder(args) {
	        _classCallCheck(this, SalesOrder);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SalesOrder).call(this, args));
	
	        _this.state = {};
	        return _this;
	    }
	
	    /**
	     * @render
	     * @return {View} view
	     */
	
	    _createClass(SalesOrder, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { style: { backgroundColor: '#F8F8F8', height: '100%' } },
	                _react2.default.createElement(_formToolbar.FormToolbar, null),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10, margin: 5, border: 'solid 1px #D1D1D1' } },
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Number', width: 200, placeholder: '0001' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Purchase No', width: 225, labelWidth: 100 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Created On', width: 200, labelWidth: 70, placeholder: 'dd-mm-yy' })
	                        )
	                    ),
	                    _react2.default.createElement(_TextField.TextField, { label: 'Customer', width: 645 }),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Contact Name', width: 330 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Quotation No', width: 305, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Project', width: 330 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Executive', width: 305, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Payment Term', width: 330 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Delivery Term', width: 305, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(_detailPanel.DetailPanel, null),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table', marginTop: 10 } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Freight', width: 200 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Customs', width: 200, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Total Amount', width: 200 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'GL Account', width: 200, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(_TextField.TextField, { label: 'Amount In Words', width: 410 })
	                )
	            );
	        }
	    }]);
	
	    return SalesOrder;
	}(_react2.default.Component);

/***/ },

/***/ 254:
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.DeliveryNote = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _detailPanel = __webpack_require__(251);
	
	var _formToolbar = __webpack_require__(247);
	
	var _TextField = __webpack_require__(248);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class SalesOrder
	 * @extends React.Component
	 */
	
	var DeliveryNote = exports.DeliveryNote = function (_React$Component) {
	    _inherits(DeliveryNote, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function DeliveryNote(args) {
	        _classCallCheck(this, DeliveryNote);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DeliveryNote).call(this, args));
	
	        _this.state = {};
	        return _this;
	    }
	
	    /**
	     * @render
	     * @return {View} view
	     */
	
	    _createClass(DeliveryNote, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { style: { backgroundColor: '#F8F8F8', height: '100%' } },
	                _react2.default.createElement(_formToolbar.FormToolbar, null),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10, margin: 5, border: 'solid 1px #D1D1D1' } },
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Number', width: 200, placeholder: '0001' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Sales Order', width: 225, labelWidth: 100 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Created On', width: 200, labelWidth: 70, placeholder: 'dd-mm-yy' })
	                        )
	                    ),
	                    _react2.default.createElement(_TextField.TextField, { label: 'Customer', width: 645 }),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Contact Name', width: 330 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Customer PO', width: 305, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Project', width: 330 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Executive', width: 305, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(_detailPanel.DetailPanel, null)
	                )
	            );
	        }
	    }]);
	
	    return DeliveryNote;
	}(_react2.default.Component);

/***/ },

/***/ 255:
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Invoice = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _detailPanel = __webpack_require__(251);
	
	var _formToolbar = __webpack_require__(247);
	
	var _TextField = __webpack_require__(248);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class SalesOrder
	 * @extends React.Component
	 */
	
	var Invoice = exports.Invoice = function (_React$Component) {
	    _inherits(Invoice, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function Invoice(args) {
	        _classCallCheck(this, Invoice);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Invoice).call(this, args));
	
	        _this.state = {};
	        return _this;
	    }
	
	    /**
	     * @render
	     * @return {View} view
	     */
	
	    _createClass(Invoice, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { style: { backgroundColor: '#F8F8F8', height: '100%' } },
	                _react2.default.createElement(_formToolbar.FormToolbar, null),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10, margin: 5, border: 'solid 1px #D1D1D1' } },
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Invoice No', width: 200, placeholder: '0001' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Delivery No', width: 225, labelWidth: 70 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Created On', width: 200, labelWidth: 70, placeholder: 'dd-mm-yy' })
	                        )
	                    ),
	                    _react2.default.createElement(_TextField.TextField, { label: 'Customer', width: 645 }),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Contact Name', width: 330 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Purchase No', width: 305, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Project', width: 330 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Executive', width: 305, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Payment Term', width: 330 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Delivery Term', width: 305, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(_detailPanel.DetailPanel, null),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table', marginTop: 10 } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Freight', width: 200 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Customs', width: 200, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Total Amount', width: 200 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'GL Account', width: 200, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(_TextField.TextField, { label: 'Amount In Words', width: 410 })
	                )
	            );
	        }
	    }]);
	
	    return Invoice;
	}(_react2.default.Component);

/***/ },

/***/ 256:
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.ProFormaInvoice = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _detailPanel = __webpack_require__(251);
	
	var _formToolbar = __webpack_require__(247);
	
	var _TextField = __webpack_require__(248);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class SalesOrder
	 * @extends React.Component
	 */
	
	var ProFormaInvoice = exports.ProFormaInvoice = function (_React$Component) {
	    _inherits(ProFormaInvoice, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function ProFormaInvoice(args) {
	        _classCallCheck(this, ProFormaInvoice);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ProFormaInvoice).call(this, args));
	
	        _this.state = {};
	        return _this;
	    }
	
	    /**
	     * @render
	     * @return {View} view
	     */
	
	    _createClass(ProFormaInvoice, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { style: { backgroundColor: '#F8F8F8', height: '100%' } },
	                _react2.default.createElement(_formToolbar.FormToolbar, null),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10, margin: 5, border: 'solid 1px #D1D1D1' } },
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Number', width: 200, placeholder: '0001' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Sales Order', width: 225, labelWidth: 100 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Created On', width: 200, labelWidth: 70, placeholder: 'dd-mm-yy' })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Customer', width: 330 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Purchase No', width: 305, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Contact Name', width: 330 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Quotation No', width: 305, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Project', width: 330 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Executive', width: 305, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Payment Term', width: 330 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Delivery Term', width: 305, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(_detailPanel.DetailPanel, null),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table', marginTop: 10 } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Freight', width: 200 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Customs', width: 200, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Total Amount', width: 200 })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'GL Account', width: 200, labelWidth: 80 })
	                        )
	                    ),
	                    _react2.default.createElement(_TextField.TextField, { label: 'Amount In Words', width: 410 })
	                )
	            );
	        }
	    }]);
	
	    return ProFormaInvoice;
	}(_react2.default.Component);

/***/ },

/***/ 257:
/***/ function(module, exports, __webpack_require__) {

	
	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.PurchaseOrder = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _detailPanel = __webpack_require__(251);
	
	var _formToolbar = __webpack_require__(247);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class SalesOrder
	 * @extends React.Component
	 */
	
	var PurchaseOrder = exports.PurchaseOrder = function (_React$Component) {
	    _inherits(PurchaseOrder, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function PurchaseOrder(args) {
	        _classCallCheck(this, PurchaseOrder);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PurchaseOrder).call(this, args));
	
	        _this.state = {};
	        return _this;
	    }
	
	    /**
	     * @render
	     * @return {View} view
	     */
	
	    _createClass(PurchaseOrder, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(_formToolbar.FormToolbar, null),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10 } },
	                    _react2.default.createElement(
	                        'div',
	                        { style: { marginBottom: 6 } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell', width: 100 } },
	                            'Number:'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell' } },
	                            _react2.default.createElement('input', { placeholder: '#0001', type: 'text', style: { height: 20, marginLeft: 5, width: 100 } })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell', width: 100, paddingLeft: 10 } },
	                            'Reference:'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell' } },
	                            _react2.default.createElement('input', { placeholder: '0001', type: 'text', style: { height: 20, marginTop: 5, width: 125 } })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell', width: 100, paddingLeft: 10 } },
	                            'Created On:'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell' } },
	                            _react2.default.createElement('input', { placeholder: 'dd-mm-yy', type: 'text', style: { height: 20, width: 125 } })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { marginBottom: 6 } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell', width: 105 } },
	                            'Vendor:'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell' } },
	                            _react2.default.createElement('input', { type: 'text', style: { height: 20, width: 575 } })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { marginBottom: 6 } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell', width: 98 } },
	                            'Contact:'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell' } },
	                            _react2.default.createElement('input', { type: 'text', style: { height: 20, marginLeft: 5, width: 230 } })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell', width: 100, paddingLeft: 10 } },
	                            'Project  :'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell' } },
	                            _react2.default.createElement('input', { type: 'text', style: { height: 20, width: 232 } })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { marginBottom: 6 } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell', width: 100 } },
	                            'Payment Terms:'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell' } },
	                            _react2.default.createElement('input', { type: 'text', style: { height: 20, marginLeft: 5, width: 230 } })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell', width: 100, paddingLeft: 10 } },
	                            'Delivery Terms:'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell' } },
	                            _react2.default.createElement('input', { type: 'text', style: { height: 20, width: 232 } })
	                        )
	                    ),
	                    _react2.default.createElement(_detailPanel.DetailPanel, null),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { marginBottom: 6 } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell', width: 100 } },
	                            'Transportation:'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell' } },
	                            _react2.default.createElement('input', { type: 'text', style: { height: 20, marginLeft: 5, width: 100 } })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell', width: 70, paddingLeft: 10 } },
	                            'Customs:'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell' } },
	                            _react2.default.createElement('input', { type: 'text', style: { height: 20, marginTop: 5, width: 125 } })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell', width: 100, paddingLeft: 38 } },
	                            'Delivery Point:'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell' } },
	                            _react2.default.createElement('input', { type: 'text', style: { height: 20, width: 125 } })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { marginBottom: 6 } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell', width: 100 } },
	                            'In Words:'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell' } },
	                            _react2.default.createElement('input', { type: 'text', style: { height: 20, marginLeft: 5, width: 308 } })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell', width: 100, paddingLeft: 38 } },
	                            'Total Amount:'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { display: 'table-cell' } },
	                            _react2.default.createElement('input', { type: 'text', style: { height: 20, width: 125 } })
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return PurchaseOrder;
	}(_react2.default.Component);

/***/ },

/***/ 258:
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Material = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _tabPanel = __webpack_require__(245);
	
	var _formToolbar = __webpack_require__(247);
	
	var _TextField = __webpack_require__(248);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class Material
	 * @extends React.Component
	 */
	
	var Material = exports.Material = function (_React$Component) {
	    _inherits(Material, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function Material(args) {
	        _classCallCheck(this, Material);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Material).call(this, args));
	
	        _this.state = {
	            material: {}
	        };
	        return _this;
	    }
	
	    _createClass(Material, [{
	        key: 'changeValues',
	        value: function changeValues(value, field) {
	            var material = this.state.material;
	            material[field] = value;
	            this.setState({ material: material });
	            //console.log(this.state.customer)
	        }
	    }, {
	        key: 'saveMaterial',
	        value: function saveMaterial() {
	            var service = "http://localhost:5107/breeze/Radix";
	            var EntityManager = new breeze.EntityManager(service);
	            var material = EntityManager.createEntity('Materials', this.state.material);
	            EntityManager.addEntity(material);
	            EntityManager.saveChanges();
	        }
	
	        /**
	         * @render
	         * @return {View} view
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            return _react2.default.createElement(
	                'div',
	                { style: { backgroundColor: '#F8F8F8', height: '100%' } },
	                _react2.default.createElement(_formToolbar.FormToolbar, { onSave: this.saveMaterial.bind(this) }),
	                _react2.default.createElement('div', { style: { height: 60, backgroundColor: '#FFF', borderBottom: 'solid 1px #D1D1D1' } }),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10, margin: 10, border: 'solid 1px #D1D1D1' } },
	                    _react2.default.createElement(
	                        'div',
	                        { style: { marginBottom: 6 } },
	                        _react2.default.createElement(_TextField.TextField, { value: this.state.material.MaterialCode, onChange: function onChange(value) {
	                                _this2.changeValues(value, 'MaterialId');
	                            }, label: 'Material Code', width: 220, placeholder: '0001' })
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { marginBottom: 6 } },
	                        _react2.default.createElement(_TextField.TextField, { value: this.state.material.Name, onChange: function onChange(value) {
	                                _this2.changeValues(value, 'Name');
	                            }, label: 'Material Name', width: 420, placeholder: 'Material Name' })
	                    )
	                )
	            );
	        }
	    }]);
	
	    return Material;
	}(_react2.default.Component);

/***/ },

/***/ 259:
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Product = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _tabPanel = __webpack_require__(245);
	
	var _formToolbar = __webpack_require__(247);
	
	var _TextField = __webpack_require__(248);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class Product
	 * @extends React.Component
	 */
	
	var Product = exports.Product = function (_React$Component) {
	    _inherits(Product, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function Product(args) {
	        _classCallCheck(this, Product);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Product).call(this, args));
	
	        _this.state = {
	            product: {}
	        };
	        return _this;
	    }
	
	    _createClass(Product, [{
	        key: 'changeValues',
	        value: function changeValues(value, field) {
	            var product = this.state.product;
	            product[field] = value;
	            this.setState({ product: product });
	            //console.log(this.state.customer)
	        }
	    }, {
	        key: 'saveProduct',
	        value: function saveProduct() {
	            var service = "http://localhost:19377/breeze/radix/";
	            var EntityManager = new breeze.EntityManager(service);
	            var product = EntityManager.createEntity('Products', this.state.product);
	            EntityManager.addEntity(product);
	            EntityManager.saveChanges();
	        }
	
	        /**
	         * @render
	         * @return {View} view
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            return _react2.default.createElement(
	                'div',
	                { style: { backgroundColor: '#F8F8F8', height: '100%' } },
	                _react2.default.createElement(_formToolbar.FormToolbar, { onSave: this.saveProduct.bind(this) }),
	                _react2.default.createElement('div', { style: { height: 60, backgroundColor: '#FFF', borderBottom: 'solid 1px #D1D1D1' } }),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10, margin: 10, border: 'solid 1px #D1D1D1' } },
	                    _react2.default.createElement(
	                        'div',
	                        { style: { marginBottom: 6 } },
	                        _react2.default.createElement(_TextField.TextField, { value: this.state.product.Name, onChange: function onChange(value) {
	                                _this2.changeValues(value, 'Name');
	                            }, label: 'Product Name', width: 420 })
	                    )
	                )
	            );
	        }
	    }]);
	
	    return Product;
	}(_react2.default.Component);

/***/ },

/***/ 260:
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.ChartOfAccount = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _detailPanel = __webpack_require__(251);
	
	var _formToolbar = __webpack_require__(247);
	
	var _TextField = __webpack_require__(248);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class ChartOfAccount
	 * @extends React.Component
	 */
	
	var ChartOfAccount = exports.ChartOfAccount = function (_React$Component) {
	    _inherits(ChartOfAccount, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function ChartOfAccount(args) {
	        _classCallCheck(this, ChartOfAccount);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ChartOfAccount).call(this, args));
	
	        _this.state = {};
	        return _this;
	    }
	
	    /**
	     * @render
	     * @return {View} view
	     */
	
	    _createClass(ChartOfAccount, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { style: { backgroundColor: '#F8F8F8', height: '100%' } },
	                _react2.default.createElement(_formToolbar.FormToolbar, null),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10, margin: 5, border: 'solid 1px #D1D1D1' } },
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Account ID', width: 200, placeholder: '0001' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Description', width: 225, labelWidth: 70 })
	                        )
	                    ),
	                    _react2.default.createElement(_TextField.TextField, { label: 'Account Type', width: 435 })
	                )
	            );
	        }
	    }]);
	
	    return ChartOfAccount;
	}(_react2.default.Component);

/***/ },

/***/ 261:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Grade = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _tabPanel = __webpack_require__(245);
	
	var _formToolbar = __webpack_require__(247);
	
	var _TextField = __webpack_require__(248);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class Grade
	 * @extends React.Component
	 */
	
	var Grade = exports.Grade = function (_React$Component) {
	    _inherits(Grade, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function Grade(args) {
	        _classCallCheck(this, Grade);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Grade).call(this, args));
	
	        _this.state = {
	            grade: {}
	        };
	        return _this;
	    }
	
	    _createClass(Grade, [{
	        key: 'changeValues',
	        value: function changeValues(value, field) {
	            var grade = this.state.grade;
	            grade[field] = value;
	            this.setState({ grade: grade });
	        }
	    }, {
	        key: 'saveGrade',
	        value: function saveGrade() {
	            /*var service = "http://localhost:19377/breeze/radix/";
	            var EntityManager = new breeze.EntityManager(service);
	            var grade = EntityManager.createEntity('Grade', this.state.grade);
	            EntityManager.addEntity(grade);
	            EntityManager.saveChanges();*/
	            var data = this.state.grade;
	            $.ajax({
	                url: 'http://localhost:10946/api/grade/save',
	                data: data,
	                type: 'POST',
	                dataType: 'json',
	                crossDomain: true,
	                success: function success(data) {
	                    //WriteResponses(data);
	                    console.log(data);
	                },
	                error: function error(x, y, z) {
	                    alert(x + '\n' + y + '\n' + z);
	                }
	            });
	        }
	
	        /**
	         * @render
	         * @return {View} view
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            return _react2.default.createElement(
	                'div',
	                { style: { backgroundColor: '#F8F8F8', height: '100%' } },
	                _react2.default.createElement(_formToolbar.FormToolbar, { onSave: this.saveGrade.bind(this) }),
	                _react2.default.createElement('div', { style: { height: 60, backgroundColor: '#FFF', borderBottom: 'solid 1px #D1D1D1' } }),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10, margin: 10, border: 'solid 1px #D1D1D1' } },
	                    _react2.default.createElement(
	                        'div',
	                        { style: { marginBottom: 6 } },
	                        _react2.default.createElement(_TextField.TextField, { value: this.state.grade.Name, onChange: function onChange(value) {
	                                _this2.changeValues(value, 'Name');
	                            }, label: 'Grade', width: 420 })
	                    )
	                )
	            );
	        }
	    }]);
	
	    return Grade;
	}(_react2.default.Component);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(225)))

/***/ },

/***/ 262:
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.MaterialRequisition = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _detailPanel = __webpack_require__(251);
	
	var _formToolbar = __webpack_require__(247);
	
	var _TextField = __webpack_require__(248);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class MaterialRequisition
	 * @extends React.Component
	 */
	
	var MaterialRequisition = exports.MaterialRequisition = function (_React$Component) {
	    _inherits(MaterialRequisition, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function MaterialRequisition(args) {
	        _classCallCheck(this, MaterialRequisition);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MaterialRequisition).call(this, args));
	
	        _this.state = {};
	        return _this;
	    }
	
	    /**
	     * @render
	     * @return {View} view
	     */
	
	    _createClass(MaterialRequisition, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { style: { backgroundColor: '#F8F8F8', height: '100%' } },
	                _react2.default.createElement(_formToolbar.FormToolbar, null),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10, margin: 5, border: 'solid 1px #D1D1D1' } },
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Requisition No', width: 200, placeholder: '0001' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Created On', width: 200, labelWidth: 70, placeholder: 'dd-mm-yy' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Sales Order', width: 300, labelWidth: 70, placeholder: '0001' })
	                        )
	                    ),
	                    _react2.default.createElement(_detailPanel.DetailPanel, null)
	                )
	            );
	        }
	    }]);
	
	    return MaterialRequisition;
	}(_react2.default.Component);

/***/ },

/***/ 263:
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.RequestQuotation = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _eventemitter = __webpack_require__(226);
	
	var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	var _detailPanel = __webpack_require__(251);
	
	var _formToolbar = __webpack_require__(247);
	
	var _TextField = __webpack_require__(248);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Class Header
	 *
	 * @class MaterialRequisition
	 * @extends React.Component
	 */
	
	var RequestQuotation = exports.RequestQuotation = function (_React$Component) {
	    _inherits(RequestQuotation, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function RequestQuotation(args) {
	        _classCallCheck(this, RequestQuotation);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(RequestQuotation).call(this, args));
	
	        _this.state = {};
	        return _this;
	    }
	
	    /**
	     * @render
	     * @return {View} view
	     */
	
	    _createClass(RequestQuotation, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { style: { backgroundColor: '#F8F8F8', height: '100%' } },
	                _react2.default.createElement(_formToolbar.FormToolbar, null),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10, margin: 5, border: 'solid 1px #D1D1D1' } },
	                    _react2.default.createElement(
	                        'div',
	                        { style: { display: 'table' } },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell' } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Quotation No', width: 200, placeholder: '0001' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'Created On', width: 200, labelWidth: 70, placeholder: 'dd-mm-yy' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { style: { marginBottom: 6, display: 'table-cell', paddingLeft: 10 } },
	                            _react2.default.createElement(_TextField.TextField, { label: 'MR NUmber', width: 300, labelWidth: 70, placeholder: '0001' })
	                        )
	                    ),
	                    _react2.default.createElement(_detailPanel.DetailPanel, null)
	                )
	            );
	        }
	    }]);
	
	    return RequestQuotation;
	}(_react2.default.Component);

/***/ },

/***/ 264:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.SidebarItem = exports.Sidebar = exports.ApplicationSidebar = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _userProfile = __webpack_require__(265);
	
	var _treeView = __webpack_require__(266);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Application Modules here
	 */
	var modules = [{ name: 'Company', icon: 'fa-table' }, { name: 'Purchase', icon: 'fa-th' }, { name: 'Sales', icon: 'fa-calendar' }, { name: 'Bank', icon: 'fa-money' }, { name: 'Settings', icon: 'fa-cog' }];
	
	/**
	 * Application's  Sidebar
	 * @class Application
	 * @extends React.Component
	 */
	
	var ApplicationSidebar = exports.ApplicationSidebar = function (_React$Component) {
	    _inherits(ApplicationSidebar, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function ApplicationSidebar() {
	        _classCallCheck(this, ApplicationSidebar);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ApplicationSidebar).call(this));
	
	        _this.state = {
	            selectedIndex: 0
	        };
	        return _this;
	    }
	
	    /**
	     * renders the sidebar vertical modules bar
	     * @return {HTMLElement} div
	     */
	
	    _createClass(ApplicationSidebar, [{
	        key: 'renderModuleSidebar',
	        value: function renderModuleSidebar() {
	            var _this2 = this;
	
	            return _react2.default.createElement(
	                'div',
	                { className: 'p-module-sidebar' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'p-module-sidebar-inner' },
	                    modules.map(function (item, index) {
	                        return _react2.default.createElement(
	                            'div',
	                            { key: index, onClick: function onClick() {
	                                    _this2.setState({ selectedIndex: index });
	                                },
	                                className: "p-module-button " + (_this2.state.selectedIndex == index ? "p-active" : "") },
	                            _react2.default.createElement('i', { className: "fa " + item.icon }),
	                            item.name
	                        );
	                    })
	                )
	            );
	        }
	
	        /**
	         * @render
	         * @return {HTMLDivElement} container
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'p-sidebar' },
	                _react2.default.createElement(_userProfile.UserProfile, null),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'p-modules' },
	                    this.renderModuleSidebar(),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'p-modules-content' },
	                        _react2.default.createElement(
	                            'div',
	                            { style: { height: 40, marginBottom: 10 } },
	                            _react2.default.createElement('input', { type: 'text', placeholder: 'Search your actions...', style: {
	                                    width: '98%', height: 40, border: 'solid 1px transparent',
	                                    borderBottom: 'solid 1px #F4F4F4', padding: 10 } })
	                        ),
	                        _react2.default.createElement(
	                            _treeView.TreeView,
	                            null,
	                            _react2.default.createElement(
	                                _treeView.TreeNode,
	                                { text: 'Master' },
	                                _react2.default.createElement(_treeView.TreeNode, { text: 'Customers' }),
	                                _react2.default.createElement(_treeView.TreeNode, { text: 'Vendors' }),
	                                _react2.default.createElement(_treeView.TreeNode, { text: 'Product' }),
	                                _react2.default.createElement(_treeView.TreeNode, { text: 'Stock' })
	                            ),
	                            _react2.default.createElement(
	                                _treeView.TreeNode,
	                                { text: 'Transactions' },
	                                _react2.default.createElement(_treeView.TreeNode, { text: 'Purchase Order' }),
	                                _react2.default.createElement(_treeView.TreeNode, { text: 'Purchase Return ' }),
	                                _react2.default.createElement(_treeView.TreeNode, { text: 'Purchase Invoice' }),
	                                _react2.default.createElement(_treeView.TreeNode, { text: 'Delivery Challan' }),
	                                _react2.default.createElement(_treeView.TreeNode, { text: 'Bill Printing' })
	                            ),
	                            _react2.default.createElement(
	                                _treeView.TreeNode,
	                                { text: 'Reports' },
	                                _react2.default.createElement(_treeView.TreeNode, { text: 'Purchase Register' }),
	                                _react2.default.createElement(_treeView.TreeNode, { text: 'Inward Register' }),
	                                _react2.default.createElement(_treeView.TreeNode, { text: 'Stock Register' }),
	                                _react2.default.createElement(_treeView.TreeNode, { text: 'Closing Stock' }),
	                                _react2.default.createElement(_treeView.TreeNode, { text: 'Tax Wise Register' })
	                            )
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return ApplicationSidebar;
	}(_react2.default.Component);
	
	/**
	 * @class Sidebar
	 * @extends React.Component
	 */
	
	var Sidebar = exports.Sidebar = function (_React$Component2) {
	    _inherits(Sidebar, _React$Component2);
	
	    /**
	     * @constructor
	     */
	
	    function Sidebar() {
	        _classCallCheck(this, Sidebar);
	
	        /**
	         * @state
	         */
	
	        var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(Sidebar).call(this));
	
	        _this3.state = {};
	        return _this3;
	    }
	
	    /**
	     * @render
	     * @return {HTMLElement} container
	     */
	
	    _createClass(Sidebar, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'ul',
	                { className: 'nav sidebar-menu' },
	                _react2.default.createElement(SidebarItem, { icon: 'fa-table', text: 'Vendor' }),
	                _react2.default.createElement(
	                    SidebarItem,
	                    { icon: 'fa-th', text: 'Purchase', isActive: true },
	                    _react2.default.createElement(
	                        'ul',
	                        { className: 'submenu' },
	                        _react2.default.createElement(SidebarItem, { icon: 'fa-twitter', text: 'Reports' }),
	                        _react2.default.createElement(SidebarItem, { icon: 'fa-money', text: 'Accounts' }),
	                        _react2.default.createElement(SidebarItem, { icon: 'fa-cog', text: 'Settings' })
	                    )
	                ),
	                _react2.default.createElement(SidebarItem, { icon: 'fa-twitter', text: 'Reports' }),
	                _react2.default.createElement(SidebarItem, { icon: 'fa-money', text: 'Accounts' }),
	                _react2.default.createElement(SidebarItem, { icon: 'fa-cog', text: 'Settings' })
	            );
	        }
	    }]);
	
	    return Sidebar;
	}(_react2.default.Component);
	
	/**
	 * @class SidebarItem
	 * @extends React.Component
	 */
	
	var SidebarItem = exports.SidebarItem = function (_React$Component3) {
	    _inherits(SidebarItem, _React$Component3);
	
	    /**
	     * @constructor
	     */
	
	    function SidebarItem() {
	        _classCallCheck(this, SidebarItem);
	
	        /**
	         * @state
	         */
	
	        var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(SidebarItem).call(this));
	
	        _this4.state = {};
	        /**
	         * font icon class to display
	         * @param {String} icon
	         */
	        _this4.defaultIcon = "fa-table";
	        return _this4;
	    }
	
	    /**
	     * @eventhandler
	     * @param {Event} Event
	     * @return {Void} undefined;
	     */
	
	    _createClass(SidebarItem, [{
	        key: 'onClick',
	        value: function onClick(evt) {
	            if (this.props.onClick) this.props.onClick();
	        }
	
	        /**
	         * @render
	         * @return {HTMLDivElement} container
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            var cls = this.props.isActive ? "active open" : "";
	            return _react2.default.createElement(
	                'li',
	                { className: cls, onClick: this.onClick.bind(this) },
	                _react2.default.createElement(
	                    'a',
	                    { href: '#' },
	                    _react2.default.createElement('i', { className: "menu-icon fa " + this.props.icon || this.defaultIcon }),
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'menu-text' },
	                        this.props.text
	                    )
	                ),
	                this.props.children
	            );
	        }
	    }]);
	
	    return SidebarItem;
	}(_react2.default.Component);

/***/ },

/***/ 265:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.UserProfile = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * User profile to be displayed in the sidebar
	 * @class UserProfile
	 * @extends React.Component
	 */
	
	var UserProfile = exports.UserProfile = function (_React$Component) {
	    _inherits(UserProfile, _React$Component);
	
	    function UserProfile() {
	        _classCallCheck(this, UserProfile);
	
	        return _possibleConstructorReturn(this, Object.getPrototypeOf(UserProfile).apply(this, arguments));
	    }
	
	    _createClass(UserProfile, [{
	        key: 'render',
	
	        /**
	         * @render
	         * @return {HTMLDivElement} container
	         */
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'p-user-profile' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'p-tabular-row' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'p-tabular-cell p-user-avatar' },
	                        _react2.default.createElement(
	                            'a',
	                            { href: '#' },
	                            _react2.default.createElement('img', { src: '/assets/images/theme/avatars/John-Smith.jpg' })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'p-tabular-cell user-info' },
	                        _react2.default.createElement(
	                            'span',
	                            { className: 'welcome-text' },
	                            'Welcome,'
	                        ),
	                        _react2.default.createElement(
	                            'a',
	                            { href: '#', className: 'user-name' },
	                            'Muhammed Jasim'
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: 10, textAlign: 'center' } },
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'p-user-profile-action' },
	                        _react2.default.createElement('i', { className: 'fa fa-cog' })
	                    ),
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'p-user-profile-action' },
	                        _react2.default.createElement('i', { className: 'fa fa-power-off' })
	                    ),
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'p-user-profile-action' },
	                        _react2.default.createElement('i', { className: 'fa fa-user' })
	                    ),
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'p-user-profile-action' },
	                        _react2.default.createElement('i', { className: 'fa fa-key' })
	                    )
	                )
	            );
	        }
	    }]);
	
	    return UserProfile;
	}(_react2.default.Component);

/***/ },

/***/ 266:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.TreeNode = exports.TreeView = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Custom Tree View
	 * @class TreeView
	 * @extends React.Component
	 */
	
	var TreeView = exports.TreeView = function (_React$Component) {
	    _inherits(TreeView, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function TreeView() {
	        _classCallCheck(this, TreeView);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TreeView).call(this));
	
	        _this.state = {};
	
	        /**
	         * Custom Id Manager
	         */
	        _this.id = 1;
	        return _this;
	    }
	
	    _createClass(TreeView, [{
	        key: 'renderChildren',
	        value: function renderChildren() {
	            var _this2 = this;
	
	            return _react2.default.Children.map(this.props.children, function (child) {
	                return _react2.default.cloneElement(child, {
	                    isSelected: true,
	                    id: 'treenode - ' + ++_this2.id
	                });
	            });
	        }
	
	        /**
	         * @render
	         * @return {HTMLDivElement} container
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'p-treepanel' },
	                _react2.default.createElement(
	                    'ol',
	                    { className: 'p-tree-view p-list-tree p-has-collapsable-children' },
	                    this.renderChildren()
	                )
	            );
	        }
	    }]);
	
	    return TreeView;
	}(_react2.default.Component);
	
	/**
	 * Single Node in Tree
	 * @class TreeNode
	 * @extends React.Component
	 */
	
	var TreeNode = exports.TreeNode = function (_React$Component2) {
	    _inherits(TreeNode, _React$Component2);
	
	    /**
	     * @constructor
	     */
	
	    function TreeNode() {
	        _classCallCheck(this, TreeNode);
	
	        /**
	         * @state
	         */
	
	        var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(TreeNode).call(this));
	
	        _this3.state = {
	            isExpanded: true
	        };
	        return _this3;
	    }
	
	    /**
	     * @eventlistener
	     * On Node Click event handler
	     */
	
	    _createClass(TreeNode, [{
	        key: 'onNodeClick',
	        value: function onNodeClick(e) {
	            this.setState({ isExpanded: !this.state.isExpanded });
	        }
	
	        /**
	         * @render
	         * @return {HTMLDivElement} container
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            /**
	             * When there is no child items default tree node will be rendered.
	             */
	
	            var className = this.props.children ? "p-entry p-list-nested-item" : 'p-file p-entry p-list-item ';
	            var textClassName = this.props.children ? "icon-file-directory" : "icon-file-text";
	            var component = _react2.default.createElement(
	                'li',
	                { className: className },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'p-header p-list-item' },
	                    _react2.default.createElement(
	                        'span',
	                        { className: "name icon " + textClassName },
	                        this.props.text
	                    )
	                ),
	                this.renderSubTree()
	            );
	
	            return component;
	        }
	    }, {
	        key: 'renderSubTree',
	        value: function renderSubTree() {
	            if (this.props.children) {
	                return _react2.default.createElement(
	                    'ol',
	                    { className: 'p-entries p-list-tree' },
	                    this.renderChildren()
	                );
	            }
	        }
	    }, {
	        key: 'renderChildren',
	        value: function renderChildren() {
	            var _this4 = this;
	
	            return _react2.default.Children.map(this.props.children, function (child, index) {
	                return _react2.default.cloneElement(child, {
	                    onNodeClick: _this4.props.onNodeClick,
	                    key: index
	                });
	            });
	        }
	    }]);
	
	    return TreeNode;
	}(_react2.default.Component);

/***/ },

/***/ 267:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.TileView = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _isotope = __webpack_require__(268);
	
	var _isotope2 = _interopRequireDefault(_isotope);
	
	var _packery = __webpack_require__(269);
	
	var _packery2 = _interopRequireDefault(_packery);
	
	var _draggabilly = __webpack_require__(270);
	
	var _draggabilly2 = _interopRequireDefault(_draggabilly);
	
	var _kendo = __webpack_require__(227);
	
	var _kendo2 = _interopRequireDefault(_kendo);
	
	var _tile = __webpack_require__(271);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class TileView
	 * @extends React.Component
	 */
	
	var TileView = exports.TileView = function (_React$Component) {
	    _inherits(TileView, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function TileView() {
	        _classCallCheck(this, TileView);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TileView).call(this));
	
	        _this.state = {};
	        return _this;
	    }
	
	    /**
	     * @componentDidMount
	     * @lifecycle
	     */
	
	    _createClass(TileView, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            console.log(jQuery);
	            var iso = new _packery2.default(this.refs.container, {
	                columnWidth: 30,
	                rowHeight: 30
	            });
	
	            var nodes = this.refs.container.childNodes;
	            for (var i = 0; i < nodes.length; i++) {
	                var node = nodes.item(i);
	                var draggie = new _draggabilly2.default(node);
	                // bind Draggabilly events to Packery
	                //new Packery( 'bindDraggabillyEvents', draggie );
	                //console.log(iso)
	                iso.bindDraggabillyEvents(draggie);
	            }
	        }
	
	        /**
	         * @render
	         * @return {HTMLDivElement} container
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { ref: 'container', className: 'tileview' },
	                _react2.default.createElement(
	                    _tile.Tile,
	                    null,
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'tile-inner green' },
	                        _react2.default.createElement('i', { className: 'tile-icon fa fa-table' }),
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            'Company'
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    _tile.Tile,
	                    null,
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'tile-inner blue' },
	                        _react2.default.createElement('i', { className: 'tile-icon fa fa-table' }),
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            'Customer'
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    _tile.Tile,
	                    null,
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'tile-inner red' },
	                        _react2.default.createElement('i', { className: 'tile-icon fa fa-save' }),
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            'Product'
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    _tile.Tile,
	                    null,
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'tile-inner' },
	                        _react2.default.createElement('i', { className: 'tile-icon fa fa-file-text' }),
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            'Stock'
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    _tile.Tile,
	                    null,
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'tile-inner green' },
	                        _react2.default.createElement('i', { className: 'tile-icon fa fa-calculator' }),
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            'Tax'
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    _tile.Tile,
	                    null,
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'tile-inner red' },
	                        _react2.default.createElement('i', { className: 'tile-icon fa fa-cog' }),
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            'Settings'
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return TileView;
	}(_react2.default.Component);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(225)))

/***/ },

/***/ 268:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_1__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_2__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_3__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_4__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_5__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_6__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_7__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_8__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_9__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_10__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_11__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_12__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_13__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_14__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_15__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/
	var $ = __webpack_require__(225);
	
	/*!
	 * Isotope PACKAGED v2.2.2
	 *
	 * Licensed GPLv3 for open source use
	 * or Isotope Commercial License for commercial use
	 *
	 * http://isotope.metafizzy.co
	 * Copyright 2015 Metafizzy
	 */
	
	/**
	 * Bridget makes jQuery widgets
	 * v1.1.0
	 * MIT license
	 */
	
	( function( window ) {
	
	
	
	// -------------------------- utils -------------------------- //
	
	var slice = Array.prototype.slice;
	
	function noop() {}
	
	// -------------------------- definition -------------------------- //
	
	function defineBridget( $ ) {
	
	// bail if no jQuery
	if ( !$ ) {
	  return;
	}
	
	// -------------------------- addOptionMethod -------------------------- //
	
	/**
	 * adds option method -> $().plugin('option', {...})
	 * @param {Function} PluginClass - constructor class
	 */
	function addOptionMethod( PluginClass ) {
	  // don't overwrite original option method
	  if ( PluginClass.prototype.option ) {
	    return;
	  }
	
	  // option setter
	  PluginClass.prototype.option = function( opts ) {
	    // bail out if not an object
	    if ( !$.isPlainObject( opts ) ){
	      return;
	    }
	    this.options = $.extend( true, this.options, opts );
	  };
	}
	
	// -------------------------- plugin bridge -------------------------- //
	
	// helper function for logging errors
	// $.error breaks jQuery chaining
	var logError = typeof console === 'undefined' ? noop :
	  function( message ) {
	    console.error( message );
	  };
	
	/**
	 * jQuery plugin bridge, access methods like $elem.plugin('method')
	 * @param {String} namespace - plugin name
	 * @param {Function} PluginClass - constructor class
	 */
	function bridge( namespace, PluginClass ) {
	  // add to jQuery fn namespace
	  $.fn[ namespace ] = function( options ) {
	    if ( typeof options === 'string' ) {
	      // call plugin method when first argument is a string
	      // get arguments for method
	      var args = slice.call( arguments, 1 );
	
	      for ( var i=0, len = this.length; i < len; i++ ) {
	        var elem = this[i];
	        var instance = $.data( elem, namespace );
	        if ( !instance ) {
	          logError( "cannot call methods on " + namespace + " prior to initialization; " +
	            "attempted to call '" + options + "'" );
	          continue;
	        }
	        if ( !$.isFunction( instance[options] ) || options.charAt(0) === '_' ) {
	          logError( "no such method '" + options + "' for " + namespace + " instance" );
	          continue;
	        }
	
	        // trigger method with arguments
	        var returnValue = instance[ options ].apply( instance, args );
	
	        // break look and return first value if provided
	        if ( returnValue !== undefined ) {
	          return returnValue;
	        }
	      }
	      // return this if no return value
	      return this;
	    } else {
	      return this.each( function() {
	        var instance = $.data( this, namespace );
	        if ( instance ) {
	          // apply options & init
	          instance.option( options );
	          instance._init();
	        } else {
	          // initialize new instance
	          instance = new PluginClass( this, options );
	          $.data( this, namespace, instance );
	        }
	      });
	    }
	  };
	
	}
	
	// -------------------------- bridget -------------------------- //
	
	/**
	 * converts a Prototypical class into a proper jQuery plugin
	 *   the class must have a ._init method
	 * @param {String} namespace - plugin name, used in $().pluginName
	 * @param {Function} PluginClass - constructor class
	 */
	$.bridget = function( namespace, PluginClass ) {
	  addOptionMethod( PluginClass );
	  bridge( namespace, PluginClass );
	};
	
	return $.bridget;
	
	}
	
	// transport
	if ( true ) {
	  // AMD
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(225) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (defineBridget), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if ( typeof exports === 'object' ) {
	  defineBridget( require('jquery') );
	} else {
	  // get jquery from browser global
	  defineBridget( window.jQuery );
	}
	
	})( window );
	
	/*!
	 * eventie v1.0.6
	 * event binding helper
	 *   eventie.bind( elem, 'click', myFn )
	 *   eventie.unbind( elem, 'click', myFn )
	 * MIT license
	 */
	
	/*jshint browser: true, undef: true, unused: true */
	/*global define: false, module: false */
	
	( function( window ) {
	
	
	
	var docElem = document.documentElement;
	
	var bind = function() {};
	
	function getIEEvent( obj ) {
	  var event = window.event;
	  // add event.target
	  event.target = event.target || event.srcElement || obj;
	  return event;
	}
	
	if ( docElem.addEventListener ) {
	  bind = function( obj, type, fn ) {
	    obj.addEventListener( type, fn, false );
	  };
	} else if ( docElem.attachEvent ) {
	  bind = function( obj, type, fn ) {
	    obj[ type + fn ] = fn.handleEvent ?
	      function() {
	        var event = getIEEvent( obj );
	        fn.handleEvent.call( fn, event );
	      } :
	      function() {
	        var event = getIEEvent( obj );
	        fn.call( obj, event );
	      };
	    obj.attachEvent( "on" + type, obj[ type + fn ] );
	  };
	}
	
	var unbind = function() {};
	
	if ( docElem.removeEventListener ) {
	  unbind = function( obj, type, fn ) {
	    obj.removeEventListener( type, fn, false );
	  };
	} else if ( docElem.detachEvent ) {
	  unbind = function( obj, type, fn ) {
	    obj.detachEvent( "on" + type, obj[ type + fn ] );
	    try {
	      delete obj[ type + fn ];
	    } catch ( err ) {
	      // can't delete window object properties
	      obj[ type + fn ] = undefined;
	    }
	  };
	}
	
	var eventie = {
	  bind: bind,
	  unbind: unbind
	};
	
	// ----- module definition ----- //
	
	if ( true ) {
	  // AMD
	  !(__WEBPACK_AMD_DEFINE_FACTORY__ = (eventie), __WEBPACK_LOCAL_MODULE_1__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	} else if ( typeof exports === 'object' ) {
	  // CommonJS
	  module.exports = eventie;
	} else {
	  // browser global
	  window.eventie = eventie;
	}
	
	})( window );
	
	/*!
	 * EventEmitter v4.2.11 - git.io/ee
	 * Unlicense - http://unlicense.org/
	 * Oliver Caldwell - http://oli.me.uk/
	 * @preserve
	 */
	
	;(function () {
	    'use strict';
	
	    /**
	     * Class for managing events.
	     * Can be extended to provide event functionality in other classes.
	     *
	     * @class EventEmitter Manages event registering and emitting.
	     */
	    function EventEmitter() {}
	
	    // Shortcuts to improve speed and size
	    var proto = EventEmitter.prototype;
	    var exports = this;
	    var originalGlobalValue = exports.EventEmitter;
	
	    /**
	     * Finds the index of the listener for the event in its storage array.
	     *
	     * @param {Function[]} listeners Array of listeners to search through.
	     * @param {Function} listener Method to look for.
	     * @return {Number} Index of the specified listener, -1 if not found
	     * @api private
	     */
	    function indexOfListener(listeners, listener) {
	        var i = listeners.length;
	        while (i--) {
	            if (listeners[i].listener === listener) {
	                return i;
	            }
	        }
	
	        return -1;
	    }
	
	    /**
	     * Alias a method while keeping the context correct, to allow for overwriting of target method.
	     *
	     * @param {String} name The name of the target method.
	     * @return {Function} The aliased method
	     * @api private
	     */
	    function alias(name) {
	        return function aliasClosure() {
	            return this[name].apply(this, arguments);
	        };
	    }
	
	    /**
	     * Returns the listener array for the specified event.
	     * Will initialise the event object and listener arrays if required.
	     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
	     * Each property in the object response is an array of listener functions.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Function[]|Object} All listener functions for the event.
	     */
	    proto.getListeners = function getListeners(evt) {
	        var events = this._getEvents();
	        var response;
	        var key;
	
	        // Return a concatenated array of all matching events if
	        // the selector is a regular expression.
	        if (evt instanceof RegExp) {
	            response = {};
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    response[key] = events[key];
	                }
	            }
	        }
	        else {
	            response = events[evt] || (events[evt] = []);
	        }
	
	        return response;
	    };
	
	    /**
	     * Takes a list of listener objects and flattens it into a list of listener functions.
	     *
	     * @param {Object[]} listeners Raw listener objects.
	     * @return {Function[]} Just the listener functions.
	     */
	    proto.flattenListeners = function flattenListeners(listeners) {
	        var flatListeners = [];
	        var i;
	
	        for (i = 0; i < listeners.length; i += 1) {
	            flatListeners.push(listeners[i].listener);
	        }
	
	        return flatListeners;
	    };
	
	    /**
	     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Object} All listener functions for an event in an object.
	     */
	    proto.getListenersAsObject = function getListenersAsObject(evt) {
	        var listeners = this.getListeners(evt);
	        var response;
	
	        if (listeners instanceof Array) {
	            response = {};
	            response[evt] = listeners;
	        }
	
	        return response || listeners;
	    };
	
	    /**
	     * Adds a listener function to the specified event.
	     * The listener will not be added if it is a duplicate.
	     * If the listener returns true then it will be removed after it is called.
	     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListener = function addListener(evt, listener) {
	        var listeners = this.getListenersAsObject(evt);
	        var listenerIsWrapped = typeof listener === 'object';
	        var key;
	
	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
	                listeners[key].push(listenerIsWrapped ? listener : {
	                    listener: listener,
	                    once: false
	                });
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of addListener
	     */
	    proto.on = alias('addListener');
	
	    /**
	     * Semi-alias of addListener. It will add a listener that will be
	     * automatically removed after its first execution.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addOnceListener = function addOnceListener(evt, listener) {
	        return this.addListener(evt, {
	            listener: listener,
	            once: true
	        });
	    };
	
	    /**
	     * Alias of addOnceListener.
	     */
	    proto.once = alias('addOnceListener');
	
	    /**
	     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
	     * You need to tell it what event names should be matched by a regex.
	     *
	     * @param {String} evt Name of the event to create.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvent = function defineEvent(evt) {
	        this.getListeners(evt);
	        return this;
	    };
	
	    /**
	     * Uses defineEvent to define multiple events.
	     *
	     * @param {String[]} evts An array of event names to define.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvents = function defineEvents(evts) {
	        for (var i = 0; i < evts.length; i += 1) {
	            this.defineEvent(evts[i]);
	        }
	        return this;
	    };
	
	    /**
	     * Removes a listener function from the specified event.
	     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to remove the listener from.
	     * @param {Function} listener Method to remove from the event.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListener = function removeListener(evt, listener) {
	        var listeners = this.getListenersAsObject(evt);
	        var index;
	        var key;
	
	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key)) {
	                index = indexOfListener(listeners[key], listener);
	
	                if (index !== -1) {
	                    listeners[key].splice(index, 1);
	                }
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of removeListener
	     */
	    proto.off = alias('removeListener');
	
	    /**
	     * Adds listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
	     * You can also pass it a regular expression to add the array of listeners to all events that match it.
	     * Yeah, this function does quite a bit. That's probably a bad thing.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListeners = function addListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(false, evt, listeners);
	    };
	
	    /**
	     * Removes listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be removed.
	     * You can also pass it a regular expression to remove the listeners from all events that match it.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListeners = function removeListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(true, evt, listeners);
	    };
	
	    /**
	     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
	     * The first argument will determine if the listeners are removed (true) or added (false).
	     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be added/removed.
	     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
	     *
	     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
	        var i;
	        var value;
	        var single = remove ? this.removeListener : this.addListener;
	        var multiple = remove ? this.removeListeners : this.addListeners;
	
	        // If evt is an object then pass each of its properties to this method
	        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
	            for (i in evt) {
	                if (evt.hasOwnProperty(i) && (value = evt[i])) {
	                    // Pass the single listener straight through to the singular method
	                    if (typeof value === 'function') {
	                        single.call(this, i, value);
	                    }
	                    else {
	                        // Otherwise pass back to the multiple function
	                        multiple.call(this, i, value);
	                    }
	                }
	            }
	        }
	        else {
	            // So evt must be a string
	            // And listeners must be an array of listeners
	            // Loop over it and pass each one to the multiple method
	            i = listeners.length;
	            while (i--) {
	                single.call(this, evt, listeners[i]);
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Removes all listeners from a specified event.
	     * If you do not specify an event then all listeners will be removed.
	     * That means every event will be emptied.
	     * You can also pass a regex to remove all events that match it.
	     *
	     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeEvent = function removeEvent(evt) {
	        var type = typeof evt;
	        var events = this._getEvents();
	        var key;
	
	        // Remove different things depending on the state of evt
	        if (type === 'string') {
	            // Remove all listeners for the specified event
	            delete events[evt];
	        }
	        else if (evt instanceof RegExp) {
	            // Remove all events matching the regex.
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    delete events[key];
	                }
	            }
	        }
	        else {
	            // Remove all listeners in all events
	            delete this._events;
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of removeEvent.
	     *
	     * Added to mirror the node API.
	     */
	    proto.removeAllListeners = alias('removeEvent');
	
	    /**
	     * Emits an event of your choice.
	     * When emitted, every listener attached to that event will be executed.
	     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
	     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
	     * So they will not arrive within the array on the other side, they will be separate.
	     * You can also pass a regular expression to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {Array} [args] Optional array of arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emitEvent = function emitEvent(evt, args) {
	        var listeners = this.getListenersAsObject(evt);
	        var listener;
	        var i;
	        var key;
	        var response;
	
	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key)) {
	                i = listeners[key].length;
	
	                while (i--) {
	                    // If the listener returns true then it shall be removed from the event
	                    // The function is executed either with a basic call or an apply if there is an args array
	                    listener = listeners[key][i];
	
	                    if (listener.once === true) {
	                        this.removeListener(evt, listener.listener);
	                    }
	
	                    response = listener.listener.apply(this, args || []);
	
	                    if (response === this._getOnceReturnValue()) {
	                        this.removeListener(evt, listener.listener);
	                    }
	                }
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of emitEvent
	     */
	    proto.trigger = alias('emitEvent');
	
	    /**
	     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
	     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {...*} Optional additional arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emit = function emit(evt) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        return this.emitEvent(evt, args);
	    };
	
	    /**
	     * Sets the current value to check against when executing listeners. If a
	     * listeners return value matches the one set here then it will be removed
	     * after execution. This value defaults to true.
	     *
	     * @param {*} value The new value to check for when executing listeners.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.setOnceReturnValue = function setOnceReturnValue(value) {
	        this._onceReturnValue = value;
	        return this;
	    };
	
	    /**
	     * Fetches the current value to check against when executing listeners. If
	     * the listeners return value matches this one then it should be removed
	     * automatically. It will return true by default.
	     *
	     * @return {*|Boolean} The current value to check for or the default, true.
	     * @api private
	     */
	    proto._getOnceReturnValue = function _getOnceReturnValue() {
	        if (this.hasOwnProperty('_onceReturnValue')) {
	            return this._onceReturnValue;
	        }
	        else {
	            return true;
	        }
	    };
	
	    /**
	     * Fetches the events object and creates one if required.
	     *
	     * @return {Object} The events storage object.
	     * @api private
	     */
	    proto._getEvents = function _getEvents() {
	        return this._events || (this._events = {});
	    };
	
	    /**
	     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
	     *
	     * @return {Function} Non conflicting EventEmitter class.
	     */
	    EventEmitter.noConflict = function noConflict() {
	        exports.EventEmitter = originalGlobalValue;
	        return EventEmitter;
	    };
	
	    // Expose the class either via AMD, CommonJS or the global object
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_2__ = (function () {
	            return EventEmitter;
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	    }
	    else if (typeof module === 'object' && module.exports){
	        module.exports = EventEmitter;
	    }
	    else {
	        exports.EventEmitter = EventEmitter;
	    }
	}.call(this));
	
	/*!
	 * getStyleProperty v1.0.4
	 * original by kangax
	 * http://perfectionkills.com/feature-testing-css-properties/
	 * MIT license
	 */
	
	/*jshint browser: true, strict: true, undef: true */
	/*global define: false, exports: false, module: false */
	
	( function( window ) {
	
	
	
	var prefixes = 'Webkit Moz ms Ms O'.split(' ');
	var docElemStyle = document.documentElement.style;
	
	function getStyleProperty( propName ) {
	  if ( !propName ) {
	    return;
	  }
	
	  // test standard property first
	  if ( typeof docElemStyle[ propName ] === 'string' ) {
	    return propName;
	  }
	
	  // capitalize
	  propName = propName.charAt(0).toUpperCase() + propName.slice(1);
	
	  // test vendor specific properties
	  var prefixed;
	  for ( var i=0, len = prefixes.length; i < len; i++ ) {
	    prefixed = prefixes[i] + propName;
	    if ( typeof docElemStyle[ prefixed ] === 'string' ) {
	      return prefixed;
	    }
	  }
	}
	
	// transport
	if ( true ) {
	  // AMD
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_3__ = (function() {
	    return getStyleProperty;
	  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	} else if ( typeof exports === 'object' ) {
	  // CommonJS for Component
	  module.exports = getStyleProperty;
	} else {
	  // browser global
	  window.getStyleProperty = getStyleProperty;
	}
	
	})( window );
	
	/*!
	 * getSize v1.2.2
	 * measure size of elements
	 * MIT license
	 */
	
	/*jshint browser: true, strict: true, undef: true, unused: true */
	/*global define: false, exports: false, require: false, module: false, console: false */
	
	( function( window, undefined ) {
	
	
	
	// -------------------------- helpers -------------------------- //
	
	// get a number from a string, not a percentage
	function getStyleSize( value ) {
	  var num = parseFloat( value );
	  // not a percent like '100%', and a number
	  var isValid = value.indexOf('%') === -1 && !isNaN( num );
	  return isValid && num;
	}
	
	function noop() {}
	
	var logError = typeof console === 'undefined' ? noop :
	  function( message ) {
	    console.error( message );
	  };
	
	// -------------------------- measurements -------------------------- //
	
	var measurements = [
	  'paddingLeft',
	  'paddingRight',
	  'paddingTop',
	  'paddingBottom',
	  'marginLeft',
	  'marginRight',
	  'marginTop',
	  'marginBottom',
	  'borderLeftWidth',
	  'borderRightWidth',
	  'borderTopWidth',
	  'borderBottomWidth'
	];
	
	function getZeroSize() {
	  var size = {
	    width: 0,
	    height: 0,
	    innerWidth: 0,
	    innerHeight: 0,
	    outerWidth: 0,
	    outerHeight: 0
	  };
	  for ( var i=0, len = measurements.length; i < len; i++ ) {
	    var measurement = measurements[i];
	    size[ measurement ] = 0;
	  }
	  return size;
	}
	
	
	
	function defineGetSize( getStyleProperty ) {
	
	// -------------------------- setup -------------------------- //
	
	var isSetup = false;
	
	var getStyle, boxSizingProp, isBoxSizeOuter;
	
	/**
	 * setup vars and functions
	 * do it on initial getSize(), rather than on script load
	 * For Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=548397
	 */
	function setup() {
	  // setup once
	  if ( isSetup ) {
	    return;
	  }
	  isSetup = true;
	
	  var getComputedStyle = window.getComputedStyle;
	  getStyle = ( function() {
	    var getStyleFn = getComputedStyle ?
	      function( elem ) {
	        return getComputedStyle( elem, null );
	      } :
	      function( elem ) {
	        return elem.currentStyle;
	      };
	
	      return function getStyle( elem ) {
	        var style = getStyleFn( elem );
	        if ( !style ) {
	          logError( 'Style returned ' + style +
	            '. Are you running this code in a hidden iframe on Firefox? ' +
	            'See http://bit.ly/getsizebug1' );
	        }
	        return style;
	      };
	  })();
	
	  // -------------------------- box sizing -------------------------- //
	
	  boxSizingProp = getStyleProperty('boxSizing');
	
	  /**
	   * WebKit measures the outer-width on style.width on border-box elems
	   * IE & Firefox measures the inner-width
	   */
	  if ( boxSizingProp ) {
	    var div = document.createElement('div');
	    div.style.width = '200px';
	    div.style.padding = '1px 2px 3px 4px';
	    div.style.borderStyle = 'solid';
	    div.style.borderWidth = '1px 2px 3px 4px';
	    div.style[ boxSizingProp ] = 'border-box';
	
	    var body = document.body || document.documentElement;
	    body.appendChild( div );
	    var style = getStyle( div );
	
	    isBoxSizeOuter = getStyleSize( style.width ) === 200;
	    body.removeChild( div );
	  }
	
	}
	
	// -------------------------- getSize -------------------------- //
	
	function getSize( elem ) {
	  setup();
	
	  // use querySeletor if elem is string
	  if ( typeof elem === 'string' ) {
	    elem = document.querySelector( elem );
	  }
	
	  // do not proceed on non-objects
	  if ( !elem || typeof elem !== 'object' || !elem.nodeType ) {
	    return;
	  }
	
	  var style = getStyle( elem );
	
	  // if hidden, everything is 0
	  if ( style.display === 'none' ) {
	    return getZeroSize();
	  }
	
	  var size = {};
	  size.width = elem.offsetWidth;
	  size.height = elem.offsetHeight;
	
	  var isBorderBox = size.isBorderBox = !!( boxSizingProp &&
	    style[ boxSizingProp ] && style[ boxSizingProp ] === 'border-box' );
	
	  // get all measurements
	  for ( var i=0, len = measurements.length; i < len; i++ ) {
	    var measurement = measurements[i];
	    var value = style[ measurement ];
	    value = mungeNonPixel( elem, value );
	    var num = parseFloat( value );
	    // any 'auto', 'medium' value will be 0
	    size[ measurement ] = !isNaN( num ) ? num : 0;
	  }
	
	  var paddingWidth = size.paddingLeft + size.paddingRight;
	  var paddingHeight = size.paddingTop + size.paddingBottom;
	  var marginWidth = size.marginLeft + size.marginRight;
	  var marginHeight = size.marginTop + size.marginBottom;
	  var borderWidth = size.borderLeftWidth + size.borderRightWidth;
	  var borderHeight = size.borderTopWidth + size.borderBottomWidth;
	
	  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;
	
	  // overwrite width and height if we can get it from style
	  var styleWidth = getStyleSize( style.width );
	  if ( styleWidth !== false ) {
	    size.width = styleWidth +
	      // add padding and border unless it's already including it
	      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );
	  }
	
	  var styleHeight = getStyleSize( style.height );
	  if ( styleHeight !== false ) {
	    size.height = styleHeight +
	      // add padding and border unless it's already including it
	      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );
	  }
	
	  size.innerWidth = size.width - ( paddingWidth + borderWidth );
	  size.innerHeight = size.height - ( paddingHeight + borderHeight );
	
	  size.outerWidth = size.width + marginWidth;
	  size.outerHeight = size.height + marginHeight;
	
	  return size;
	}
	
	// IE8 returns percent values, not pixels
	// taken from jQuery's curCSS
	function mungeNonPixel( elem, value ) {
	  // IE8 and has percent value
	  if ( window.getComputedStyle || value.indexOf('%') === -1 ) {
	    return value;
	  }
	  var style = elem.style;
	  // Remember the original values
	  var left = style.left;
	  var rs = elem.runtimeStyle;
	  var rsLeft = rs && rs.left;
	
	  // Put in the new values to get a computed value out
	  if ( rsLeft ) {
	    rs.left = elem.currentStyle.left;
	  }
	  style.left = value;
	  value = style.pixelLeft;
	
	  // Revert the changed values
	  style.left = left;
	  if ( rsLeft ) {
	    rs.left = rsLeft;
	  }
	
	  return value;
	}
	
	return getSize;
	
	}
	
	// transport
	if ( true ) {
	  // AMD for RequireJS
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __WEBPACK_LOCAL_MODULE_3__ ], __WEBPACK_AMD_DEFINE_FACTORY__ = (defineGetSize), __WEBPACK_LOCAL_MODULE_4__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	} else if ( typeof exports === 'object' ) {
	  // CommonJS for Component
	  module.exports = defineGetSize( require('desandro-get-style-property') );
	} else {
	  // browser global
	  window.getSize = defineGetSize( window.getStyleProperty );
	}
	
	})( window );
	
	/*!
	 * docReady v1.0.4
	 * Cross browser DOMContentLoaded event emitter
	 * MIT license
	 */
	
	/*jshint browser: true, strict: true, undef: true, unused: true*/
	/*global define: false, require: false, module: false */
	
	( function( window ) {
	
	
	
	var document = window.document;
	// collection of functions to be triggered on ready
	var queue = [];
	
	function docReady( fn ) {
	  // throw out non-functions
	  if ( typeof fn !== 'function' ) {
	    return;
	  }
	
	  if ( docReady.isReady ) {
	    // ready now, hit it
	    fn();
	  } else {
	    // queue function when ready
	    queue.push( fn );
	  }
	}
	
	docReady.isReady = false;
	
	// triggered on various doc ready events
	function onReady( event ) {
	  // bail if already triggered or IE8 document is not ready just yet
	  var isIE8NotReady = event.type === 'readystatechange' && document.readyState !== 'complete';
	  if ( docReady.isReady || isIE8NotReady ) {
	    return;
	  }
	
	  trigger();
	}
	
	function trigger() {
	  docReady.isReady = true;
	  // process queue
	  for ( var i=0, len = queue.length; i < len; i++ ) {
	    var fn = queue[i];
	    fn();
	  }
	}
	
	function defineDocReady( eventie ) {
	  // trigger ready if page is ready
	  if ( document.readyState === 'complete' ) {
	    trigger();
	  } else {
	    // listen for events
	    eventie.bind( document, 'DOMContentLoaded', onReady );
	    eventie.bind( document, 'readystatechange', onReady );
	    eventie.bind( window, 'load', onReady );
	  }
	
	  return docReady;
	}
	
	// transport
	if ( true ) {
	  // AMD
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __WEBPACK_LOCAL_MODULE_1__ ], __WEBPACK_AMD_DEFINE_FACTORY__ = (defineDocReady), __WEBPACK_LOCAL_MODULE_5__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	} else if ( typeof exports === 'object' ) {
	  module.exports = defineDocReady( require('eventie') );
	} else {
	  // browser global
	  window.docReady = defineDocReady( window.eventie );
	}
	
	})( window );
	
	/**
	 * matchesSelector v1.0.3
	 * matchesSelector( element, '.selector' )
	 * MIT license
	 */
	
	/*jshint browser: true, strict: true, undef: true, unused: true */
	/*global define: false, module: false */
	
	( function( ElemProto ) {
	
	  'use strict';
	
	  var matchesMethod = ( function() {
	    // check for the standard method name first
	    if ( ElemProto.matches ) {
	      return 'matches';
	    }
	    // check un-prefixed
	    if ( ElemProto.matchesSelector ) {
	      return 'matchesSelector';
	    }
	    // check vendor prefixes
	    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];
	
	    for ( var i=0, len = prefixes.length; i < len; i++ ) {
	      var prefix = prefixes[i];
	      var method = prefix + 'MatchesSelector';
	      if ( ElemProto[ method ] ) {
	        return method;
	      }
	    }
	  })();
	
	  // ----- match ----- //
	
	  function match( elem, selector ) {
	    return elem[ matchesMethod ]( selector );
	  }
	
	  // ----- appendToFragment ----- //
	
	  function checkParent( elem ) {
	    // not needed if already has parent
	    if ( elem.parentNode ) {
	      return;
	    }
	    var fragment = document.createDocumentFragment();
	    fragment.appendChild( elem );
	  }
	
	  // ----- query ----- //
	
	  // fall back to using QSA
	  // thx @jonathantneal https://gist.github.com/3062955
	  function query( elem, selector ) {
	    // append to fragment if no parent
	    checkParent( elem );
	
	    // match elem with all selected elems of parent
	    var elems = elem.parentNode.querySelectorAll( selector );
	    for ( var i=0, len = elems.length; i < len; i++ ) {
	      // return true if match
	      if ( elems[i] === elem ) {
	        return true;
	      }
	    }
	    // otherwise return false
	    return false;
	  }
	
	  // ----- matchChild ----- //
	
	  function matchChild( elem, selector ) {
	    checkParent( elem );
	    return match( elem, selector );
	  }
	
	  // ----- matchesSelector ----- //
	
	  var matchesSelector;
	
	  if ( matchesMethod ) {
	    // IE9 supports matchesSelector, but doesn't work on orphaned elems
	    // check for that
	    var div = document.createElement('div');
	    var supportsOrphans = match( div, 'div' );
	    matchesSelector = supportsOrphans ? match : matchChild;
	  } else {
	    matchesSelector = query;
	  }
	
	  // transport
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_6__ = (function() {
	      return matchesSelector;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	  } else if ( typeof exports === 'object' ) {
	    module.exports = matchesSelector;
	  }
	  else {
	    // browser global
	    window.matchesSelector = matchesSelector;
	  }
	
	})( Element.prototype );
	
	/**
	 * Fizzy UI utils v1.0.1
	 * MIT license
	 */
	
	/*jshint browser: true, undef: true, unused: true, strict: true */
	
	( function( window, factory ) {
	  /*global define: false, module: false, require: false */
	  'use strict';
	  // universal module definition
	
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	      __WEBPACK_LOCAL_MODULE_5__,
	      __WEBPACK_LOCAL_MODULE_6__
	    ], __WEBPACK_LOCAL_MODULE_7__ = (function( docReady, matchesSelector ) {
	      return factory( window, docReady, matchesSelector );
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      window,
	      require('doc-ready'),
	      require('desandro-matches-selector')
	    );
	  } else {
	    // browser global
	    window.fizzyUIUtils = factory(
	      window,
	      window.docReady,
	      window.matchesSelector
	    );
	  }
	
	}( window, function factory( window, docReady, matchesSelector ) {
	
	
	
	var utils = {};
	
	// ----- extend ----- //
	
	// extends objects
	utils.extend = function( a, b ) {
	  for ( var prop in b ) {
	    a[ prop ] = b[ prop ];
	  }
	  return a;
	};
	
	// ----- modulo ----- //
	
	utils.modulo = function( num, div ) {
	  return ( ( num % div ) + div ) % div;
	};
	
	// ----- isArray ----- //
	  
	var objToString = Object.prototype.toString;
	utils.isArray = function( obj ) {
	  return objToString.call( obj ) == '[object Array]';
	};
	
	// ----- makeArray ----- //
	
	// turn element or nodeList into an array
	utils.makeArray = function( obj ) {
	  var ary = [];
	  if ( utils.isArray( obj ) ) {
	    // use object if already an array
	    ary = obj;
	  } else if ( obj && typeof obj.length == 'number' ) {
	    // convert nodeList to array
	    for ( var i=0, len = obj.length; i < len; i++ ) {
	      ary.push( obj[i] );
	    }
	  } else {
	    // array of single index
	    ary.push( obj );
	  }
	  return ary;
	};
	
	// ----- indexOf ----- //
	
	// index of helper cause IE8
	utils.indexOf = Array.prototype.indexOf ? function( ary, obj ) {
	    return ary.indexOf( obj );
	  } : function( ary, obj ) {
	    for ( var i=0, len = ary.length; i < len; i++ ) {
	      if ( ary[i] === obj ) {
	        return i;
	      }
	    }
	    return -1;
	  };
	
	// ----- removeFrom ----- //
	
	utils.removeFrom = function( ary, obj ) {
	  var index = utils.indexOf( ary, obj );
	  if ( index != -1 ) {
	    ary.splice( index, 1 );
	  }
	};
	
	// ----- isElement ----- //
	
	// http://stackoverflow.com/a/384380/182183
	utils.isElement = ( typeof HTMLElement == 'function' || typeof HTMLElement == 'object' ) ?
	  function isElementDOM2( obj ) {
	    return obj instanceof HTMLElement;
	  } :
	  function isElementQuirky( obj ) {
	    return obj && typeof obj == 'object' &&
	      obj.nodeType == 1 && typeof obj.nodeName == 'string';
	  };
	
	// ----- setText ----- //
	
	utils.setText = ( function() {
	  var setTextProperty;
	  function setText( elem, text ) {
	    // only check setTextProperty once
	    setTextProperty = setTextProperty || ( document.documentElement.textContent !== undefined ? 'textContent' : 'innerText' );
	    elem[ setTextProperty ] = text;
	  }
	  return setText;
	})();
	
	// ----- getParent ----- //
	
	utils.getParent = function( elem, selector ) {
	  while ( elem != document.body ) {
	    elem = elem.parentNode;
	    if ( matchesSelector( elem, selector ) ) {
	      return elem;
	    }
	  }
	};
	
	// ----- getQueryElement ----- //
	
	// use element as selector string
	utils.getQueryElement = function( elem ) {
	  if ( typeof elem == 'string' ) {
	    return document.querySelector( elem );
	  }
	  return elem;
	};
	
	// ----- handleEvent ----- //
	
	// enable .ontype to trigger from .addEventListener( elem, 'type' )
	utils.handleEvent = function( event ) {
	  var method = 'on' + event.type;
	  if ( this[ method ] ) {
	    this[ method ]( event );
	  }
	};
	
	// ----- filterFindElements ----- //
	
	utils.filterFindElements = function( elems, selector ) {
	  // make array of elems
	  elems = utils.makeArray( elems );
	  var ffElems = [];
	
	  for ( var i=0, len = elems.length; i < len; i++ ) {
	    var elem = elems[i];
	    // check that elem is an actual element
	    if ( !utils.isElement( elem ) ) {
	      continue;
	    }
	    // filter & find items if we have a selector
	    if ( selector ) {
	      // filter siblings
	      if ( matchesSelector( elem, selector ) ) {
	        ffElems.push( elem );
	      }
	      // find children
	      var childElems = elem.querySelectorAll( selector );
	      // concat childElems to filterFound array
	      for ( var j=0, jLen = childElems.length; j < jLen; j++ ) {
	        ffElems.push( childElems[j] );
	      }
	    } else {
	      ffElems.push( elem );
	    }
	  }
	
	  return ffElems;
	};
	
	// ----- debounceMethod ----- //
	
	utils.debounceMethod = function( _class, methodName, threshold ) {
	  // original method
	  var method = _class.prototype[ methodName ];
	  var timeoutName = methodName + 'Timeout';
	
	  _class.prototype[ methodName ] = function() {
	    var timeout = this[ timeoutName ];
	    if ( timeout ) {
	      clearTimeout( timeout );
	    }
	    var args = arguments;
	
	    var _this = this;
	    this[ timeoutName ] = setTimeout( function() {
	      method.apply( _this, args );
	      delete _this[ timeoutName ];
	    }, threshold || 100 );
	  };
	};
	
	// ----- htmlInit ----- //
	
	// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
	utils.toDashed = function( str ) {
	  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {
	    return $1 + '-' + $2;
	  }).toLowerCase();
	};
	
	var console = window.console;
	/**
	 * allow user to initialize classes via .js-namespace class
	 * htmlInit( Widget, 'widgetName' )
	 * options are parsed from data-namespace-option attribute
	 */
	utils.htmlInit = function( WidgetClass, namespace ) {
	  docReady( function() {
	    var dashedNamespace = utils.toDashed( namespace );
	    var elems = document.querySelectorAll( '.js-' + dashedNamespace );
	    var dataAttr = 'data-' + dashedNamespace + '-options';
	
	    for ( var i=0, len = elems.length; i < len; i++ ) {
	      var elem = elems[i];
	      var attr = elem.getAttribute( dataAttr );
	      var options;
	      try {
	        options = attr && JSON.parse( attr );
	      } catch ( error ) {
	        // log error, do not initialize
	        if ( console ) {
	          console.error( 'Error parsing ' + dataAttr + ' on ' +
	            elem.nodeName.toLowerCase() + ( elem.id ? '#' + elem.id : '' ) + ': ' +
	            error );
	        }
	        continue;
	      }
	      // initialize
	      var instance = new WidgetClass( elem, options );
	      // make available via $().data('layoutname')
	      var jQuery = window.jQuery;
	      if ( jQuery ) {
	        jQuery.data( elem, namespace, instance );
	      }
	    }
	  });
	};
	
	// -----  ----- //
	
	return utils;
	
	}));
	
	/**
	 * Outlayer Item
	 */
	
	( function( window, factory ) {
	  'use strict';
	  // universal module definition
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __WEBPACK_LOCAL_MODULE_2__,
	        __WEBPACK_LOCAL_MODULE_4__,
	        __WEBPACK_LOCAL_MODULE_3__,
	        __WEBPACK_LOCAL_MODULE_7__
	      ], __WEBPACK_LOCAL_MODULE_8__ = (function( EventEmitter, getSize, getStyleProperty, utils ) {
	        return factory( window, EventEmitter, getSize, getStyleProperty, utils );
	      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	  } else if (typeof exports === 'object') {
	    // CommonJS
	    module.exports = factory(
	      window,
	      require('wolfy87-eventemitter'),
	      require('get-size'),
	      require('desandro-get-style-property'),
	      require('fizzy-ui-utils')
	    );
	  } else {
	    // browser global
	    window.Outlayer = {};
	    window.Outlayer.Item = factory(
	      window,
	      window.EventEmitter,
	      window.getSize,
	      window.getStyleProperty,
	      window.fizzyUIUtils
	    );
	  }
	
	}( window, function factory( window, EventEmitter, getSize, getStyleProperty, utils ) {
	'use strict';
	
	// ----- helpers ----- //
	
	var getComputedStyle = window.getComputedStyle;
	var getStyle = getComputedStyle ?
	  function( elem ) {
	    return getComputedStyle( elem, null );
	  } :
	  function( elem ) {
	    return elem.currentStyle;
	  };
	
	
	function isEmptyObj( obj ) {
	  for ( var prop in obj ) {
	    return false;
	  }
	  prop = null;
	  return true;
	}
	
	// -------------------------- CSS3 support -------------------------- //
	
	var transitionProperty = getStyleProperty('transition');
	var transformProperty = getStyleProperty('transform');
	var supportsCSS3 = transitionProperty && transformProperty;
	var is3d = !!getStyleProperty('perspective');
	
	var transitionEndEvent = {
	  WebkitTransition: 'webkitTransitionEnd',
	  MozTransition: 'transitionend',
	  OTransition: 'otransitionend',
	  transition: 'transitionend'
	}[ transitionProperty ];
	
	// properties that could have vendor prefix
	var prefixableProperties = [
	  'transform',
	  'transition',
	  'transitionDuration',
	  'transitionProperty'
	];
	
	// cache all vendor properties
	var vendorProperties = ( function() {
	  var cache = {};
	  for ( var i=0, len = prefixableProperties.length; i < len; i++ ) {
	    var prop = prefixableProperties[i];
	    var supportedProp = getStyleProperty( prop );
	    if ( supportedProp && supportedProp !== prop ) {
	      cache[ prop ] = supportedProp;
	    }
	  }
	  return cache;
	})();
	
	// -------------------------- Item -------------------------- //
	
	function Item( element, layout ) {
	  if ( !element ) {
	    return;
	  }
	
	  this.element = element;
	  // parent layout class, i.e. Masonry, Isotope, or Packery
	  this.layout = layout;
	  this.position = {
	    x: 0,
	    y: 0
	  };
	
	  this._create();
	}
	
	// inherit EventEmitter
	utils.extend( Item.prototype, EventEmitter.prototype );
	
	Item.prototype._create = function() {
	  // transition objects
	  this._transn = {
	    ingProperties: {},
	    clean: {},
	    onEnd: {}
	  };
	
	  this.css({
	    position: 'absolute'
	  });
	};
	
	// trigger specified handler for event type
	Item.prototype.handleEvent = function( event ) {
	  var method = 'on' + event.type;
	  if ( this[ method ] ) {
	    this[ method ]( event );
	  }
	};
	
	Item.prototype.getSize = function() {
	  this.size = getSize( this.element );
	};
	
	/**
	 * apply CSS styles to element
	 * @param {Object} style
	 */
	Item.prototype.css = function( style ) {
	  var elemStyle = this.element.style;
	
	  for ( var prop in style ) {
	    // use vendor property if available
	    var supportedProp = vendorProperties[ prop ] || prop;
	    elemStyle[ supportedProp ] = style[ prop ];
	  }
	};
	
	 // measure position, and sets it
	Item.prototype.getPosition = function() {
	  var style = getStyle( this.element );
	  var layoutOptions = this.layout.options;
	  var isOriginLeft = layoutOptions.isOriginLeft;
	  var isOriginTop = layoutOptions.isOriginTop;
	  var xValue = style[ isOriginLeft ? 'left' : 'right' ];
	  var yValue = style[ isOriginTop ? 'top' : 'bottom' ];
	  // convert percent to pixels
	  var layoutSize = this.layout.size;
	  var x = xValue.indexOf('%') != -1 ?
	    ( parseFloat( xValue ) / 100 ) * layoutSize.width : parseInt( xValue, 10 );
	  var y = yValue.indexOf('%') != -1 ?
	    ( parseFloat( yValue ) / 100 ) * layoutSize.height : parseInt( yValue, 10 );
	
	  // clean up 'auto' or other non-integer values
	  x = isNaN( x ) ? 0 : x;
	  y = isNaN( y ) ? 0 : y;
	  // remove padding from measurement
	  x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;
	  y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;
	
	  this.position.x = x;
	  this.position.y = y;
	};
	
	// set settled position, apply padding
	Item.prototype.layoutPosition = function() {
	  var layoutSize = this.layout.size;
	  var layoutOptions = this.layout.options;
	  var style = {};
	
	  // x
	  var xPadding = layoutOptions.isOriginLeft ? 'paddingLeft' : 'paddingRight';
	  var xProperty = layoutOptions.isOriginLeft ? 'left' : 'right';
	  var xResetProperty = layoutOptions.isOriginLeft ? 'right' : 'left';
	
	  var x = this.position.x + layoutSize[ xPadding ];
	  // set in percentage or pixels
	  style[ xProperty ] = this.getXValue( x );
	  // reset other property
	  style[ xResetProperty ] = '';
	
	  // y
	  var yPadding = layoutOptions.isOriginTop ? 'paddingTop' : 'paddingBottom';
	  var yProperty = layoutOptions.isOriginTop ? 'top' : 'bottom';
	  var yResetProperty = layoutOptions.isOriginTop ? 'bottom' : 'top';
	
	  var y = this.position.y + layoutSize[ yPadding ];
	  // set in percentage or pixels
	  style[ yProperty ] = this.getYValue( y );
	  // reset other property
	  style[ yResetProperty ] = '';
	
	  this.css( style );
	  this.emitEvent( 'layout', [ this ] );
	};
	
	Item.prototype.getXValue = function( x ) {
	  var layoutOptions = this.layout.options;
	  return layoutOptions.percentPosition && !layoutOptions.isHorizontal ?
	    ( ( x / this.layout.size.width ) * 100 ) + '%' : x + 'px';
	};
	
	Item.prototype.getYValue = function( y ) {
	  var layoutOptions = this.layout.options;
	  return layoutOptions.percentPosition && layoutOptions.isHorizontal ?
	    ( ( y / this.layout.size.height ) * 100 ) + '%' : y + 'px';
	};
	
	
	Item.prototype._transitionTo = function( x, y ) {
	  this.getPosition();
	  // get current x & y from top/left
	  var curX = this.position.x;
	  var curY = this.position.y;
	
	  var compareX = parseInt( x, 10 );
	  var compareY = parseInt( y, 10 );
	  var didNotMove = compareX === this.position.x && compareY === this.position.y;
	
	  // save end position
	  this.setPosition( x, y );
	
	  // if did not move and not transitioning, just go to layout
	  if ( didNotMove && !this.isTransitioning ) {
	    this.layoutPosition();
	    return;
	  }
	
	  var transX = x - curX;
	  var transY = y - curY;
	  var transitionStyle = {};
	  transitionStyle.transform = this.getTranslate( transX, transY );
	
	  this.transition({
	    to: transitionStyle,
	    onTransitionEnd: {
	      transform: this.layoutPosition
	    },
	    isCleaning: true
	  });
	};
	
	Item.prototype.getTranslate = function( x, y ) {
	  // flip cooridinates if origin on right or bottom
	  var layoutOptions = this.layout.options;
	  x = layoutOptions.isOriginLeft ? x : -x;
	  y = layoutOptions.isOriginTop ? y : -y;
	
	  if ( is3d ) {
	    return 'translate3d(' + x + 'px, ' + y + 'px, 0)';
	  }
	
	  return 'translate(' + x + 'px, ' + y + 'px)';
	};
	
	// non transition + transform support
	Item.prototype.goTo = function( x, y ) {
	  this.setPosition( x, y );
	  this.layoutPosition();
	};
	
	// use transition and transforms if supported
	Item.prototype.moveTo = supportsCSS3 ?
	  Item.prototype._transitionTo : Item.prototype.goTo;
	
	Item.prototype.setPosition = function( x, y ) {
	  this.position.x = parseInt( x, 10 );
	  this.position.y = parseInt( y, 10 );
	};
	
	// ----- transition ----- //
	
	/**
	 * @param {Object} style - CSS
	 * @param {Function} onTransitionEnd
	 */
	
	// non transition, just trigger callback
	Item.prototype._nonTransition = function( args ) {
	  this.css( args.to );
	  if ( args.isCleaning ) {
	    this._removeStyles( args.to );
	  }
	  for ( var prop in args.onTransitionEnd ) {
	    args.onTransitionEnd[ prop ].call( this );
	  }
	};
	
	/**
	 * proper transition
	 * @param {Object} args - arguments
	 *   @param {Object} to - style to transition to
	 *   @param {Object} from - style to start transition from
	 *   @param {Boolean} isCleaning - removes transition styles after transition
	 *   @param {Function} onTransitionEnd - callback
	 */
	Item.prototype._transition = function( args ) {
	  // redirect to nonTransition if no transition duration
	  if ( !parseFloat( this.layout.options.transitionDuration ) ) {
	    this._nonTransition( args );
	    return;
	  }
	
	  var _transition = this._transn;
	  // keep track of onTransitionEnd callback by css property
	  for ( var prop in args.onTransitionEnd ) {
	    _transition.onEnd[ prop ] = args.onTransitionEnd[ prop ];
	  }
	  // keep track of properties that are transitioning
	  for ( prop in args.to ) {
	    _transition.ingProperties[ prop ] = true;
	    // keep track of properties to clean up when transition is done
	    if ( args.isCleaning ) {
	      _transition.clean[ prop ] = true;
	    }
	  }
	
	  // set from styles
	  if ( args.from ) {
	    this.css( args.from );
	    // force redraw. http://blog.alexmaccaw.com/css-transitions
	    var h = this.element.offsetHeight;
	    // hack for JSHint to hush about unused var
	    h = null;
	  }
	  // enable transition
	  this.enableTransition( args.to );
	  // set styles that are transitioning
	  this.css( args.to );
	
	  this.isTransitioning = true;
	
	};
	
	// dash before all cap letters, including first for
	// WebkitTransform => -webkit-transform
	function toDashedAll( str ) {
	  return str.replace( /([A-Z])/g, function( $1 ) {
	    return '-' + $1.toLowerCase();
	  });
	}
	
	var transitionProps = 'opacity,' +
	  toDashedAll( vendorProperties.transform || 'transform' );
	
	Item.prototype.enableTransition = function(/* style */) {
	  // HACK changing transitionProperty during a transition
	  // will cause transition to jump
	  if ( this.isTransitioning ) {
	    return;
	  }
	
	  // make `transition: foo, bar, baz` from style object
	  // HACK un-comment this when enableTransition can work
	  // while a transition is happening
	  // var transitionValues = [];
	  // for ( var prop in style ) {
	  //   // dash-ify camelCased properties like WebkitTransition
	  //   prop = vendorProperties[ prop ] || prop;
	  //   transitionValues.push( toDashedAll( prop ) );
	  // }
	  // enable transition styles
	  this.css({
	    transitionProperty: transitionProps,
	    transitionDuration: this.layout.options.transitionDuration
	  });
	  // listen for transition end event
	  this.element.addEventListener( transitionEndEvent, this, false );
	};
	
	Item.prototype.transition = Item.prototype[ transitionProperty ? '_transition' : '_nonTransition' ];
	
	// ----- events ----- //
	
	Item.prototype.onwebkitTransitionEnd = function( event ) {
	  this.ontransitionend( event );
	};
	
	Item.prototype.onotransitionend = function( event ) {
	  this.ontransitionend( event );
	};
	
	// properties that I munge to make my life easier
	var dashedVendorProperties = {
	  '-webkit-transform': 'transform',
	  '-moz-transform': 'transform',
	  '-o-transform': 'transform'
	};
	
	Item.prototype.ontransitionend = function( event ) {
	  // disregard bubbled events from children
	  if ( event.target !== this.element ) {
	    return;
	  }
	  var _transition = this._transn;
	  // get property name of transitioned property, convert to prefix-free
	  var propertyName = dashedVendorProperties[ event.propertyName ] || event.propertyName;
	
	  // remove property that has completed transitioning
	  delete _transition.ingProperties[ propertyName ];
	  // check if any properties are still transitioning
	  if ( isEmptyObj( _transition.ingProperties ) ) {
	    // all properties have completed transitioning
	    this.disableTransition();
	  }
	  // clean style
	  if ( propertyName in _transition.clean ) {
	    // clean up style
	    this.element.style[ event.propertyName ] = '';
	    delete _transition.clean[ propertyName ];
	  }
	  // trigger onTransitionEnd callback
	  if ( propertyName in _transition.onEnd ) {
	    var onTransitionEnd = _transition.onEnd[ propertyName ];
	    onTransitionEnd.call( this );
	    delete _transition.onEnd[ propertyName ];
	  }
	
	  this.emitEvent( 'transitionEnd', [ this ] );
	};
	
	Item.prototype.disableTransition = function() {
	  this.removeTransitionStyles();
	  this.element.removeEventListener( transitionEndEvent, this, false );
	  this.isTransitioning = false;
	};
	
	/**
	 * removes style property from element
	 * @param {Object} style
	**/
	Item.prototype._removeStyles = function( style ) {
	  // clean up transition styles
	  var cleanStyle = {};
	  for ( var prop in style ) {
	    cleanStyle[ prop ] = '';
	  }
	  this.css( cleanStyle );
	};
	
	var cleanTransitionStyle = {
	  transitionProperty: '',
	  transitionDuration: ''
	};
	
	Item.prototype.removeTransitionStyles = function() {
	  // remove transition
	  this.css( cleanTransitionStyle );
	};
	
	// ----- show/hide/remove ----- //
	
	// remove element from DOM
	Item.prototype.removeElem = function() {
	  this.element.parentNode.removeChild( this.element );
	  // remove display: none
	  this.css({ display: '' });
	  this.emitEvent( 'remove', [ this ] );
	};
	
	Item.prototype.remove = function() {
	  // just remove element if no transition support or no transition
	  if ( !transitionProperty || !parseFloat( this.layout.options.transitionDuration ) ) {
	    this.removeElem();
	    return;
	  }
	
	  // start transition
	  var _this = this;
	  this.once( 'transitionEnd', function() {
	    _this.removeElem();
	  });
	  this.hide();
	};
	
	Item.prototype.reveal = function() {
	  delete this.isHidden;
	  // remove display: none
	  this.css({ display: '' });
	
	  var options = this.layout.options;
	
	  var onTransitionEnd = {};
	  var transitionEndProperty = this.getHideRevealTransitionEndProperty('visibleStyle');
	  onTransitionEnd[ transitionEndProperty ] = this.onRevealTransitionEnd;
	
	  this.transition({
	    from: options.hiddenStyle,
	    to: options.visibleStyle,
	    isCleaning: true,
	    onTransitionEnd: onTransitionEnd
	  });
	};
	
	Item.prototype.onRevealTransitionEnd = function() {
	  // check if still visible
	  // during transition, item may have been hidden
	  if ( !this.isHidden ) {
	    this.emitEvent('reveal');
	  }
	};
	
	/**
	 * get style property use for hide/reveal transition end
	 * @param {String} styleProperty - hiddenStyle/visibleStyle
	 * @returns {String}
	 */
	Item.prototype.getHideRevealTransitionEndProperty = function( styleProperty ) {
	  var optionStyle = this.layout.options[ styleProperty ];
	  // use opacity
	  if ( optionStyle.opacity ) {
	    return 'opacity';
	  }
	  // get first property
	  for ( var prop in optionStyle ) {
	    return prop;
	  }
	};
	
	Item.prototype.hide = function() {
	  // set flag
	  this.isHidden = true;
	  // remove display: none
	  this.css({ display: '' });
	
	  var options = this.layout.options;
	
	  var onTransitionEnd = {};
	  var transitionEndProperty = this.getHideRevealTransitionEndProperty('hiddenStyle');
	  onTransitionEnd[ transitionEndProperty ] = this.onHideTransitionEnd;
	
	  this.transition({
	    from: options.visibleStyle,
	    to: options.hiddenStyle,
	    // keep hidden stuff hidden
	    isCleaning: true,
	    onTransitionEnd: onTransitionEnd
	  });
	};
	
	Item.prototype.onHideTransitionEnd = function() {
	  // check if still hidden
	  // during transition, item may have been un-hidden
	  if ( this.isHidden ) {
	    this.css({ display: 'none' });
	    this.emitEvent('hide');
	  }
	};
	
	Item.prototype.destroy = function() {
	  this.css({
	    position: '',
	    left: '',
	    right: '',
	    top: '',
	    bottom: '',
	    transition: '',
	    transform: ''
	  });
	};
	
	return Item;
	
	}));
	
	/*!
	 * Outlayer v1.4.2
	 * the brains and guts of a layout library
	 * MIT license
	 */
	
	( function( window, factory ) {
	  'use strict';
	  // universal module definition
	
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __WEBPACK_LOCAL_MODULE_1__,
	        __WEBPACK_LOCAL_MODULE_2__,
	        __WEBPACK_LOCAL_MODULE_4__,
	        __WEBPACK_LOCAL_MODULE_7__,
	        __WEBPACK_LOCAL_MODULE_8__
	      ], __WEBPACK_LOCAL_MODULE_9__ = (function( eventie, EventEmitter, getSize, utils, Item ) {
	        return factory( window, eventie, EventEmitter, getSize, utils, Item);
	      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      window,
	      require('eventie'),
	      require('wolfy87-eventemitter'),
	      require('get-size'),
	      require('fizzy-ui-utils'),
	      require('./item')
	    );
	  } else {
	    // browser global
	    window.Outlayer = factory(
	      window,
	      window.eventie,
	      window.EventEmitter,
	      window.getSize,
	      window.fizzyUIUtils,
	      window.Outlayer.Item
	    );
	  }
	
	}( window, function factory( window, eventie, EventEmitter, getSize, utils, Item ) {
	'use strict';
	
	// ----- vars ----- //
	
	var console = window.console;
	var jQuery = window.jQuery;
	var noop = function() {};
	
	// -------------------------- Outlayer -------------------------- //
	
	// globally unique identifiers
	var GUID = 0;
	// internal store of all Outlayer intances
	var instances = {};
	
	
	/**
	 * @param {Element, String} element
	 * @param {Object} options
	 * @constructor
	 */
	function Outlayer( element, options ) {
	  var queryElement = utils.getQueryElement( element );
	  if ( !queryElement ) {
	    if ( console ) {
	      console.error( 'Bad element for ' + this.constructor.namespace +
	        ': ' + ( queryElement || element ) );
	    }
	    return;
	  }
	  this.element = queryElement;
	  // add jQuery
	  if ( jQuery ) {
	    this.$element = jQuery( this.element );
	  }
	
	  // options
	  this.options = utils.extend( {}, this.constructor.defaults );
	  this.option( options );
	
	  // add id for Outlayer.getFromElement
	  var id = ++GUID;
	  this.element.outlayerGUID = id; // expando
	  instances[ id ] = this; // associate via id
	
	  // kick it off
	  this._create();
	
	  if ( this.options.isInitLayout ) {
	    this.layout();
	  }
	}
	
	// settings are for internal use only
	Outlayer.namespace = 'outlayer';
	Outlayer.Item = Item;
	
	// default options
	Outlayer.defaults = {
	  containerStyle: {
	    position: 'relative'
	  },
	  isInitLayout: true,
	  isOriginLeft: true,
	  isOriginTop: true,
	  isResizeBound: true,
	  isResizingContainer: true,
	  // item options
	  transitionDuration: '0.4s',
	  hiddenStyle: {
	    opacity: 0,
	    transform: 'scale(0.001)'
	  },
	  visibleStyle: {
	    opacity: 1,
	    transform: 'scale(1)'
	  }
	};
	
	// inherit EventEmitter
	utils.extend( Outlayer.prototype, EventEmitter.prototype );
	
	/**
	 * set options
	 * @param {Object} opts
	 */
	Outlayer.prototype.option = function( opts ) {
	  utils.extend( this.options, opts );
	};
	
	Outlayer.prototype._create = function() {
	  // get items from children
	  this.reloadItems();
	  // elements that affect layout, but are not laid out
	  this.stamps = [];
	  this.stamp( this.options.stamp );
	  // set container style
	  utils.extend( this.element.style, this.options.containerStyle );
	
	  // bind resize method
	  if ( this.options.isResizeBound ) {
	    this.bindResize();
	  }
	};
	
	// goes through all children again and gets bricks in proper order
	Outlayer.prototype.reloadItems = function() {
	  // collection of item elements
	  this.items = this._itemize( this.element.children );
	};
	
	
	/**
	 * turn elements into Outlayer.Items to be used in layout
	 * @param {Array or NodeList or HTMLElement} elems
	 * @returns {Array} items - collection of new Outlayer Items
	 */
	Outlayer.prototype._itemize = function( elems ) {
	
	  var itemElems = this._filterFindItemElements( elems );
	  var Item = this.constructor.Item;
	
	  // create new Outlayer Items for collection
	  var items = [];
	  for ( var i=0, len = itemElems.length; i < len; i++ ) {
	    var elem = itemElems[i];
	    var item = new Item( elem, this );
	    items.push( item );
	  }
	
	  return items;
	};
	
	/**
	 * get item elements to be used in layout
	 * @param {Array or NodeList or HTMLElement} elems
	 * @returns {Array} items - item elements
	 */
	Outlayer.prototype._filterFindItemElements = function( elems ) {
	  return utils.filterFindElements( elems, this.options.itemSelector );
	};
	
	/**
	 * getter method for getting item elements
	 * @returns {Array} elems - collection of item elements
	 */
	Outlayer.prototype.getItemElements = function() {
	  var elems = [];
	  for ( var i=0, len = this.items.length; i < len; i++ ) {
	    elems.push( this.items[i].element );
	  }
	  return elems;
	};
	
	// ----- init & layout ----- //
	
	/**
	 * lays out all items
	 */
	Outlayer.prototype.layout = function() {
	  this._resetLayout();
	  this._manageStamps();
	
	  // don't animate first layout
	  var isInstant = this.options.isLayoutInstant !== undefined ?
	    this.options.isLayoutInstant : !this._isLayoutInited;
	  this.layoutItems( this.items, isInstant );
	
	  // flag for initalized
	  this._isLayoutInited = true;
	};
	
	// _init is alias for layout
	Outlayer.prototype._init = Outlayer.prototype.layout;
	
	/**
	 * logic before any new layout
	 */
	Outlayer.prototype._resetLayout = function() {
	  this.getSize();
	};
	
	
	Outlayer.prototype.getSize = function() {
	  this.size = getSize( this.element );
	};
	
	/**
	 * get measurement from option, for columnWidth, rowHeight, gutter
	 * if option is String -> get element from selector string, & get size of element
	 * if option is Element -> get size of element
	 * else use option as a number
	 *
	 * @param {String} measurement
	 * @param {String} size - width or height
	 * @private
	 */
	Outlayer.prototype._getMeasurement = function( measurement, size ) {
	  var option = this.options[ measurement ];
	  var elem;
	  if ( !option ) {
	    // default to 0
	    this[ measurement ] = 0;
	  } else {
	    // use option as an element
	    if ( typeof option === 'string' ) {
	      elem = this.element.querySelector( option );
	    } else if ( utils.isElement( option ) ) {
	      elem = option;
	    }
	    // use size of element, if element
	    this[ measurement ] = elem ? getSize( elem )[ size ] : option;
	  }
	};
	
	/**
	 * layout a collection of item elements
	 * @api public
	 */
	Outlayer.prototype.layoutItems = function( items, isInstant ) {
	  items = this._getItemsForLayout( items );
	
	  this._layoutItems( items, isInstant );
	
	  this._postLayout();
	};
	
	/**
	 * get the items to be laid out
	 * you may want to skip over some items
	 * @param {Array} items
	 * @returns {Array} items
	 */
	Outlayer.prototype._getItemsForLayout = function( items ) {
	  var layoutItems = [];
	  for ( var i=0, len = items.length; i < len; i++ ) {
	    var item = items[i];
	    if ( !item.isIgnored ) {
	      layoutItems.push( item );
	    }
	  }
	  return layoutItems;
	};
	
	/**
	 * layout items
	 * @param {Array} items
	 * @param {Boolean} isInstant
	 */
	Outlayer.prototype._layoutItems = function( items, isInstant ) {
	  this._emitCompleteOnItems( 'layout', items );
	
	  if ( !items || !items.length ) {
	    // no items, emit event with empty array
	    return;
	  }
	
	  var queue = [];
	
	  for ( var i=0, len = items.length; i < len; i++ ) {
	    var item = items[i];
	    // get x/y object from method
	    var position = this._getItemLayoutPosition( item );
	    // enqueue
	    position.item = item;
	    position.isInstant = isInstant || item.isLayoutInstant;
	    queue.push( position );
	  }
	
	  this._processLayoutQueue( queue );
	};
	
	/**
	 * get item layout position
	 * @param {Outlayer.Item} item
	 * @returns {Object} x and y position
	 */
	Outlayer.prototype._getItemLayoutPosition = function( /* item */ ) {
	  return {
	    x: 0,
	    y: 0
	  };
	};
	
	/**
	 * iterate over array and position each item
	 * Reason being - separating this logic prevents 'layout invalidation'
	 * thx @paul_irish
	 * @param {Array} queue
	 */
	Outlayer.prototype._processLayoutQueue = function( queue ) {
	  for ( var i=0, len = queue.length; i < len; i++ ) {
	    var obj = queue[i];
	    this._positionItem( obj.item, obj.x, obj.y, obj.isInstant );
	  }
	};
	
	/**
	 * Sets position of item in DOM
	 * @param {Outlayer.Item} item
	 * @param {Number} x - horizontal position
	 * @param {Number} y - vertical position
	 * @param {Boolean} isInstant - disables transitions
	 */
	Outlayer.prototype._positionItem = function( item, x, y, isInstant ) {
	  if ( isInstant ) {
	    // if not transition, just set CSS
	    item.goTo( x, y );
	  } else {
	    item.moveTo( x, y );
	  }
	};
	
	/**
	 * Any logic you want to do after each layout,
	 * i.e. size the container
	 */
	Outlayer.prototype._postLayout = function() {
	  this.resizeContainer();
	};
	
	Outlayer.prototype.resizeContainer = function() {
	  if ( !this.options.isResizingContainer ) {
	    return;
	  }
	  var size = this._getContainerSize();
	  if ( size ) {
	    this._setContainerMeasure( size.width, true );
	    this._setContainerMeasure( size.height, false );
	  }
	};
	
	/**
	 * Sets width or height of container if returned
	 * @returns {Object} size
	 *   @param {Number} width
	 *   @param {Number} height
	 */
	Outlayer.prototype._getContainerSize = noop;
	
	/**
	 * @param {Number} measure - size of width or height
	 * @param {Boolean} isWidth
	 */
	Outlayer.prototype._setContainerMeasure = function( measure, isWidth ) {
	  if ( measure === undefined ) {
	    return;
	  }
	
	  var elemSize = this.size;
	  // add padding and border width if border box
	  if ( elemSize.isBorderBox ) {
	    measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight +
	      elemSize.borderLeftWidth + elemSize.borderRightWidth :
	      elemSize.paddingBottom + elemSize.paddingTop +
	      elemSize.borderTopWidth + elemSize.borderBottomWidth;
	  }
	
	  measure = Math.max( measure, 0 );
	  this.element.style[ isWidth ? 'width' : 'height' ] = measure + 'px';
	};
	
	/**
	 * emit eventComplete on a collection of items events
	 * @param {String} eventName
	 * @param {Array} items - Outlayer.Items
	 */
	Outlayer.prototype._emitCompleteOnItems = function( eventName, items ) {
	  var _this = this;
	  function onComplete() {
	    _this.dispatchEvent( eventName + 'Complete', null, [ items ] );
	  }
	
	  var count = items.length;
	  if ( !items || !count ) {
	    onComplete();
	    return;
	  }
	
	  var doneCount = 0;
	  function tick() {
	    doneCount++;
	    if ( doneCount === count ) {
	      onComplete();
	    }
	  }
	
	  // bind callback
	  for ( var i=0, len = items.length; i < len; i++ ) {
	    var item = items[i];
	    item.once( eventName, tick );
	  }
	};
	
	/**
	 * emits events via eventEmitter and jQuery events
	 * @param {String} type - name of event
	 * @param {Event} event - original event
	 * @param {Array} args - extra arguments
	 */
	Outlayer.prototype.dispatchEvent = function( type, event, args ) {
	  // add original event to arguments
	  var emitArgs = event ? [ event ].concat( args ) : args;
	  this.emitEvent( type, emitArgs );
	
	  if ( jQuery ) {
	    // set this.$element
	    this.$element = this.$element || jQuery( this.element );
	    if ( event ) {
	      // create jQuery event
	      var $event = jQuery.Event( event );
	      $event.type = type;
	      this.$element.trigger( $event, args );
	    } else {
	      // just trigger with type if no event available
	      this.$element.trigger( type, args );
	    }
	  }
	};
	
	// -------------------------- ignore & stamps -------------------------- //
	
	
	/**
	 * keep item in collection, but do not lay it out
	 * ignored items do not get skipped in layout
	 * @param {Element} elem
	 */
	Outlayer.prototype.ignore = function( elem ) {
	  var item = this.getItem( elem );
	  if ( item ) {
	    item.isIgnored = true;
	  }
	};
	
	/**
	 * return item to layout collection
	 * @param {Element} elem
	 */
	Outlayer.prototype.unignore = function( elem ) {
	  var item = this.getItem( elem );
	  if ( item ) {
	    delete item.isIgnored;
	  }
	};
	
	/**
	 * adds elements to stamps
	 * @param {NodeList, Array, Element, or String} elems
	 */
	Outlayer.prototype.stamp = function( elems ) {
	  elems = this._find( elems );
	  if ( !elems ) {
	    return;
	  }
	
	  this.stamps = this.stamps.concat( elems );
	  // ignore
	  for ( var i=0, len = elems.length; i < len; i++ ) {
	    var elem = elems[i];
	    this.ignore( elem );
	  }
	};
	
	/**
	 * removes elements to stamps
	 * @param {NodeList, Array, or Element} elems
	 */
	Outlayer.prototype.unstamp = function( elems ) {
	  elems = this._find( elems );
	  if ( !elems ){
	    return;
	  }
	
	  for ( var i=0, len = elems.length; i < len; i++ ) {
	    var elem = elems[i];
	    // filter out removed stamp elements
	    utils.removeFrom( this.stamps, elem );
	    this.unignore( elem );
	  }
	
	};
	
	/**
	 * finds child elements
	 * @param {NodeList, Array, Element, or String} elems
	 * @returns {Array} elems
	 */
	Outlayer.prototype._find = function( elems ) {
	  if ( !elems ) {
	    return;
	  }
	  // if string, use argument as selector string
	  if ( typeof elems === 'string' ) {
	    elems = this.element.querySelectorAll( elems );
	  }
	  elems = utils.makeArray( elems );
	  return elems;
	};
	
	Outlayer.prototype._manageStamps = function() {
	  if ( !this.stamps || !this.stamps.length ) {
	    return;
	  }
	
	  this._getBoundingRect();
	
	  for ( var i=0, len = this.stamps.length; i < len; i++ ) {
	    var stamp = this.stamps[i];
	    this._manageStamp( stamp );
	  }
	};
	
	// update boundingLeft / Top
	Outlayer.prototype._getBoundingRect = function() {
	  // get bounding rect for container element
	  var boundingRect = this.element.getBoundingClientRect();
	  var size = this.size;
	  this._boundingRect = {
	    left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,
	    top: boundingRect.top + size.paddingTop + size.borderTopWidth,
	    right: boundingRect.right - ( size.paddingRight + size.borderRightWidth ),
	    bottom: boundingRect.bottom - ( size.paddingBottom + size.borderBottomWidth )
	  };
	};
	
	/**
	 * @param {Element} stamp
	**/
	Outlayer.prototype._manageStamp = noop;
	
	/**
	 * get x/y position of element relative to container element
	 * @param {Element} elem
	 * @returns {Object} offset - has left, top, right, bottom
	 */
	Outlayer.prototype._getElementOffset = function( elem ) {
	  var boundingRect = elem.getBoundingClientRect();
	  var thisRect = this._boundingRect;
	  var size = getSize( elem );
	  var offset = {
	    left: boundingRect.left - thisRect.left - size.marginLeft,
	    top: boundingRect.top - thisRect.top - size.marginTop,
	    right: thisRect.right - boundingRect.right - size.marginRight,
	    bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom
	  };
	  return offset;
	};
	
	// -------------------------- resize -------------------------- //
	
	// enable event handlers for listeners
	// i.e. resize -> onresize
	Outlayer.prototype.handleEvent = function( event ) {
	  var method = 'on' + event.type;
	  if ( this[ method ] ) {
	    this[ method ]( event );
	  }
	};
	
	/**
	 * Bind layout to window resizing
	 */
	Outlayer.prototype.bindResize = function() {
	  // bind just one listener
	  if ( this.isResizeBound ) {
	    return;
	  }
	  eventie.bind( window, 'resize', this );
	  this.isResizeBound = true;
	};
	
	/**
	 * Unbind layout to window resizing
	 */
	Outlayer.prototype.unbindResize = function() {
	  if ( this.isResizeBound ) {
	    eventie.unbind( window, 'resize', this );
	  }
	  this.isResizeBound = false;
	};
	
	// original debounce by John Hann
	// http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/
	
	// this fires every resize
	Outlayer.prototype.onresize = function() {
	  if ( this.resizeTimeout ) {
	    clearTimeout( this.resizeTimeout );
	  }
	
	  var _this = this;
	  function delayed() {
	    _this.resize();
	    delete _this.resizeTimeout;
	  }
	
	  this.resizeTimeout = setTimeout( delayed, 100 );
	};
	
	// debounced, layout on resize
	Outlayer.prototype.resize = function() {
	  // don't trigger if size did not change
	  // or if resize was unbound. See #9
	  if ( !this.isResizeBound || !this.needsResizeLayout() ) {
	    return;
	  }
	
	  this.layout();
	};
	
	/**
	 * check if layout is needed post layout
	 * @returns Boolean
	 */
	Outlayer.prototype.needsResizeLayout = function() {
	  var size = getSize( this.element );
	  // check that this.size and size are there
	  // IE8 triggers resize on body size change, so they might not be
	  var hasSizes = this.size && size;
	  return hasSizes && size.innerWidth !== this.size.innerWidth;
	};
	
	// -------------------------- methods -------------------------- //
	
	/**
	 * add items to Outlayer instance
	 * @param {Array or NodeList or Element} elems
	 * @returns {Array} items - Outlayer.Items
	**/
	Outlayer.prototype.addItems = function( elems ) {
	  var items = this._itemize( elems );
	  // add items to collection
	  if ( items.length ) {
	    this.items = this.items.concat( items );
	  }
	  return items;
	};
	
	/**
	 * Layout newly-appended item elements
	 * @param {Array or NodeList or Element} elems
	 */
	Outlayer.prototype.appended = function( elems ) {
	  var items = this.addItems( elems );
	  if ( !items.length ) {
	    return;
	  }
	  // layout and reveal just the new items
	  this.layoutItems( items, true );
	  this.reveal( items );
	};
	
	/**
	 * Layout prepended elements
	 * @param {Array or NodeList or Element} elems
	 */
	Outlayer.prototype.prepended = function( elems ) {
	  var items = this._itemize( elems );
	  if ( !items.length ) {
	    return;
	  }
	  // add items to beginning of collection
	  var previousItems = this.items.slice(0);
	  this.items = items.concat( previousItems );
	  // start new layout
	  this._resetLayout();
	  this._manageStamps();
	  // layout new stuff without transition
	  this.layoutItems( items, true );
	  this.reveal( items );
	  // layout previous items
	  this.layoutItems( previousItems );
	};
	
	/**
	 * reveal a collection of items
	 * @param {Array of Outlayer.Items} items
	 */
	Outlayer.prototype.reveal = function( items ) {
	  this._emitCompleteOnItems( 'reveal', items );
	
	  var len = items && items.length;
	  for ( var i=0; len && i < len; i++ ) {
	    var item = items[i];
	    item.reveal();
	  }
	};
	
	/**
	 * hide a collection of items
	 * @param {Array of Outlayer.Items} items
	 */
	Outlayer.prototype.hide = function( items ) {
	  this._emitCompleteOnItems( 'hide', items );
	
	  var len = items && items.length;
	  for ( var i=0; len && i < len; i++ ) {
	    var item = items[i];
	    item.hide();
	  }
	};
	
	/**
	 * reveal item elements
	 * @param {Array}, {Element}, {NodeList} items
	 */
	Outlayer.prototype.revealItemElements = function( elems ) {
	  var items = this.getItems( elems );
	  this.reveal( items );
	};
	
	/**
	 * hide item elements
	 * @param {Array}, {Element}, {NodeList} items
	 */
	Outlayer.prototype.hideItemElements = function( elems ) {
	  var items = this.getItems( elems );
	  this.hide( items );
	};
	
	/**
	 * get Outlayer.Item, given an Element
	 * @param {Element} elem
	 * @param {Function} callback
	 * @returns {Outlayer.Item} item
	 */
	Outlayer.prototype.getItem = function( elem ) {
	  // loop through items to get the one that matches
	  for ( var i=0, len = this.items.length; i < len; i++ ) {
	    var item = this.items[i];
	    if ( item.element === elem ) {
	      // return item
	      return item;
	    }
	  }
	};
	
	/**
	 * get collection of Outlayer.Items, given Elements
	 * @param {Array} elems
	 * @returns {Array} items - Outlayer.Items
	 */
	Outlayer.prototype.getItems = function( elems ) {
	  elems = utils.makeArray( elems );
	  var items = [];
	  for ( var i=0, len = elems.length; i < len; i++ ) {
	    var elem = elems[i];
	    var item = this.getItem( elem );
	    if ( item ) {
	      items.push( item );
	    }
	  }
	
	  return items;
	};
	
	/**
	 * remove element(s) from instance and DOM
	 * @param {Array or NodeList or Element} elems
	 */
	Outlayer.prototype.remove = function( elems ) {
	  var removeItems = this.getItems( elems );
	
	  this._emitCompleteOnItems( 'remove', removeItems );
	
	  // bail if no items to remove
	  if ( !removeItems || !removeItems.length ) {
	    return;
	  }
	
	  for ( var i=0, len = removeItems.length; i < len; i++ ) {
	    var item = removeItems[i];
	    item.remove();
	    // remove item from collection
	    utils.removeFrom( this.items, item );
	  }
	};
	
	// ----- destroy ----- //
	
	// remove and disable Outlayer instance
	Outlayer.prototype.destroy = function() {
	  // clean up dynamic styles
	  var style = this.element.style;
	  style.height = '';
	  style.position = '';
	  style.width = '';
	  // destroy items
	  for ( var i=0, len = this.items.length; i < len; i++ ) {
	    var item = this.items[i];
	    item.destroy();
	  }
	
	  this.unbindResize();
	
	  var id = this.element.outlayerGUID;
	  delete instances[ id ]; // remove reference to instance by id
	  delete this.element.outlayerGUID;
	  // remove data for jQuery
	  if ( jQuery ) {
	    jQuery.removeData( this.element, this.constructor.namespace );
	  }
	
	};
	
	// -------------------------- data -------------------------- //
	
	/**
	 * get Outlayer instance from element
	 * @param {Element} elem
	 * @returns {Outlayer}
	 */
	Outlayer.data = function( elem ) {
	  elem = utils.getQueryElement( elem );
	  var id = elem && elem.outlayerGUID;
	  return id && instances[ id ];
	};
	
	
	// -------------------------- create Outlayer class -------------------------- //
	
	/**
	 * create a layout class
	 * @param {String} namespace
	 */
	Outlayer.create = function( namespace, options ) {
	  // sub-class Outlayer
	  function Layout() {
	    Outlayer.apply( this, arguments );
	  }
	  // inherit Outlayer prototype, use Object.create if there
	  if ( Object.create ) {
	    Layout.prototype = Object.create( Outlayer.prototype );
	  } else {
	    utils.extend( Layout.prototype, Outlayer.prototype );
	  }
	  // set contructor, used for namespace and Item
	  Layout.prototype.constructor = Layout;
	
	  Layout.defaults = utils.extend( {}, Outlayer.defaults );
	  // apply new options
	  utils.extend( Layout.defaults, options );
	  // keep prototype.settings for backwards compatibility (Packery v1.2.0)
	  Layout.prototype.settings = {};
	
	  Layout.namespace = namespace;
	
	  Layout.data = Outlayer.data;
	
	  // sub-class Item
	  Layout.Item = function LayoutItem() {
	    Item.apply( this, arguments );
	  };
	
	  Layout.Item.prototype = new Item();
	
	  // -------------------------- declarative -------------------------- //
	
	  utils.htmlInit( Layout, namespace );
	
	  // -------------------------- jQuery bridge -------------------------- //
	
	  // make into jQuery plugin
	  if ( jQuery && jQuery.bridget ) {
	    jQuery.bridget( namespace, Layout );
	  }
	
	  return Layout;
	};
	
	// ----- fin ----- //
	
	// back in global
	Outlayer.Item = Item;
	
	return Outlayer;
	
	}));
	
	
	/**
	 * Isotope Item
	**/
	
	( function( window, factory ) {
	'use strict';
	  // universal module definition
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __WEBPACK_LOCAL_MODULE_9__
	      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_LOCAL_MODULE_10__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      require('outlayer')
	    );
	  } else {
	    // browser global
	    window.Isotope = window.Isotope || {};
	    window.Isotope.Item = factory(
	      window.Outlayer
	    );
	  }
	
	}( window, function factory( Outlayer ) {
	'use strict';
	
	// -------------------------- Item -------------------------- //
	
	// sub-class Outlayer Item
	function Item() {
	  Outlayer.Item.apply( this, arguments );
	}
	
	Item.prototype = new Outlayer.Item();
	
	Item.prototype._create = function() {
	  // assign id, used for original-order sorting
	  this.id = this.layout.itemGUID++;
	  Outlayer.Item.prototype._create.call( this );
	  this.sortData = {};
	};
	
	Item.prototype.updateSortData = function() {
	  if ( this.isIgnored ) {
	    return;
	  }
	  // default sorters
	  this.sortData.id = this.id;
	  // for backward compatibility
	  this.sortData['original-order'] = this.id;
	  this.sortData.random = Math.random();
	  // go thru getSortData obj and apply the sorters
	  var getSortData = this.layout.options.getSortData;
	  var sorters = this.layout._sorters;
	  for ( var key in getSortData ) {
	    var sorter = sorters[ key ];
	    this.sortData[ key ] = sorter( this.element, this );
	  }
	};
	
	var _destroy = Item.prototype.destroy;
	Item.prototype.destroy = function() {
	  // call super
	  _destroy.apply( this, arguments );
	  // reset display, #741
	  this.css({
	    display: ''
	  });
	};
	
	return Item;
	
	}));
	
	/**
	 * Isotope LayoutMode
	 */
	
	( function( window, factory ) {
	  'use strict';
	  // universal module definition
	
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __WEBPACK_LOCAL_MODULE_4__,
	        __WEBPACK_LOCAL_MODULE_9__
	      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_LOCAL_MODULE_11__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      require('get-size'),
	      require('outlayer')
	    );
	  } else {
	    // browser global
	    window.Isotope = window.Isotope || {};
	    window.Isotope.LayoutMode = factory(
	      window.getSize,
	      window.Outlayer
	    );
	  }
	
	}( window, function factory( getSize, Outlayer ) {
	  'use strict';
	
	  // layout mode class
	  function LayoutMode( isotope ) {
	    this.isotope = isotope;
	    // link properties
	    if ( isotope ) {
	      this.options = isotope.options[ this.namespace ];
	      this.element = isotope.element;
	      this.items = isotope.filteredItems;
	      this.size = isotope.size;
	    }
	  }
	
	  /**
	   * some methods should just defer to default Outlayer method
	   * and reference the Isotope instance as `this`
	  **/
	  ( function() {
	    var facadeMethods = [
	      '_resetLayout',
	      '_getItemLayoutPosition',
	      '_manageStamp',
	      '_getContainerSize',
	      '_getElementOffset',
	      'needsResizeLayout'
	    ];
	
	    for ( var i=0, len = facadeMethods.length; i < len; i++ ) {
	      var methodName = facadeMethods[i];
	      LayoutMode.prototype[ methodName ] = getOutlayerMethod( methodName );
	    }
	
	    function getOutlayerMethod( methodName ) {
	      return function() {
	        return Outlayer.prototype[ methodName ].apply( this.isotope, arguments );
	      };
	    }
	  })();
	
	  // -----  ----- //
	
	  // for horizontal layout modes, check vertical size
	  LayoutMode.prototype.needsVerticalResizeLayout = function() {
	    // don't trigger if size did not change
	    var size = getSize( this.isotope.element );
	    // check that this.size and size are there
	    // IE8 triggers resize on body size change, so they might not be
	    var hasSizes = this.isotope.size && size;
	    return hasSizes && size.innerHeight != this.isotope.size.innerHeight;
	  };
	
	  // ----- measurements ----- //
	
	  LayoutMode.prototype._getMeasurement = function() {
	    this.isotope._getMeasurement.apply( this, arguments );
	  };
	
	  LayoutMode.prototype.getColumnWidth = function() {
	    this.getSegmentSize( 'column', 'Width' );
	  };
	
	  LayoutMode.prototype.getRowHeight = function() {
	    this.getSegmentSize( 'row', 'Height' );
	  };
	
	  /**
	   * get columnWidth or rowHeight
	   * segment: 'column' or 'row'
	   * size 'Width' or 'Height'
	  **/
	  LayoutMode.prototype.getSegmentSize = function( segment, size ) {
	    var segmentName = segment + size;
	    var outerSize = 'outer' + size;
	    // columnWidth / outerWidth // rowHeight / outerHeight
	    this._getMeasurement( segmentName, outerSize );
	    // got rowHeight or columnWidth, we can chill
	    if ( this[ segmentName ] ) {
	      return;
	    }
	    // fall back to item of first element
	    var firstItemSize = this.getFirstItemSize();
	    this[ segmentName ] = firstItemSize && firstItemSize[ outerSize ] ||
	      // or size of container
	      this.isotope.size[ 'inner' + size ];
	  };
	
	  LayoutMode.prototype.getFirstItemSize = function() {
	    var firstItem = this.isotope.filteredItems[0];
	    return firstItem && firstItem.element && getSize( firstItem.element );
	  };
	
	  // ----- methods that should reference isotope ----- //
	
	  LayoutMode.prototype.layout = function() {
	    this.isotope.layout.apply( this.isotope, arguments );
	  };
	
	  LayoutMode.prototype.getSize = function() {
	    this.isotope.getSize();
	    this.size = this.isotope.size;
	  };
	
	  // -------------------------- create -------------------------- //
	
	  LayoutMode.modes = {};
	
	  LayoutMode.create = function( namespace, options ) {
	
	    function Mode() {
	      LayoutMode.apply( this, arguments );
	    }
	
	    Mode.prototype = new LayoutMode();
	
	    // default options
	    if ( options ) {
	      Mode.options = options;
	    }
	
	    Mode.prototype.namespace = namespace;
	    // register in Isotope
	    LayoutMode.modes[ namespace ] = Mode;
	
	    return Mode;
	  };
	
	  return LayoutMode;
	
	}));
	
	/*!
	 * Masonry v3.3.1
	 * Cascading grid layout library
	 * http://masonry.desandro.com
	 * MIT License
	 * by David DeSandro
	 */
	
	( function( window, factory ) {
	  'use strict';
	  // universal module definition
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __WEBPACK_LOCAL_MODULE_9__,
	        __WEBPACK_LOCAL_MODULE_4__,
	        __WEBPACK_LOCAL_MODULE_7__
	      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_LOCAL_MODULE_12__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	  } else if ( typeof exports === 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      require('outlayer'),
	      require('get-size'),
	      require('fizzy-ui-utils')
	    );
	  } else {
	    // browser global
	    window.Masonry = factory(
	      window.Outlayer,
	      window.getSize,
	      window.fizzyUIUtils
	    );
	  }
	
	}( window, function factory( Outlayer, getSize, utils ) {
	
	
	
	// -------------------------- masonryDefinition -------------------------- //
	
	  // create an Outlayer layout class
	  var Masonry = Outlayer.create('masonry');
	
	  Masonry.prototype._resetLayout = function() {
	    this.getSize();
	    this._getMeasurement( 'columnWidth', 'outerWidth' );
	    this._getMeasurement( 'gutter', 'outerWidth' );
	    this.measureColumns();
	
	    // reset column Y
	    var i = this.cols;
	    this.colYs = [];
	    while (i--) {
	      this.colYs.push( 0 );
	    }
	
	    this.maxY = 0;
	  };
	
	  Masonry.prototype.measureColumns = function() {
	    this.getContainerWidth();
	    // if columnWidth is 0, default to outerWidth of first item
	    if ( !this.columnWidth ) {
	      var firstItem = this.items[0];
	      var firstItemElem = firstItem && firstItem.element;
	      // columnWidth fall back to item of first element
	      this.columnWidth = firstItemElem && getSize( firstItemElem ).outerWidth ||
	        // if first elem has no width, default to size of container
	        this.containerWidth;
	    }
	
	    var columnWidth = this.columnWidth += this.gutter;
	
	    // calculate columns
	    var containerWidth = this.containerWidth + this.gutter;
	    var cols = containerWidth / columnWidth;
	    // fix rounding errors, typically with gutters
	    var excess = columnWidth - containerWidth % columnWidth;
	    // if overshoot is less than a pixel, round up, otherwise floor it
	    var mathMethod = excess && excess < 1 ? 'round' : 'floor';
	    cols = Math[ mathMethod ]( cols );
	    this.cols = Math.max( cols, 1 );
	  };
	
	  Masonry.prototype.getContainerWidth = function() {
	    // container is parent if fit width
	    var container = this.options.isFitWidth ? this.element.parentNode : this.element;
	    // check that this.size and size are there
	    // IE8 triggers resize on body size change, so they might not be
	    var size = getSize( container );
	    this.containerWidth = size && size.innerWidth;
	  };
	
	  Masonry.prototype._getItemLayoutPosition = function( item ) {
	    item.getSize();
	    // how many columns does this brick span
	    var remainder = item.size.outerWidth % this.columnWidth;
	    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';
	    // round if off by 1 pixel, otherwise use ceil
	    var colSpan = Math[ mathMethod ]( item.size.outerWidth / this.columnWidth );
	    colSpan = Math.min( colSpan, this.cols );
	
	    var colGroup = this._getColGroup( colSpan );
	    // get the minimum Y value from the columns
	    var minimumY = Math.min.apply( Math, colGroup );
	    var shortColIndex = utils.indexOf( colGroup, minimumY );
	
	    // position the brick
	    var position = {
	      x: this.columnWidth * shortColIndex,
	      y: minimumY
	    };
	
	    // apply setHeight to necessary columns
	    var setHeight = minimumY + item.size.outerHeight;
	    var setSpan = this.cols + 1 - colGroup.length;
	    for ( var i = 0; i < setSpan; i++ ) {
	      this.colYs[ shortColIndex + i ] = setHeight;
	    }
	
	    return position;
	  };
	
	  /**
	   * @param {Number} colSpan - number of columns the element spans
	   * @returns {Array} colGroup
	   */
	  Masonry.prototype._getColGroup = function( colSpan ) {
	    if ( colSpan < 2 ) {
	      // if brick spans only one column, use all the column Ys
	      return this.colYs;
	    }
	
	    var colGroup = [];
	    // how many different places could this brick fit horizontally
	    var groupCount = this.cols + 1 - colSpan;
	    // for each group potential horizontal position
	    for ( var i = 0; i < groupCount; i++ ) {
	      // make an array of colY values for that one group
	      var groupColYs = this.colYs.slice( i, i + colSpan );
	      // and get the max value of the array
	      colGroup[i] = Math.max.apply( Math, groupColYs );
	    }
	    return colGroup;
	  };
	
	  Masonry.prototype._manageStamp = function( stamp ) {
	    var stampSize = getSize( stamp );
	    var offset = this._getElementOffset( stamp );
	    // get the columns that this stamp affects
	    var firstX = this.options.isOriginLeft ? offset.left : offset.right;
	    var lastX = firstX + stampSize.outerWidth;
	    var firstCol = Math.floor( firstX / this.columnWidth );
	    firstCol = Math.max( 0, firstCol );
	    var lastCol = Math.floor( lastX / this.columnWidth );
	    // lastCol should not go over if multiple of columnWidth #425
	    lastCol -= lastX % this.columnWidth ? 0 : 1;
	    lastCol = Math.min( this.cols - 1, lastCol );
	    // set colYs to bottom of the stamp
	    var stampMaxY = ( this.options.isOriginTop ? offset.top : offset.bottom ) +
	      stampSize.outerHeight;
	    for ( var i = firstCol; i <= lastCol; i++ ) {
	      this.colYs[i] = Math.max( stampMaxY, this.colYs[i] );
	    }
	  };
	
	  Masonry.prototype._getContainerSize = function() {
	    this.maxY = Math.max.apply( Math, this.colYs );
	    var size = {
	      height: this.maxY
	    };
	
	    if ( this.options.isFitWidth ) {
	      size.width = this._getContainerFitWidth();
	    }
	
	    return size;
	  };
	
	  Masonry.prototype._getContainerFitWidth = function() {
	    var unusedCols = 0;
	    // count unused columns
	    var i = this.cols;
	    while ( --i ) {
	      if ( this.colYs[i] !== 0 ) {
	        break;
	      }
	      unusedCols++;
	    }
	    // fit container to columns that have been used
	    return ( this.cols - unusedCols ) * this.columnWidth - this.gutter;
	  };
	
	  Masonry.prototype.needsResizeLayout = function() {
	    var previousWidth = this.containerWidth;
	    this.getContainerWidth();
	    return previousWidth !== this.containerWidth;
	  };
	
	  return Masonry;
	
	}));
	
	/*!
	 * Masonry layout mode
	 * sub-classes Masonry
	 * http://masonry.desandro.com
	 */
	
	( function( window, factory ) {
	  'use strict';
	  // universal module definition
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __WEBPACK_LOCAL_MODULE_11__,
	        __WEBPACK_LOCAL_MODULE_12__
	      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_LOCAL_MODULE_13__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      require('../layout-mode'),
	      require('masonry-layout')
	    );
	  } else {
	    // browser global
	    factory(
	      window.Isotope.LayoutMode,
	      window.Masonry
	    );
	  }
	
	}( window, function factory( LayoutMode, Masonry ) {
	'use strict';
	
	// -------------------------- helpers -------------------------- //
	
	// extend objects
	function extend( a, b ) {
	  for ( var prop in b ) {
	    a[ prop ] = b[ prop ];
	  }
	  return a;
	}
	
	// -------------------------- masonryDefinition -------------------------- //
	
	  // create an Outlayer layout class
	  var MasonryMode = LayoutMode.create('masonry');
	
	  // save on to these methods
	  var _getElementOffset = MasonryMode.prototype._getElementOffset;
	  var layout = MasonryMode.prototype.layout;
	  var _getMeasurement = MasonryMode.prototype._getMeasurement;
	
	  // sub-class Masonry
	  extend( MasonryMode.prototype, Masonry.prototype );
	
	  // set back, as it was overwritten by Masonry
	  MasonryMode.prototype._getElementOffset = _getElementOffset;
	  MasonryMode.prototype.layout = layout;
	  MasonryMode.prototype._getMeasurement = _getMeasurement;
	
	  var measureColumns = MasonryMode.prototype.measureColumns;
	  MasonryMode.prototype.measureColumns = function() {
	    // set items, used if measuring first item
	    this.items = this.isotope.filteredItems;
	    measureColumns.call( this );
	  };
	
	  // HACK copy over isOriginLeft/Top options
	  var _manageStamp = MasonryMode.prototype._manageStamp;
	  MasonryMode.prototype._manageStamp = function() {
	    this.options.isOriginLeft = this.isotope.options.isOriginLeft;
	    this.options.isOriginTop = this.isotope.options.isOriginTop;
	    _manageStamp.apply( this, arguments );
	  };
	
	  return MasonryMode;
	
	}));
	
	/**
	 * fitRows layout mode
	 */
	
	( function( window, factory ) {
	  'use strict';
	  // universal module definition
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __WEBPACK_LOCAL_MODULE_11__
	      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_LOCAL_MODULE_14__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      require('../layout-mode')
	    );
	  } else {
	    // browser global
	    factory(
	      window.Isotope.LayoutMode
	    );
	  }
	
	}( window, function factory( LayoutMode ) {
	'use strict';
	
	var FitRows = LayoutMode.create('fitRows');
	
	FitRows.prototype._resetLayout = function() {
	  this.x = 0;
	  this.y = 0;
	  this.maxY = 0;
	  this._getMeasurement( 'gutter', 'outerWidth' );
	};
	
	FitRows.prototype._getItemLayoutPosition = function( item ) {
	  item.getSize();
	
	  var itemWidth = item.size.outerWidth + this.gutter;
	  // if this element cannot fit in the current row
	  var containerWidth = this.isotope.size.innerWidth + this.gutter;
	  if ( this.x !== 0 && itemWidth + this.x > containerWidth ) {
	    this.x = 0;
	    this.y = this.maxY;
	  }
	
	  var position = {
	    x: this.x,
	    y: this.y
	  };
	
	  this.maxY = Math.max( this.maxY, this.y + item.size.outerHeight );
	  this.x += itemWidth;
	
	  return position;
	};
	
	FitRows.prototype._getContainerSize = function() {
	  return { height: this.maxY };
	};
	
	return FitRows;
	
	}));
	
	/**
	 * vertical layout mode
	 */
	
	( function( window, factory ) {
	  'use strict';
	  // universal module definition
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __WEBPACK_LOCAL_MODULE_11__
	      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_LOCAL_MODULE_15__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      require('../layout-mode')
	    );
	  } else {
	    // browser global
	    factory(
	      window.Isotope.LayoutMode
	    );
	  }
	
	}( window, function factory( LayoutMode ) {
	'use strict';
	
	var Vertical = LayoutMode.create( 'vertical', {
	  horizontalAlignment: 0
	});
	
	Vertical.prototype._resetLayout = function() {
	  this.y = 0;
	};
	
	Vertical.prototype._getItemLayoutPosition = function( item ) {
	  item.getSize();
	  var x = ( this.isotope.size.innerWidth - item.size.outerWidth ) *
	    this.options.horizontalAlignment;
	  var y = this.y;
	  this.y += item.size.outerHeight;
	  return { x: x, y: y };
	};
	
	Vertical.prototype._getContainerSize = function() {
	  return { height: this.y };
	};
	
	return Vertical;
	
	}));
	
	/*!
	 * Isotope v2.2.2
	 *
	 * Licensed GPLv3 for open source use
	 * or Isotope Commercial License for commercial use
	 *
	 * http://isotope.metafizzy.co
	 * Copyright 2015 Metafizzy
	 */
	
	( function( window, factory ) {
	  'use strict';
	  // universal module definition
	
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __WEBPACK_LOCAL_MODULE_9__,
	        __WEBPACK_LOCAL_MODULE_4__,
	        __WEBPACK_LOCAL_MODULE_6__,
	        __WEBPACK_LOCAL_MODULE_7__,
	        __WEBPACK_LOCAL_MODULE_10__,
	        __WEBPACK_LOCAL_MODULE_11__,
	        // include default layout modes
	        __WEBPACK_LOCAL_MODULE_13__,
	        __WEBPACK_LOCAL_MODULE_14__,
	        __WEBPACK_LOCAL_MODULE_15__
	      ], __WEBPACK_AMD_DEFINE_RESULT__ = function( Outlayer, getSize, matchesSelector, utils, Item, LayoutMode ) {
	        return factory( window, Outlayer, getSize, matchesSelector, utils, Item, LayoutMode );
	      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      window,
	      require('outlayer'),
	      require('get-size'),
	      require('desandro-matches-selector'),
	      require('fizzy-ui-utils'),
	      require('./item'),
	      require('./layout-mode'),
	      // include default layout modes
	      require('./layout-modes/masonry'),
	      require('./layout-modes/fit-rows'),
	      require('./layout-modes/vertical')
	    );
	  } else {
	    // browser global
	    window.Isotope = factory(
	      window,
	      window.Outlayer,
	      window.getSize,
	      window.matchesSelector,
	      window.fizzyUIUtils,
	      window.Isotope.Item,
	      window.Isotope.LayoutMode
	    );
	  }
	
	}( window, function factory( window, Outlayer, getSize, matchesSelector, utils,
	  Item, LayoutMode ) {
	
	
	
	// -------------------------- vars -------------------------- //
	
	var jQuery = window.jQuery;
	
	// -------------------------- helpers -------------------------- //
	
	var trim = String.prototype.trim ?
	  function( str ) {
	    return str.trim();
	  } :
	  function( str ) {
	    return str.replace( /^\s+|\s+$/g, '' );
	  };
	
	var docElem = document.documentElement;
	
	var getText = docElem.textContent ?
	  function( elem ) {
	    return elem.textContent;
	  } :
	  function( elem ) {
	    return elem.innerText;
	  };
	
	// -------------------------- isotopeDefinition -------------------------- //
	
	  // create an Outlayer layout class
	  var Isotope = Outlayer.create( 'isotope', {
	    layoutMode: "masonry",
	    isJQueryFiltering: true,
	    sortAscending: true
	  });
	
	  Isotope.Item = Item;
	  Isotope.LayoutMode = LayoutMode;
	
	  Isotope.prototype._create = function() {
	    this.itemGUID = 0;
	    // functions that sort items
	    this._sorters = {};
	    this._getSorters();
	    // call super
	    Outlayer.prototype._create.call( this );
	
	    // create layout modes
	    this.modes = {};
	    // start filteredItems with all items
	    this.filteredItems = this.items;
	    // keep of track of sortBys
	    this.sortHistory = [ 'original-order' ];
	    // create from registered layout modes
	    for ( var name in LayoutMode.modes ) {
	      this._initLayoutMode( name );
	    }
	  };
	
	  Isotope.prototype.reloadItems = function() {
	    // reset item ID counter
	    this.itemGUID = 0;
	    // call super
	    Outlayer.prototype.reloadItems.call( this );
	  };
	
	  Isotope.prototype._itemize = function() {
	    var items = Outlayer.prototype._itemize.apply( this, arguments );
	    // assign ID for original-order
	    for ( var i=0, len = items.length; i < len; i++ ) {
	      var item = items[i];
	      item.id = this.itemGUID++;
	    }
	    this._updateItemsSortData( items );
	    return items;
	  };
	
	
	  // -------------------------- layout -------------------------- //
	
	  Isotope.prototype._initLayoutMode = function( name ) {
	    var Mode = LayoutMode.modes[ name ];
	    // set mode options
	    // HACK extend initial options, back-fill in default options
	    var initialOpts = this.options[ name ] || {};
	    this.options[ name ] = Mode.options ?
	      utils.extend( Mode.options, initialOpts ) : initialOpts;
	    // init layout mode instance
	    this.modes[ name ] = new Mode( this );
	  };
	
	
	  Isotope.prototype.layout = function() {
	    // if first time doing layout, do all magic
	    if ( !this._isLayoutInited && this.options.isInitLayout ) {
	      this.arrange();
	      return;
	    }
	    this._layout();
	  };
	
	  // private method to be used in layout() & magic()
	  Isotope.prototype._layout = function() {
	    // don't animate first layout
	    var isInstant = this._getIsInstant();
	    // layout flow
	    this._resetLayout();
	    this._manageStamps();
	    this.layoutItems( this.filteredItems, isInstant );
	
	    // flag for initalized
	    this._isLayoutInited = true;
	  };
	
	  // filter + sort + layout
	  Isotope.prototype.arrange = function( opts ) {
	    // set any options pass
	    this.option( opts );
	    this._getIsInstant();
	    // filter, sort, and layout
	
	    // filter
	    var filtered = this._filter( this.items );
	    this.filteredItems = filtered.matches;
	
	    var _this = this;
	    function hideReveal() {
	      _this.reveal( filtered.needReveal );
	      _this.hide( filtered.needHide );
	    }
	
	    this._bindArrangeComplete();
	
	    if ( this._isInstant ) {
	      this._noTransition( hideReveal );
	    } else {
	      hideReveal();
	    }
	
	    this._sort();
	    this._layout();
	  };
	  // alias to _init for main plugin method
	  Isotope.prototype._init = Isotope.prototype.arrange;
	
	  // HACK
	  // Don't animate/transition first layout
	  // Or don't animate/transition other layouts
	  Isotope.prototype._getIsInstant = function() {
	    var isInstant = this.options.isLayoutInstant !== undefined ?
	      this.options.isLayoutInstant : !this._isLayoutInited;
	    this._isInstant = isInstant;
	    return isInstant;
	  };
	
	  // listen for layoutComplete, hideComplete and revealComplete
	  // to trigger arrangeComplete
	  Isotope.prototype._bindArrangeComplete = function() {
	    // listen for 3 events to trigger arrangeComplete
	    var isLayoutComplete, isHideComplete, isRevealComplete;
	    var _this = this;
	    function arrangeParallelCallback() {
	      if ( isLayoutComplete && isHideComplete && isRevealComplete ) {
	        _this.dispatchEvent( 'arrangeComplete', null, [ _this.filteredItems ] );
	      }
	    }
	    this.once( 'layoutComplete', function() {
	      isLayoutComplete = true;
	      arrangeParallelCallback();
	    });
	    this.once( 'hideComplete', function() {
	      isHideComplete = true;
	      arrangeParallelCallback();
	    });
	    this.once( 'revealComplete', function() {
	      isRevealComplete = true;
	      arrangeParallelCallback();
	    });
	  };
	
	  // -------------------------- filter -------------------------- //
	
	  Isotope.prototype._filter = function( items ) {
	    var filter = this.options.filter;
	    filter = filter || '*';
	    var matches = [];
	    var hiddenMatched = [];
	    var visibleUnmatched = [];
	
	    var test = this._getFilterTest( filter );
	
	    // test each item
	    for ( var i=0, len = items.length; i < len; i++ ) {
	      var item = items[i];
	      if ( item.isIgnored ) {
	        continue;
	      }
	      // add item to either matched or unmatched group
	      var isMatched = test( item );
	      // item.isFilterMatched = isMatched;
	      // add to matches if its a match
	      if ( isMatched ) {
	        matches.push( item );
	      }
	      // add to additional group if item needs to be hidden or revealed
	      if ( isMatched && item.isHidden ) {
	        hiddenMatched.push( item );
	      } else if ( !isMatched && !item.isHidden ) {
	        visibleUnmatched.push( item );
	      }
	    }
	
	    // return collections of items to be manipulated
	    return {
	      matches: matches,
	      needReveal: hiddenMatched,
	      needHide: visibleUnmatched
	    };
	  };
	
	  // get a jQuery, function, or a matchesSelector test given the filter
	  Isotope.prototype._getFilterTest = function( filter ) {
	    if ( jQuery && this.options.isJQueryFiltering ) {
	      // use jQuery
	      return function( item ) {
	        return jQuery( item.element ).is( filter );
	      };
	    }
	    if ( typeof filter == 'function' ) {
	      // use filter as function
	      return function( item ) {
	        return filter( item.element );
	      };
	    }
	    // default, use filter as selector string
	    return function( item ) {
	      return matchesSelector( item.element, filter );
	    };
	  };
	
	  // -------------------------- sorting -------------------------- //
	
	  /**
	   * @params {Array} elems
	   * @public
	   */
	  Isotope.prototype.updateSortData = function( elems ) {
	    // get items
	    var items;
	    if ( elems ) {
	      elems = utils.makeArray( elems );
	      items = this.getItems( elems );
	    } else {
	      // update all items if no elems provided
	      items = this.items;
	    }
	
	    this._getSorters();
	    this._updateItemsSortData( items );
	  };
	
	  Isotope.prototype._getSorters = function() {
	    var getSortData = this.options.getSortData;
	    for ( var key in getSortData ) {
	      var sorter = getSortData[ key ];
	      this._sorters[ key ] = mungeSorter( sorter );
	    }
	  };
	
	  /**
	   * @params {Array} items - of Isotope.Items
	   * @private
	   */
	  Isotope.prototype._updateItemsSortData = function( items ) {
	    // do not update if no items
	    var len = items && items.length;
	
	    for ( var i=0; len && i < len; i++ ) {
	      var item = items[i];
	      item.updateSortData();
	    }
	  };
	
	  // ----- munge sorter ----- //
	
	  // encapsulate this, as we just need mungeSorter
	  // other functions in here are just for munging
	  var mungeSorter = ( function() {
	    // add a magic layer to sorters for convienent shorthands
	    // `.foo-bar` will use the text of .foo-bar querySelector
	    // `[foo-bar]` will use attribute
	    // you can also add parser
	    // `.foo-bar parseInt` will parse that as a number
	    function mungeSorter( sorter ) {
	      // if not a string, return function or whatever it is
	      if ( typeof sorter != 'string' ) {
	        return sorter;
	      }
	      // parse the sorter string
	      var args = trim( sorter ).split(' ');
	      var query = args[0];
	      // check if query looks like [an-attribute]
	      var attrMatch = query.match( /^\[(.+)\]$/ );
	      var attr = attrMatch && attrMatch[1];
	      var getValue = getValueGetter( attr, query );
	      // use second argument as a parser
	      var parser = Isotope.sortDataParsers[ args[1] ];
	      // parse the value, if there was a parser
	      sorter = parser ? function( elem ) {
	        return elem && parser( getValue( elem ) );
	      } :
	      // otherwise just return value
	      function( elem ) {
	        return elem && getValue( elem );
	      };
	
	      return sorter;
	    }
	
	    // get an attribute getter, or get text of the querySelector
	    function getValueGetter( attr, query ) {
	      var getValue;
	      // if query looks like [foo-bar], get attribute
	      if ( attr ) {
	        getValue = function( elem ) {
	          return elem.getAttribute( attr );
	        };
	      } else {
	        // otherwise, assume its a querySelector, and get its text
	        getValue = function( elem ) {
	          var child = elem.querySelector( query );
	          return child && getText( child );
	        };
	      }
	      return getValue;
	    }
	
	    return mungeSorter;
	  })();
	
	  // parsers used in getSortData shortcut strings
	  Isotope.sortDataParsers = {
	    'parseInt': function( val ) {
	      return parseInt( val, 10 );
	    },
	    'parseFloat': function( val ) {
	      return parseFloat( val );
	    }
	  };
	
	  // ----- sort method ----- //
	
	  // sort filteredItem order
	  Isotope.prototype._sort = function() {
	    var sortByOpt = this.options.sortBy;
	    if ( !sortByOpt ) {
	      return;
	    }
	    // concat all sortBy and sortHistory
	    var sortBys = [].concat.apply( sortByOpt, this.sortHistory );
	    // sort magic
	    var itemSorter = getItemSorter( sortBys, this.options.sortAscending );
	    this.filteredItems.sort( itemSorter );
	    // keep track of sortBy History
	    if ( sortByOpt != this.sortHistory[0] ) {
	      // add to front, oldest goes in last
	      this.sortHistory.unshift( sortByOpt );
	    }
	  };
	
	  // returns a function used for sorting
	  function getItemSorter( sortBys, sortAsc ) {
	    return function sorter( itemA, itemB ) {
	      // cycle through all sortKeys
	      for ( var i = 0, len = sortBys.length; i < len; i++ ) {
	        var sortBy = sortBys[i];
	        var a = itemA.sortData[ sortBy ];
	        var b = itemB.sortData[ sortBy ];
	        if ( a > b || a < b ) {
	          // if sortAsc is an object, use the value given the sortBy key
	          var isAscending = sortAsc[ sortBy ] !== undefined ? sortAsc[ sortBy ] : sortAsc;
	          var direction = isAscending ? 1 : -1;
	          return ( a > b ? 1 : -1 ) * direction;
	        }
	      }
	      return 0;
	    };
	  }
	
	  // -------------------------- methods -------------------------- //
	
	  // get layout mode
	  Isotope.prototype._mode = function() {
	    var layoutMode = this.options.layoutMode;
	    var mode = this.modes[ layoutMode ];
	    if ( !mode ) {
	      // TODO console.error
	      throw new Error( 'No layout mode: ' + layoutMode );
	    }
	    // HACK sync mode's options
	    // any options set after init for layout mode need to be synced
	    mode.options = this.options[ layoutMode ];
	    return mode;
	  };
	
	  Isotope.prototype._resetLayout = function() {
	    // trigger original reset layout
	    Outlayer.prototype._resetLayout.call( this );
	    this._mode()._resetLayout();
	  };
	
	  Isotope.prototype._getItemLayoutPosition = function( item  ) {
	    return this._mode()._getItemLayoutPosition( item );
	  };
	
	  Isotope.prototype._manageStamp = function( stamp ) {
	    this._mode()._manageStamp( stamp );
	  };
	
	  Isotope.prototype._getContainerSize = function() {
	    return this._mode()._getContainerSize();
	  };
	
	  Isotope.prototype.needsResizeLayout = function() {
	    return this._mode().needsResizeLayout();
	  };
	
	  // -------------------------- adding & removing -------------------------- //
	
	  // HEADS UP overwrites default Outlayer appended
	  Isotope.prototype.appended = function( elems ) {
	    var items = this.addItems( elems );
	    if ( !items.length ) {
	      return;
	    }
	    // filter, layout, reveal new items
	    var filteredItems = this._filterRevealAdded( items );
	    // add to filteredItems
	    this.filteredItems = this.filteredItems.concat( filteredItems );
	  };
	
	  // HEADS UP overwrites default Outlayer prepended
	  Isotope.prototype.prepended = function( elems ) {
	    var items = this._itemize( elems );
	    if ( !items.length ) {
	      return;
	    }
	    // start new layout
	    this._resetLayout();
	    this._manageStamps();
	    // filter, layout, reveal new items
	    var filteredItems = this._filterRevealAdded( items );
	    // layout previous items
	    this.layoutItems( this.filteredItems );
	    // add to items and filteredItems
	    this.filteredItems = filteredItems.concat( this.filteredItems );
	    this.items = items.concat( this.items );
	  };
	
	  Isotope.prototype._filterRevealAdded = function( items ) {
	    var filtered = this._filter( items );
	    this.hide( filtered.needHide );
	    // reveal all new items
	    this.reveal( filtered.matches );
	    // layout new items, no transition
	    this.layoutItems( filtered.matches, true );
	    return filtered.matches;
	  };
	
	  /**
	   * Filter, sort, and layout newly-appended item elements
	   * @param {Array or NodeList or Element} elems
	   */
	  Isotope.prototype.insert = function( elems ) {
	    var items = this.addItems( elems );
	    if ( !items.length ) {
	      return;
	    }
	    // append item elements
	    var i, item;
	    var len = items.length;
	    for ( i=0; i < len; i++ ) {
	      item = items[i];
	      this.element.appendChild( item.element );
	    }
	    // filter new stuff
	    var filteredInsertItems = this._filter( items ).matches;
	    // set flag
	    for ( i=0; i < len; i++ ) {
	      items[i].isLayoutInstant = true;
	    }
	    this.arrange();
	    // reset flag
	    for ( i=0; i < len; i++ ) {
	      delete items[i].isLayoutInstant;
	    }
	    this.reveal( filteredInsertItems );
	  };
	
	  var _remove = Isotope.prototype.remove;
	  Isotope.prototype.remove = function( elems ) {
	    elems = utils.makeArray( elems );
	    var removeItems = this.getItems( elems );
	    // do regular thing
	    _remove.call( this, elems );
	    // bail if no items to remove
	    var len = removeItems && removeItems.length;
	    if ( !len ) {
	      return;
	    }
	    // remove elems from filteredItems
	    for ( var i=0; i < len; i++ ) {
	      var item = removeItems[i];
	      // remove item from collection
	      utils.removeFrom( this.filteredItems, item );
	    }
	  };
	
	  Isotope.prototype.shuffle = function() {
	    // update random sortData
	    for ( var i=0, len = this.items.length; i < len; i++ ) {
	      var item = this.items[i];
	      item.sortData.random = Math.random();
	    }
	    this.options.sortBy = 'random';
	    this._sort();
	    this._layout();
	  };
	
	  /**
	   * trigger fn without transition
	   * kind of hacky to have this in the first place
	   * @param {Function} fn
	   * @returns ret
	   * @private
	   */
	  Isotope.prototype._noTransition = function( fn ) {
	    // save transitionDuration before disabling
	    var transitionDuration = this.options.transitionDuration;
	    // disable transition
	    this.options.transitionDuration = 0;
	    // do it
	    var returnValue = fn.call( this );
	    // re-enable transition for reveal
	    this.options.transitionDuration = transitionDuration;
	    return returnValue;
	  };
	
	  // ----- helper methods ----- //
	
	  /**
	   * getter method for getting filtered item elements
	   * @returns {Array} elems - collection of item elements
	   */
	  Isotope.prototype.getFilteredItemElements = function() {
	    var elems = [];
	    for ( var i=0, len = this.filteredItems.length; i < len; i++ ) {
	      elems.push( this.filteredItems[i].element );
	    }
	    return elems;
	  };
	
	  // -----  ----- //
	
	  return Isotope;
	
	}));
	
	


/***/ },

/***/ 269:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_1__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_2__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_3__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_4__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_5__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_6__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_7__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_8__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_9__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_10__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_11__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_12__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_13__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/
	var $ = __webpack_require__(225);
	
	/*!
	 * Packery PACKAGED v1.4.3
	 * bin-packing layout library
	 *
	 * Licensed GPLv3 for open source use
	 * or Flickity Commercial License for commercial use
	 *
	 * http://packery.metafizzy.co
	 * Copyright 2015 Metafizzy
	 */
	
	/**
	 * Bridget makes jQuery widgets
	 * v1.1.0
	 * MIT license
	 */
	
	( function( window ) {
	
	
	
	// -------------------------- utils -------------------------- //
	
	var slice = Array.prototype.slice;
	
	function noop() {}
	
	// -------------------------- definition -------------------------- //
	
	function defineBridget( $ ) {
	
	// bail if no jQuery
	if ( !$ ) {
	  return;
	}
	
	// -------------------------- addOptionMethod -------------------------- //
	
	/**
	 * adds option method -> $().plugin('option', {...})
	 * @param {Function} PluginClass - constructor class
	 */
	function addOptionMethod( PluginClass ) {
	  // don't overwrite original option method
	  if ( PluginClass.prototype.option ) {
	    return;
	  }
	
	  // option setter
	  PluginClass.prototype.option = function( opts ) {
	    // bail out if not an object
	    if ( !$.isPlainObject( opts ) ){
	      return;
	    }
	    this.options = $.extend( true, this.options, opts );
	  };
	}
	
	// -------------------------- plugin bridge -------------------------- //
	
	// helper function for logging errors
	// $.error breaks jQuery chaining
	var logError = typeof console === 'undefined' ? noop :
	  function( message ) {
	    console.error( message );
	  };
	
	/**
	 * jQuery plugin bridge, access methods like $elem.plugin('method')
	 * @param {String} namespace - plugin name
	 * @param {Function} PluginClass - constructor class
	 */
	function bridge( namespace, PluginClass ) {
	  // add to jQuery fn namespace
	  $.fn[ namespace ] = function( options ) {
	    if ( typeof options === 'string' ) {
	      // call plugin method when first argument is a string
	      // get arguments for method
	      var args = slice.call( arguments, 1 );
	
	      for ( var i=0, len = this.length; i < len; i++ ) {
	        var elem = this[i];
	        var instance = $.data( elem, namespace );
	        if ( !instance ) {
	          logError( "cannot call methods on " + namespace + " prior to initialization; " +
	            "attempted to call '" + options + "'" );
	          continue;
	        }
	        if ( !$.isFunction( instance[options] ) || options.charAt(0) === '_' ) {
	          logError( "no such method '" + options + "' for " + namespace + " instance" );
	          continue;
	        }
	
	        // trigger method with arguments
	        var returnValue = instance[ options ].apply( instance, args );
	
	        // break look and return first value if provided
	        if ( returnValue !== undefined ) {
	          return returnValue;
	        }
	      }
	      // return this if no return value
	      return this;
	    } else {
	      return this.each( function() {
	        var instance = $.data( this, namespace );
	        if ( instance ) {
	          // apply options & init
	          instance.option( options );
	          instance._init();
	        } else {
	          // initialize new instance
	          instance = new PluginClass( this, options );
	          $.data( this, namespace, instance );
	        }
	      });
	    }
	  };
	
	}
	
	// -------------------------- bridget -------------------------- //
	
	/**
	 * converts a Prototypical class into a proper jQuery plugin
	 *   the class must have a ._init method
	 * @param {String} namespace - plugin name, used in $().pluginName
	 * @param {Function} PluginClass - constructor class
	 */
	$.bridget = function( namespace, PluginClass ) {
	  addOptionMethod( PluginClass );
	  bridge( namespace, PluginClass );
	};
	
	return $.bridget;
	
	}
	
	// transport
	if ( true ) {
	  // AMD
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(225) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (defineBridget), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if ( typeof exports === 'object' ) {
	  defineBridget( require('jquery') );
	} else {
	  // get jquery from browser global
	  defineBridget( window.jQuery );
	}
	
	})( window );
	
	/*!
	 * classie v1.0.1
	 * class helper functions
	 * from bonzo https://github.com/ded/bonzo
	 * MIT license
	 * 
	 * classie.has( elem, 'my-class' ) -> true/false
	 * classie.add( elem, 'my-new-class' )
	 * classie.remove( elem, 'my-unwanted-class' )
	 * classie.toggle( elem, 'my-class' )
	 */
	
	/*jshint browser: true, strict: true, undef: true, unused: true */
	/*global define: false, module: false */
	
	( function( window ) {
	
	
	
	// class helper functions from bonzo https://github.com/ded/bonzo
	
	function classReg( className ) {
	  return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
	}
	
	// classList support for class management
	// altho to be fair, the api sucks because it won't accept multiple classes at once
	var hasClass, addClass, removeClass;
	
	if ( 'classList' in document.documentElement ) {
	  hasClass = function( elem, c ) {
	    return elem.classList.contains( c );
	  };
	  addClass = function( elem, c ) {
	    elem.classList.add( c );
	  };
	  removeClass = function( elem, c ) {
	    elem.classList.remove( c );
	  };
	}
	else {
	  hasClass = function( elem, c ) {
	    return classReg( c ).test( elem.className );
	  };
	  addClass = function( elem, c ) {
	    if ( !hasClass( elem, c ) ) {
	      elem.className = elem.className + ' ' + c;
	    }
	  };
	  removeClass = function( elem, c ) {
	    elem.className = elem.className.replace( classReg( c ), ' ' );
	  };
	}
	
	function toggleClass( elem, c ) {
	  var fn = hasClass( elem, c ) ? removeClass : addClass;
	  fn( elem, c );
	}
	
	var classie = {
	  // full names
	  hasClass: hasClass,
	  addClass: addClass,
	  removeClass: removeClass,
	  toggleClass: toggleClass,
	  // short names
	  has: hasClass,
	  add: addClass,
	  remove: removeClass,
	  toggle: toggleClass
	};
	
	// transport
	if ( true ) {
	  // AMD
	  !(__WEBPACK_AMD_DEFINE_FACTORY__ = (classie), __WEBPACK_LOCAL_MODULE_1__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	} else if ( typeof exports === 'object' ) {
	  // CommonJS
	  module.exports = classie;
	} else {
	  // browser global
	  window.classie = classie;
	}
	
	})( window );
	
	/*!
	 * getStyleProperty v1.0.4
	 * original by kangax
	 * http://perfectionkills.com/feature-testing-css-properties/
	 * MIT license
	 */
	
	/*jshint browser: true, strict: true, undef: true */
	/*global define: false, exports: false, module: false */
	
	( function( window ) {
	
	
	
	var prefixes = 'Webkit Moz ms Ms O'.split(' ');
	var docElemStyle = document.documentElement.style;
	
	function getStyleProperty( propName ) {
	  if ( !propName ) {
	    return;
	  }
	
	  // test standard property first
	  if ( typeof docElemStyle[ propName ] === 'string' ) {
	    return propName;
	  }
	
	  // capitalize
	  propName = propName.charAt(0).toUpperCase() + propName.slice(1);
	
	  // test vendor specific properties
	  var prefixed;
	  for ( var i=0, len = prefixes.length; i < len; i++ ) {
	    prefixed = prefixes[i] + propName;
	    if ( typeof docElemStyle[ prefixed ] === 'string' ) {
	      return prefixed;
	    }
	  }
	}
	
	// transport
	if ( true ) {
	  // AMD
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_2__ = (function() {
	    return getStyleProperty;
	  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	} else if ( typeof exports === 'object' ) {
	  // CommonJS for Component
	  module.exports = getStyleProperty;
	} else {
	  // browser global
	  window.getStyleProperty = getStyleProperty;
	}
	
	})( window );
	
	/*!
	 * getSize v1.2.2
	 * measure size of elements
	 * MIT license
	 */
	
	/*jshint browser: true, strict: true, undef: true, unused: true */
	/*global define: false, exports: false, require: false, module: false, console: false */
	
	( function( window, undefined ) {
	
	
	
	// -------------------------- helpers -------------------------- //
	
	// get a number from a string, not a percentage
	function getStyleSize( value ) {
	  var num = parseFloat( value );
	  // not a percent like '100%', and a number
	  var isValid = value.indexOf('%') === -1 && !isNaN( num );
	  return isValid && num;
	}
	
	function noop() {}
	
	var logError = typeof console === 'undefined' ? noop :
	  function( message ) {
	    console.error( message );
	  };
	
	// -------------------------- measurements -------------------------- //
	
	var measurements = [
	  'paddingLeft',
	  'paddingRight',
	  'paddingTop',
	  'paddingBottom',
	  'marginLeft',
	  'marginRight',
	  'marginTop',
	  'marginBottom',
	  'borderLeftWidth',
	  'borderRightWidth',
	  'borderTopWidth',
	  'borderBottomWidth'
	];
	
	function getZeroSize() {
	  var size = {
	    width: 0,
	    height: 0,
	    innerWidth: 0,
	    innerHeight: 0,
	    outerWidth: 0,
	    outerHeight: 0
	  };
	  for ( var i=0, len = measurements.length; i < len; i++ ) {
	    var measurement = measurements[i];
	    size[ measurement ] = 0;
	  }
	  return size;
	}
	
	
	
	function defineGetSize( getStyleProperty ) {
	
	// -------------------------- setup -------------------------- //
	
	var isSetup = false;
	
	var getStyle, boxSizingProp, isBoxSizeOuter;
	
	/**
	 * setup vars and functions
	 * do it on initial getSize(), rather than on script load
	 * For Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=548397
	 */
	function setup() {
	  // setup once
	  if ( isSetup ) {
	    return;
	  }
	  isSetup = true;
	
	  var getComputedStyle = window.getComputedStyle;
	  getStyle = ( function() {
	    var getStyleFn = getComputedStyle ?
	      function( elem ) {
	        return getComputedStyle( elem, null );
	      } :
	      function( elem ) {
	        return elem.currentStyle;
	      };
	
	      return function getStyle( elem ) {
	        var style = getStyleFn( elem );
	        if ( !style ) {
	          logError( 'Style returned ' + style +
	            '. Are you running this code in a hidden iframe on Firefox? ' +
	            'See http://bit.ly/getsizebug1' );
	        }
	        return style;
	      };
	  })();
	
	  // -------------------------- box sizing -------------------------- //
	
	  boxSizingProp = getStyleProperty('boxSizing');
	
	  /**
	   * WebKit measures the outer-width on style.width on border-box elems
	   * IE & Firefox measures the inner-width
	   */
	  if ( boxSizingProp ) {
	    var div = document.createElement('div');
	    div.style.width = '200px';
	    div.style.padding = '1px 2px 3px 4px';
	    div.style.borderStyle = 'solid';
	    div.style.borderWidth = '1px 2px 3px 4px';
	    div.style[ boxSizingProp ] = 'border-box';
	
	    var body = document.body || document.documentElement;
	    body.appendChild( div );
	    var style = getStyle( div );
	
	    isBoxSizeOuter = getStyleSize( style.width ) === 200;
	    body.removeChild( div );
	  }
	
	}
	
	// -------------------------- getSize -------------------------- //
	
	function getSize( elem ) {
	  setup();
	
	  // use querySeletor if elem is string
	  if ( typeof elem === 'string' ) {
	    elem = document.querySelector( elem );
	  }
	
	  // do not proceed on non-objects
	  if ( !elem || typeof elem !== 'object' || !elem.nodeType ) {
	    return;
	  }
	
	  var style = getStyle( elem );
	
	  // if hidden, everything is 0
	  if ( style.display === 'none' ) {
	    return getZeroSize();
	  }
	
	  var size = {};
	  size.width = elem.offsetWidth;
	  size.height = elem.offsetHeight;
	
	  var isBorderBox = size.isBorderBox = !!( boxSizingProp &&
	    style[ boxSizingProp ] && style[ boxSizingProp ] === 'border-box' );
	
	  // get all measurements
	  for ( var i=0, len = measurements.length; i < len; i++ ) {
	    var measurement = measurements[i];
	    var value = style[ measurement ];
	    value = mungeNonPixel( elem, value );
	    var num = parseFloat( value );
	    // any 'auto', 'medium' value will be 0
	    size[ measurement ] = !isNaN( num ) ? num : 0;
	  }
	
	  var paddingWidth = size.paddingLeft + size.paddingRight;
	  var paddingHeight = size.paddingTop + size.paddingBottom;
	  var marginWidth = size.marginLeft + size.marginRight;
	  var marginHeight = size.marginTop + size.marginBottom;
	  var borderWidth = size.borderLeftWidth + size.borderRightWidth;
	  var borderHeight = size.borderTopWidth + size.borderBottomWidth;
	
	  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;
	
	  // overwrite width and height if we can get it from style
	  var styleWidth = getStyleSize( style.width );
	  if ( styleWidth !== false ) {
	    size.width = styleWidth +
	      // add padding and border unless it's already including it
	      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );
	  }
	
	  var styleHeight = getStyleSize( style.height );
	  if ( styleHeight !== false ) {
	    size.height = styleHeight +
	      // add padding and border unless it's already including it
	      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );
	  }
	
	  size.innerWidth = size.width - ( paddingWidth + borderWidth );
	  size.innerHeight = size.height - ( paddingHeight + borderHeight );
	
	  size.outerWidth = size.width + marginWidth;
	  size.outerHeight = size.height + marginHeight;
	
	  return size;
	}
	
	// IE8 returns percent values, not pixels
	// taken from jQuery's curCSS
	function mungeNonPixel( elem, value ) {
	  // IE8 and has percent value
	  if ( window.getComputedStyle || value.indexOf('%') === -1 ) {
	    return value;
	  }
	  var style = elem.style;
	  // Remember the original values
	  var left = style.left;
	  var rs = elem.runtimeStyle;
	  var rsLeft = rs && rs.left;
	
	  // Put in the new values to get a computed value out
	  if ( rsLeft ) {
	    rs.left = elem.currentStyle.left;
	  }
	  style.left = value;
	  value = style.pixelLeft;
	
	  // Revert the changed values
	  style.left = left;
	  if ( rsLeft ) {
	    rs.left = rsLeft;
	  }
	
	  return value;
	}
	
	return getSize;
	
	}
	
	// transport
	if ( true ) {
	  // AMD for RequireJS
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __WEBPACK_LOCAL_MODULE_2__ ], __WEBPACK_AMD_DEFINE_FACTORY__ = (defineGetSize), __WEBPACK_LOCAL_MODULE_3__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	} else if ( typeof exports === 'object' ) {
	  // CommonJS for Component
	  module.exports = defineGetSize( require('desandro-get-style-property') );
	} else {
	  // browser global
	  window.getSize = defineGetSize( window.getStyleProperty );
	}
	
	})( window );
	
	/*!
	 * eventie v1.0.6
	 * event binding helper
	 *   eventie.bind( elem, 'click', myFn )
	 *   eventie.unbind( elem, 'click', myFn )
	 * MIT license
	 */
	
	/*jshint browser: true, undef: true, unused: true */
	/*global define: false, module: false */
	
	( function( window ) {
	
	
	
	var docElem = document.documentElement;
	
	var bind = function() {};
	
	function getIEEvent( obj ) {
	  var event = window.event;
	  // add event.target
	  event.target = event.target || event.srcElement || obj;
	  return event;
	}
	
	if ( docElem.addEventListener ) {
	  bind = function( obj, type, fn ) {
	    obj.addEventListener( type, fn, false );
	  };
	} else if ( docElem.attachEvent ) {
	  bind = function( obj, type, fn ) {
	    obj[ type + fn ] = fn.handleEvent ?
	      function() {
	        var event = getIEEvent( obj );
	        fn.handleEvent.call( fn, event );
	      } :
	      function() {
	        var event = getIEEvent( obj );
	        fn.call( obj, event );
	      };
	    obj.attachEvent( "on" + type, obj[ type + fn ] );
	  };
	}
	
	var unbind = function() {};
	
	if ( docElem.removeEventListener ) {
	  unbind = function( obj, type, fn ) {
	    obj.removeEventListener( type, fn, false );
	  };
	} else if ( docElem.detachEvent ) {
	  unbind = function( obj, type, fn ) {
	    obj.detachEvent( "on" + type, obj[ type + fn ] );
	    try {
	      delete obj[ type + fn ];
	    } catch ( err ) {
	      // can't delete window object properties
	      obj[ type + fn ] = undefined;
	    }
	  };
	}
	
	var eventie = {
	  bind: bind,
	  unbind: unbind
	};
	
	// ----- module definition ----- //
	
	if ( true ) {
	  // AMD
	  !(__WEBPACK_AMD_DEFINE_FACTORY__ = (eventie), __WEBPACK_LOCAL_MODULE_4__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	} else if ( typeof exports === 'object' ) {
	  // CommonJS
	  module.exports = eventie;
	} else {
	  // browser global
	  window.eventie = eventie;
	}
	
	})( window );
	
	/*!
	 * EventEmitter v4.2.11 - git.io/ee
	 * Unlicense - http://unlicense.org/
	 * Oliver Caldwell - http://oli.me.uk/
	 * @preserve
	 */
	
	;(function () {
	    
	
	    /**
	     * Class for managing events.
	     * Can be extended to provide event functionality in other classes.
	     *
	     * @class EventEmitter Manages event registering and emitting.
	     */
	    function EventEmitter() {}
	
	    // Shortcuts to improve speed and size
	    var proto = EventEmitter.prototype;
	    var exports = this;
	    var originalGlobalValue = exports.EventEmitter;
	
	    /**
	     * Finds the index of the listener for the event in its storage array.
	     *
	     * @param {Function[]} listeners Array of listeners to search through.
	     * @param {Function} listener Method to look for.
	     * @return {Number} Index of the specified listener, -1 if not found
	     * @api private
	     */
	    function indexOfListener(listeners, listener) {
	        var i = listeners.length;
	        while (i--) {
	            if (listeners[i].listener === listener) {
	                return i;
	            }
	        }
	
	        return -1;
	    }
	
	    /**
	     * Alias a method while keeping the context correct, to allow for overwriting of target method.
	     *
	     * @param {String} name The name of the target method.
	     * @return {Function} The aliased method
	     * @api private
	     */
	    function alias(name) {
	        return function aliasClosure() {
	            return this[name].apply(this, arguments);
	        };
	    }
	
	    /**
	     * Returns the listener array for the specified event.
	     * Will initialise the event object and listener arrays if required.
	     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
	     * Each property in the object response is an array of listener functions.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Function[]|Object} All listener functions for the event.
	     */
	    proto.getListeners = function getListeners(evt) {
	        var events = this._getEvents();
	        var response;
	        var key;
	
	        // Return a concatenated array of all matching events if
	        // the selector is a regular expression.
	        if (evt instanceof RegExp) {
	            response = {};
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    response[key] = events[key];
	                }
	            }
	        }
	        else {
	            response = events[evt] || (events[evt] = []);
	        }
	
	        return response;
	    };
	
	    /**
	     * Takes a list of listener objects and flattens it into a list of listener functions.
	     *
	     * @param {Object[]} listeners Raw listener objects.
	     * @return {Function[]} Just the listener functions.
	     */
	    proto.flattenListeners = function flattenListeners(listeners) {
	        var flatListeners = [];
	        var i;
	
	        for (i = 0; i < listeners.length; i += 1) {
	            flatListeners.push(listeners[i].listener);
	        }
	
	        return flatListeners;
	    };
	
	    /**
	     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Object} All listener functions for an event in an object.
	     */
	    proto.getListenersAsObject = function getListenersAsObject(evt) {
	        var listeners = this.getListeners(evt);
	        var response;
	
	        if (listeners instanceof Array) {
	            response = {};
	            response[evt] = listeners;
	        }
	
	        return response || listeners;
	    };
	
	    /**
	     * Adds a listener function to the specified event.
	     * The listener will not be added if it is a duplicate.
	     * If the listener returns true then it will be removed after it is called.
	     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListener = function addListener(evt, listener) {
	        var listeners = this.getListenersAsObject(evt);
	        var listenerIsWrapped = typeof listener === 'object';
	        var key;
	
	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
	                listeners[key].push(listenerIsWrapped ? listener : {
	                    listener: listener,
	                    once: false
	                });
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of addListener
	     */
	    proto.on = alias('addListener');
	
	    /**
	     * Semi-alias of addListener. It will add a listener that will be
	     * automatically removed after its first execution.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addOnceListener = function addOnceListener(evt, listener) {
	        return this.addListener(evt, {
	            listener: listener,
	            once: true
	        });
	    };
	
	    /**
	     * Alias of addOnceListener.
	     */
	    proto.once = alias('addOnceListener');
	
	    /**
	     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
	     * You need to tell it what event names should be matched by a regex.
	     *
	     * @param {String} evt Name of the event to create.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvent = function defineEvent(evt) {
	        this.getListeners(evt);
	        return this;
	    };
	
	    /**
	     * Uses defineEvent to define multiple events.
	     *
	     * @param {String[]} evts An array of event names to define.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvents = function defineEvents(evts) {
	        for (var i = 0; i < evts.length; i += 1) {
	            this.defineEvent(evts[i]);
	        }
	        return this;
	    };
	
	    /**
	     * Removes a listener function from the specified event.
	     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to remove the listener from.
	     * @param {Function} listener Method to remove from the event.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListener = function removeListener(evt, listener) {
	        var listeners = this.getListenersAsObject(evt);
	        var index;
	        var key;
	
	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key)) {
	                index = indexOfListener(listeners[key], listener);
	
	                if (index !== -1) {
	                    listeners[key].splice(index, 1);
	                }
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of removeListener
	     */
	    proto.off = alias('removeListener');
	
	    /**
	     * Adds listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
	     * You can also pass it a regular expression to add the array of listeners to all events that match it.
	     * Yeah, this function does quite a bit. That's probably a bad thing.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListeners = function addListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(false, evt, listeners);
	    };
	
	    /**
	     * Removes listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be removed.
	     * You can also pass it a regular expression to remove the listeners from all events that match it.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListeners = function removeListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(true, evt, listeners);
	    };
	
	    /**
	     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
	     * The first argument will determine if the listeners are removed (true) or added (false).
	     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be added/removed.
	     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
	     *
	     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
	        var i;
	        var value;
	        var single = remove ? this.removeListener : this.addListener;
	        var multiple = remove ? this.removeListeners : this.addListeners;
	
	        // If evt is an object then pass each of its properties to this method
	        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
	            for (i in evt) {
	                if (evt.hasOwnProperty(i) && (value = evt[i])) {
	                    // Pass the single listener straight through to the singular method
	                    if (typeof value === 'function') {
	                        single.call(this, i, value);
	                    }
	                    else {
	                        // Otherwise pass back to the multiple function
	                        multiple.call(this, i, value);
	                    }
	                }
	            }
	        }
	        else {
	            // So evt must be a string
	            // And listeners must be an array of listeners
	            // Loop over it and pass each one to the multiple method
	            i = listeners.length;
	            while (i--) {
	                single.call(this, evt, listeners[i]);
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Removes all listeners from a specified event.
	     * If you do not specify an event then all listeners will be removed.
	     * That means every event will be emptied.
	     * You can also pass a regex to remove all events that match it.
	     *
	     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeEvent = function removeEvent(evt) {
	        var type = typeof evt;
	        var events = this._getEvents();
	        var key;
	
	        // Remove different things depending on the state of evt
	        if (type === 'string') {
	            // Remove all listeners for the specified event
	            delete events[evt];
	        }
	        else if (evt instanceof RegExp) {
	            // Remove all events matching the regex.
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    delete events[key];
	                }
	            }
	        }
	        else {
	            // Remove all listeners in all events
	            delete this._events;
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of removeEvent.
	     *
	     * Added to mirror the node API.
	     */
	    proto.removeAllListeners = alias('removeEvent');
	
	    /**
	     * Emits an event of your choice.
	     * When emitted, every listener attached to that event will be executed.
	     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
	     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
	     * So they will not arrive within the array on the other side, they will be separate.
	     * You can also pass a regular expression to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {Array} [args] Optional array of arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emitEvent = function emitEvent(evt, args) {
	        var listeners = this.getListenersAsObject(evt);
	        var listener;
	        var i;
	        var key;
	        var response;
	
	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key)) {
	                i = listeners[key].length;
	
	                while (i--) {
	                    // If the listener returns true then it shall be removed from the event
	                    // The function is executed either with a basic call or an apply if there is an args array
	                    listener = listeners[key][i];
	
	                    if (listener.once === true) {
	                        this.removeListener(evt, listener.listener);
	                    }
	
	                    response = listener.listener.apply(this, args || []);
	
	                    if (response === this._getOnceReturnValue()) {
	                        this.removeListener(evt, listener.listener);
	                    }
	                }
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of emitEvent
	     */
	    proto.trigger = alias('emitEvent');
	
	    /**
	     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
	     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {...*} Optional additional arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emit = function emit(evt) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        return this.emitEvent(evt, args);
	    };
	
	    /**
	     * Sets the current value to check against when executing listeners. If a
	     * listeners return value matches the one set here then it will be removed
	     * after execution. This value defaults to true.
	     *
	     * @param {*} value The new value to check for when executing listeners.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.setOnceReturnValue = function setOnceReturnValue(value) {
	        this._onceReturnValue = value;
	        return this;
	    };
	
	    /**
	     * Fetches the current value to check against when executing listeners. If
	     * the listeners return value matches this one then it should be removed
	     * automatically. It will return true by default.
	     *
	     * @return {*|Boolean} The current value to check for or the default, true.
	     * @api private
	     */
	    proto._getOnceReturnValue = function _getOnceReturnValue() {
	        if (this.hasOwnProperty('_onceReturnValue')) {
	            return this._onceReturnValue;
	        }
	        else {
	            return true;
	        }
	    };
	
	    /**
	     * Fetches the events object and creates one if required.
	     *
	     * @return {Object} The events storage object.
	     * @api private
	     */
	    proto._getEvents = function _getEvents() {
	        return this._events || (this._events = {});
	    };
	
	    /**
	     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
	     *
	     * @return {Function} Non conflicting EventEmitter class.
	     */
	    EventEmitter.noConflict = function noConflict() {
	        exports.EventEmitter = originalGlobalValue;
	        return EventEmitter;
	    };
	
	    // Expose the class either via AMD, CommonJS or the global object
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_5__ = (function () {
	            return EventEmitter;
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	    }
	    else if (typeof module === 'object' && module.exports){
	        module.exports = EventEmitter;
	    }
	    else {
	        exports.EventEmitter = EventEmitter;
	    }
	}.call(this));
	
	/*!
	 * docReady v1.0.4
	 * Cross browser DOMContentLoaded event emitter
	 * MIT license
	 */
	
	/*jshint browser: true, strict: true, undef: true, unused: true*/
	/*global define: false, require: false, module: false */
	
	( function( window ) {
	
	
	
	var document = window.document;
	// collection of functions to be triggered on ready
	var queue = [];
	
	function docReady( fn ) {
	  // throw out non-functions
	  if ( typeof fn !== 'function' ) {
	    return;
	  }
	
	  if ( docReady.isReady ) {
	    // ready now, hit it
	    fn();
	  } else {
	    // queue function when ready
	    queue.push( fn );
	  }
	}
	
	docReady.isReady = false;
	
	// triggered on various doc ready events
	function onReady( event ) {
	  // bail if already triggered or IE8 document is not ready just yet
	  var isIE8NotReady = event.type === 'readystatechange' && document.readyState !== 'complete';
	  if ( docReady.isReady || isIE8NotReady ) {
	    return;
	  }
	
	  trigger();
	}
	
	function trigger() {
	  docReady.isReady = true;
	  // process queue
	  for ( var i=0, len = queue.length; i < len; i++ ) {
	    var fn = queue[i];
	    fn();
	  }
	}
	
	function defineDocReady( eventie ) {
	  // trigger ready if page is ready
	  if ( document.readyState === 'complete' ) {
	    trigger();
	  } else {
	    // listen for events
	    eventie.bind( document, 'DOMContentLoaded', onReady );
	    eventie.bind( document, 'readystatechange', onReady );
	    eventie.bind( window, 'load', onReady );
	  }
	
	  return docReady;
	}
	
	// transport
	if ( true ) {
	  // AMD
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __WEBPACK_LOCAL_MODULE_4__ ], __WEBPACK_AMD_DEFINE_FACTORY__ = (defineDocReady), __WEBPACK_LOCAL_MODULE_6__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	} else if ( typeof exports === 'object' ) {
	  module.exports = defineDocReady( require('eventie') );
	} else {
	  // browser global
	  window.docReady = defineDocReady( window.eventie );
	}
	
	})( window );
	
	/**
	 * matchesSelector v1.0.3
	 * matchesSelector( element, '.selector' )
	 * MIT license
	 */
	
	/*jshint browser: true, strict: true, undef: true, unused: true */
	/*global define: false, module: false */
	
	( function( ElemProto ) {
	
	  
	
	  var matchesMethod = ( function() {
	    // check for the standard method name first
	    if ( ElemProto.matches ) {
	      return 'matches';
	    }
	    // check un-prefixed
	    if ( ElemProto.matchesSelector ) {
	      return 'matchesSelector';
	    }
	    // check vendor prefixes
	    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];
	
	    for ( var i=0, len = prefixes.length; i < len; i++ ) {
	      var prefix = prefixes[i];
	      var method = prefix + 'MatchesSelector';
	      if ( ElemProto[ method ] ) {
	        return method;
	      }
	    }
	  })();
	
	  // ----- match ----- //
	
	  function match( elem, selector ) {
	    return elem[ matchesMethod ]( selector );
	  }
	
	  // ----- appendToFragment ----- //
	
	  function checkParent( elem ) {
	    // not needed if already has parent
	    if ( elem.parentNode ) {
	      return;
	    }
	    var fragment = document.createDocumentFragment();
	    fragment.appendChild( elem );
	  }
	
	  // ----- query ----- //
	
	  // fall back to using QSA
	  // thx @jonathantneal https://gist.github.com/3062955
	  function query( elem, selector ) {
	    // append to fragment if no parent
	    checkParent( elem );
	
	    // match elem with all selected elems of parent
	    var elems = elem.parentNode.querySelectorAll( selector );
	    for ( var i=0, len = elems.length; i < len; i++ ) {
	      // return true if match
	      if ( elems[i] === elem ) {
	        return true;
	      }
	    }
	    // otherwise return false
	    return false;
	  }
	
	  // ----- matchChild ----- //
	
	  function matchChild( elem, selector ) {
	    checkParent( elem );
	    return match( elem, selector );
	  }
	
	  // ----- matchesSelector ----- //
	
	  var matchesSelector;
	
	  if ( matchesMethod ) {
	    // IE9 supports matchesSelector, but doesn't work on orphaned elems
	    // check for that
	    var div = document.createElement('div');
	    var supportsOrphans = match( div, 'div' );
	    matchesSelector = supportsOrphans ? match : matchChild;
	  } else {
	    matchesSelector = query;
	  }
	
	  // transport
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_7__ = (function() {
	      return matchesSelector;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	  } else if ( typeof exports === 'object' ) {
	    module.exports = matchesSelector;
	  }
	  else {
	    // browser global
	    window.matchesSelector = matchesSelector;
	  }
	
	})( Element.prototype );
	
	/**
	 * Fizzy UI utils v1.0.1
	 * MIT license
	 */
	
	/*jshint browser: true, undef: true, unused: true, strict: true */
	
	( function( window, factory ) {
	  /*global define: false, module: false, require: false */
	  
	  // universal module definition
	
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	      __WEBPACK_LOCAL_MODULE_6__,
	      __WEBPACK_LOCAL_MODULE_7__
	    ], __WEBPACK_LOCAL_MODULE_8__ = (function( docReady, matchesSelector ) {
	      return factory( window, docReady, matchesSelector );
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      window,
	      require('doc-ready'),
	      require('desandro-matches-selector')
	    );
	  } else {
	    // browser global
	    window.fizzyUIUtils = factory(
	      window,
	      window.docReady,
	      window.matchesSelector
	    );
	  }
	
	}( window, function factory( window, docReady, matchesSelector ) {
	
	
	
	var utils = {};
	
	// ----- extend ----- //
	
	// extends objects
	utils.extend = function( a, b ) {
	  for ( var prop in b ) {
	    a[ prop ] = b[ prop ];
	  }
	  return a;
	};
	
	// ----- modulo ----- //
	
	utils.modulo = function( num, div ) {
	  return ( ( num % div ) + div ) % div;
	};
	
	// ----- isArray ----- //
	  
	var objToString = Object.prototype.toString;
	utils.isArray = function( obj ) {
	  return objToString.call( obj ) == '[object Array]';
	};
	
	// ----- makeArray ----- //
	
	// turn element or nodeList into an array
	utils.makeArray = function( obj ) {
	  var ary = [];
	  if ( utils.isArray( obj ) ) {
	    // use object if already an array
	    ary = obj;
	  } else if ( obj && typeof obj.length == 'number' ) {
	    // convert nodeList to array
	    for ( var i=0, len = obj.length; i < len; i++ ) {
	      ary.push( obj[i] );
	    }
	  } else {
	    // array of single index
	    ary.push( obj );
	  }
	  return ary;
	};
	
	// ----- indexOf ----- //
	
	// index of helper cause IE8
	utils.indexOf = Array.prototype.indexOf ? function( ary, obj ) {
	    return ary.indexOf( obj );
	  } : function( ary, obj ) {
	    for ( var i=0, len = ary.length; i < len; i++ ) {
	      if ( ary[i] === obj ) {
	        return i;
	      }
	    }
	    return -1;
	  };
	
	// ----- removeFrom ----- //
	
	utils.removeFrom = function( ary, obj ) {
	  var index = utils.indexOf( ary, obj );
	  if ( index != -1 ) {
	    ary.splice( index, 1 );
	  }
	};
	
	// ----- isElement ----- //
	
	// http://stackoverflow.com/a/384380/182183
	utils.isElement = ( typeof HTMLElement == 'function' || typeof HTMLElement == 'object' ) ?
	  function isElementDOM2( obj ) {
	    return obj instanceof HTMLElement;
	  } :
	  function isElementQuirky( obj ) {
	    return obj && typeof obj == 'object' &&
	      obj.nodeType == 1 && typeof obj.nodeName == 'string';
	  };
	
	// ----- setText ----- //
	
	utils.setText = ( function() {
	  var setTextProperty;
	  function setText( elem, text ) {
	    // only check setTextProperty once
	    setTextProperty = setTextProperty || ( document.documentElement.textContent !== undefined ? 'textContent' : 'innerText' );
	    elem[ setTextProperty ] = text;
	  }
	  return setText;
	})();
	
	// ----- getParent ----- //
	
	utils.getParent = function( elem, selector ) {
	  while ( elem != document.body ) {
	    elem = elem.parentNode;
	    if ( matchesSelector( elem, selector ) ) {
	      return elem;
	    }
	  }
	};
	
	// ----- getQueryElement ----- //
	
	// use element as selector string
	utils.getQueryElement = function( elem ) {
	  if ( typeof elem == 'string' ) {
	    return document.querySelector( elem );
	  }
	  return elem;
	};
	
	// ----- handleEvent ----- //
	
	// enable .ontype to trigger from .addEventListener( elem, 'type' )
	utils.handleEvent = function( event ) {
	  var method = 'on' + event.type;
	  if ( this[ method ] ) {
	    this[ method ]( event );
	  }
	};
	
	// ----- filterFindElements ----- //
	
	utils.filterFindElements = function( elems, selector ) {
	  // make array of elems
	  elems = utils.makeArray( elems );
	  var ffElems = [];
	
	  for ( var i=0, len = elems.length; i < len; i++ ) {
	    var elem = elems[i];
	    // check that elem is an actual element
	    if ( !utils.isElement( elem ) ) {
	      continue;
	    }
	    // filter & find items if we have a selector
	    if ( selector ) {
	      // filter siblings
	      if ( matchesSelector( elem, selector ) ) {
	        ffElems.push( elem );
	      }
	      // find children
	      var childElems = elem.querySelectorAll( selector );
	      // concat childElems to filterFound array
	      for ( var j=0, jLen = childElems.length; j < jLen; j++ ) {
	        ffElems.push( childElems[j] );
	      }
	    } else {
	      ffElems.push( elem );
	    }
	  }
	
	  return ffElems;
	};
	
	// ----- debounceMethod ----- //
	
	utils.debounceMethod = function( _class, methodName, threshold ) {
	  // original method
	  var method = _class.prototype[ methodName ];
	  var timeoutName = methodName + 'Timeout';
	
	  _class.prototype[ methodName ] = function() {
	    var timeout = this[ timeoutName ];
	    if ( timeout ) {
	      clearTimeout( timeout );
	    }
	    var args = arguments;
	
	    var _this = this;
	    this[ timeoutName ] = setTimeout( function() {
	      method.apply( _this, args );
	      delete _this[ timeoutName ];
	    }, threshold || 100 );
	  };
	};
	
	// ----- htmlInit ----- //
	
	// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
	utils.toDashed = function( str ) {
	  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {
	    return $1 + '-' + $2;
	  }).toLowerCase();
	};
	
	var console = window.console;
	/**
	 * allow user to initialize classes via .js-namespace class
	 * htmlInit( Widget, 'widgetName' )
	 * options are parsed from data-namespace-option attribute
	 */
	utils.htmlInit = function( WidgetClass, namespace ) {
	  docReady( function() {
	    var dashedNamespace = utils.toDashed( namespace );
	    var elems = document.querySelectorAll( '.js-' + dashedNamespace );
	    var dataAttr = 'data-' + dashedNamespace + '-options';
	
	    for ( var i=0, len = elems.length; i < len; i++ ) {
	      var elem = elems[i];
	      var attr = elem.getAttribute( dataAttr );
	      var options;
	      try {
	        options = attr && JSON.parse( attr );
	      } catch ( error ) {
	        // log error, do not initialize
	        if ( console ) {
	          console.error( 'Error parsing ' + dataAttr + ' on ' +
	            elem.nodeName.toLowerCase() + ( elem.id ? '#' + elem.id : '' ) + ': ' +
	            error );
	        }
	        continue;
	      }
	      // initialize
	      var instance = new WidgetClass( elem, options );
	      // make available via $().data('layoutname')
	      var jQuery = window.jQuery;
	      if ( jQuery ) {
	        jQuery.data( elem, namespace, instance );
	      }
	    }
	  });
	};
	
	// -----  ----- //
	
	return utils;
	
	}));
	
	/**
	 * Outlayer Item
	 */
	
	( function( window, factory ) {
	  
	  // universal module definition
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __WEBPACK_LOCAL_MODULE_5__,
	        __WEBPACK_LOCAL_MODULE_3__,
	        __WEBPACK_LOCAL_MODULE_2__,
	        __WEBPACK_LOCAL_MODULE_8__
	      ], __WEBPACK_LOCAL_MODULE_9__ = (function( EventEmitter, getSize, getStyleProperty, utils ) {
	        return factory( window, EventEmitter, getSize, getStyleProperty, utils );
	      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	  } else if (typeof exports === 'object') {
	    // CommonJS
	    module.exports = factory(
	      window,
	      require('wolfy87-eventemitter'),
	      require('get-size'),
	      require('desandro-get-style-property'),
	      require('fizzy-ui-utils')
	    );
	  } else {
	    // browser global
	    window.Outlayer = {};
	    window.Outlayer.Item = factory(
	      window,
	      window.EventEmitter,
	      window.getSize,
	      window.getStyleProperty,
	      window.fizzyUIUtils
	    );
	  }
	
	}( window, function factory( window, EventEmitter, getSize, getStyleProperty, utils ) {
	
	
	// ----- helpers ----- //
	
	var getComputedStyle = window.getComputedStyle;
	var getStyle = getComputedStyle ?
	  function( elem ) {
	    return getComputedStyle( elem, null );
	  } :
	  function( elem ) {
	    return elem.currentStyle;
	  };
	
	
	function isEmptyObj( obj ) {
	  for ( var prop in obj ) {
	    return false;
	  }
	  prop = null;
	  return true;
	}
	
	// -------------------------- CSS3 support -------------------------- //
	
	var transitionProperty = getStyleProperty('transition');
	var transformProperty = getStyleProperty('transform');
	var supportsCSS3 = transitionProperty && transformProperty;
	var is3d = !!getStyleProperty('perspective');
	
	var transitionEndEvent = {
	  WebkitTransition: 'webkitTransitionEnd',
	  MozTransition: 'transitionend',
	  OTransition: 'otransitionend',
	  transition: 'transitionend'
	}[ transitionProperty ];
	
	// properties that could have vendor prefix
	var prefixableProperties = [
	  'transform',
	  'transition',
	  'transitionDuration',
	  'transitionProperty'
	];
	
	// cache all vendor properties
	var vendorProperties = ( function() {
	  var cache = {};
	  for ( var i=0, len = prefixableProperties.length; i < len; i++ ) {
	    var prop = prefixableProperties[i];
	    var supportedProp = getStyleProperty( prop );
	    if ( supportedProp && supportedProp !== prop ) {
	      cache[ prop ] = supportedProp;
	    }
	  }
	  return cache;
	})();
	
	// -------------------------- Item -------------------------- //
	
	function Item( element, layout ) {
	  if ( !element ) {
	    return;
	  }
	
	  this.element = element;
	  // parent layout class, i.e. Masonry, Isotope, or Packery
	  this.layout = layout;
	  this.position = {
	    x: 0,
	    y: 0
	  };
	
	  this._create();
	}
	
	// inherit EventEmitter
	utils.extend( Item.prototype, EventEmitter.prototype );
	
	Item.prototype._create = function() {
	  // transition objects
	  this._transn = {
	    ingProperties: {},
	    clean: {},
	    onEnd: {}
	  };
	
	  this.css({
	    position: 'absolute'
	  });
	};
	
	// trigger specified handler for event type
	Item.prototype.handleEvent = function( event ) {
	  var method = 'on' + event.type;
	  if ( this[ method ] ) {
	    this[ method ]( event );
	  }
	};
	
	Item.prototype.getSize = function() {
	  this.size = getSize( this.element );
	};
	
	/**
	 * apply CSS styles to element
	 * @param {Object} style
	 */
	Item.prototype.css = function( style ) {
	  var elemStyle = this.element.style;
	
	  for ( var prop in style ) {
	    // use vendor property if available
	    var supportedProp = vendorProperties[ prop ] || prop;
	    elemStyle[ supportedProp ] = style[ prop ];
	  }
	};
	
	 // measure position, and sets it
	Item.prototype.getPosition = function() {
	  var style = getStyle( this.element );
	  var layoutOptions = this.layout.options;
	  var isOriginLeft = layoutOptions.isOriginLeft;
	  var isOriginTop = layoutOptions.isOriginTop;
	  var xValue = style[ isOriginLeft ? 'left' : 'right' ];
	  var yValue = style[ isOriginTop ? 'top' : 'bottom' ];
	  // convert percent to pixels
	  var layoutSize = this.layout.size;
	  var x = xValue.indexOf('%') != -1 ?
	    ( parseFloat( xValue ) / 100 ) * layoutSize.width : parseInt( xValue, 10 );
	  var y = yValue.indexOf('%') != -1 ?
	    ( parseFloat( yValue ) / 100 ) * layoutSize.height : parseInt( yValue, 10 );
	
	  // clean up 'auto' or other non-integer values
	  x = isNaN( x ) ? 0 : x;
	  y = isNaN( y ) ? 0 : y;
	  // remove padding from measurement
	  x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;
	  y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;
	
	  this.position.x = x;
	  this.position.y = y;
	};
	
	// set settled position, apply padding
	Item.prototype.layoutPosition = function() {
	  var layoutSize = this.layout.size;
	  var layoutOptions = this.layout.options;
	  var style = {};
	
	  // x
	  var xPadding = layoutOptions.isOriginLeft ? 'paddingLeft' : 'paddingRight';
	  var xProperty = layoutOptions.isOriginLeft ? 'left' : 'right';
	  var xResetProperty = layoutOptions.isOriginLeft ? 'right' : 'left';
	
	  var x = this.position.x + layoutSize[ xPadding ];
	  // set in percentage or pixels
	  style[ xProperty ] = this.getXValue( x );
	  // reset other property
	  style[ xResetProperty ] = '';
	
	  // y
	  var yPadding = layoutOptions.isOriginTop ? 'paddingTop' : 'paddingBottom';
	  var yProperty = layoutOptions.isOriginTop ? 'top' : 'bottom';
	  var yResetProperty = layoutOptions.isOriginTop ? 'bottom' : 'top';
	
	  var y = this.position.y + layoutSize[ yPadding ];
	  // set in percentage or pixels
	  style[ yProperty ] = this.getYValue( y );
	  // reset other property
	  style[ yResetProperty ] = '';
	
	  this.css( style );
	  this.emitEvent( 'layout', [ this ] );
	};
	
	Item.prototype.getXValue = function( x ) {
	  var layoutOptions = this.layout.options;
	  return layoutOptions.percentPosition && !layoutOptions.isHorizontal ?
	    ( ( x / this.layout.size.width ) * 100 ) + '%' : x + 'px';
	};
	
	Item.prototype.getYValue = function( y ) {
	  var layoutOptions = this.layout.options;
	  return layoutOptions.percentPosition && layoutOptions.isHorizontal ?
	    ( ( y / this.layout.size.height ) * 100 ) + '%' : y + 'px';
	};
	
	
	Item.prototype._transitionTo = function( x, y ) {
	  this.getPosition();
	  // get current x & y from top/left
	  var curX = this.position.x;
	  var curY = this.position.y;
	
	  var compareX = parseInt( x, 10 );
	  var compareY = parseInt( y, 10 );
	  var didNotMove = compareX === this.position.x && compareY === this.position.y;
	
	  // save end position
	  this.setPosition( x, y );
	
	  // if did not move and not transitioning, just go to layout
	  if ( didNotMove && !this.isTransitioning ) {
	    this.layoutPosition();
	    return;
	  }
	
	  var transX = x - curX;
	  var transY = y - curY;
	  var transitionStyle = {};
	  transitionStyle.transform = this.getTranslate( transX, transY );
	
	  this.transition({
	    to: transitionStyle,
	    onTransitionEnd: {
	      transform: this.layoutPosition
	    },
	    isCleaning: true
	  });
	};
	
	Item.prototype.getTranslate = function( x, y ) {
	  // flip cooridinates if origin on right or bottom
	  var layoutOptions = this.layout.options;
	  x = layoutOptions.isOriginLeft ? x : -x;
	  y = layoutOptions.isOriginTop ? y : -y;
	
	  if ( is3d ) {
	    return 'translate3d(' + x + 'px, ' + y + 'px, 0)';
	  }
	
	  return 'translate(' + x + 'px, ' + y + 'px)';
	};
	
	// non transition + transform support
	Item.prototype.goTo = function( x, y ) {
	  this.setPosition( x, y );
	  this.layoutPosition();
	};
	
	// use transition and transforms if supported
	Item.prototype.moveTo = supportsCSS3 ?
	  Item.prototype._transitionTo : Item.prototype.goTo;
	
	Item.prototype.setPosition = function( x, y ) {
	  this.position.x = parseInt( x, 10 );
	  this.position.y = parseInt( y, 10 );
	};
	
	// ----- transition ----- //
	
	/**
	 * @param {Object} style - CSS
	 * @param {Function} onTransitionEnd
	 */
	
	// non transition, just trigger callback
	Item.prototype._nonTransition = function( args ) {
	  this.css( args.to );
	  if ( args.isCleaning ) {
	    this._removeStyles( args.to );
	  }
	  for ( var prop in args.onTransitionEnd ) {
	    args.onTransitionEnd[ prop ].call( this );
	  }
	};
	
	/**
	 * proper transition
	 * @param {Object} args - arguments
	 *   @param {Object} to - style to transition to
	 *   @param {Object} from - style to start transition from
	 *   @param {Boolean} isCleaning - removes transition styles after transition
	 *   @param {Function} onTransitionEnd - callback
	 */
	Item.prototype._transition = function( args ) {
	  // redirect to nonTransition if no transition duration
	  if ( !parseFloat( this.layout.options.transitionDuration ) ) {
	    this._nonTransition( args );
	    return;
	  }
	
	  var _transition = this._transn;
	  // keep track of onTransitionEnd callback by css property
	  for ( var prop in args.onTransitionEnd ) {
	    _transition.onEnd[ prop ] = args.onTransitionEnd[ prop ];
	  }
	  // keep track of properties that are transitioning
	  for ( prop in args.to ) {
	    _transition.ingProperties[ prop ] = true;
	    // keep track of properties to clean up when transition is done
	    if ( args.isCleaning ) {
	      _transition.clean[ prop ] = true;
	    }
	  }
	
	  // set from styles
	  if ( args.from ) {
	    this.css( args.from );
	    // force redraw. http://blog.alexmaccaw.com/css-transitions
	    var h = this.element.offsetHeight;
	    // hack for JSHint to hush about unused var
	    h = null;
	  }
	  // enable transition
	  this.enableTransition( args.to );
	  // set styles that are transitioning
	  this.css( args.to );
	
	  this.isTransitioning = true;
	
	};
	
	// dash before all cap letters, including first for
	// WebkitTransform => -webkit-transform
	function toDashedAll( str ) {
	  return str.replace( /([A-Z])/g, function( $1 ) {
	    return '-' + $1.toLowerCase();
	  });
	}
	
	var transitionProps = 'opacity,' +
	  toDashedAll( vendorProperties.transform || 'transform' );
	
	Item.prototype.enableTransition = function(/* style */) {
	  // HACK changing transitionProperty during a transition
	  // will cause transition to jump
	  if ( this.isTransitioning ) {
	    return;
	  }
	
	  // make `transition: foo, bar, baz` from style object
	  // HACK un-comment this when enableTransition can work
	  // while a transition is happening
	  // var transitionValues = [];
	  // for ( var prop in style ) {
	  //   // dash-ify camelCased properties like WebkitTransition
	  //   prop = vendorProperties[ prop ] || prop;
	  //   transitionValues.push( toDashedAll( prop ) );
	  // }
	  // enable transition styles
	  this.css({
	    transitionProperty: transitionProps,
	    transitionDuration: this.layout.options.transitionDuration
	  });
	  // listen for transition end event
	  this.element.addEventListener( transitionEndEvent, this, false );
	};
	
	Item.prototype.transition = Item.prototype[ transitionProperty ? '_transition' : '_nonTransition' ];
	
	// ----- events ----- //
	
	Item.prototype.onwebkitTransitionEnd = function( event ) {
	  this.ontransitionend( event );
	};
	
	Item.prototype.onotransitionend = function( event ) {
	  this.ontransitionend( event );
	};
	
	// properties that I munge to make my life easier
	var dashedVendorProperties = {
	  '-webkit-transform': 'transform',
	  '-moz-transform': 'transform',
	  '-o-transform': 'transform'
	};
	
	Item.prototype.ontransitionend = function( event ) {
	  // disregard bubbled events from children
	  if ( event.target !== this.element ) {
	    return;
	  }
	  var _transition = this._transn;
	  // get property name of transitioned property, convert to prefix-free
	  var propertyName = dashedVendorProperties[ event.propertyName ] || event.propertyName;
	
	  // remove property that has completed transitioning
	  delete _transition.ingProperties[ propertyName ];
	  // check if any properties are still transitioning
	  if ( isEmptyObj( _transition.ingProperties ) ) {
	    // all properties have completed transitioning
	    this.disableTransition();
	  }
	  // clean style
	  if ( propertyName in _transition.clean ) {
	    // clean up style
	    this.element.style[ event.propertyName ] = '';
	    delete _transition.clean[ propertyName ];
	  }
	  // trigger onTransitionEnd callback
	  if ( propertyName in _transition.onEnd ) {
	    var onTransitionEnd = _transition.onEnd[ propertyName ];
	    onTransitionEnd.call( this );
	    delete _transition.onEnd[ propertyName ];
	  }
	
	  this.emitEvent( 'transitionEnd', [ this ] );
	};
	
	Item.prototype.disableTransition = function() {
	  this.removeTransitionStyles();
	  this.element.removeEventListener( transitionEndEvent, this, false );
	  this.isTransitioning = false;
	};
	
	/**
	 * removes style property from element
	 * @param {Object} style
	**/
	Item.prototype._removeStyles = function( style ) {
	  // clean up transition styles
	  var cleanStyle = {};
	  for ( var prop in style ) {
	    cleanStyle[ prop ] = '';
	  }
	  this.css( cleanStyle );
	};
	
	var cleanTransitionStyle = {
	  transitionProperty: '',
	  transitionDuration: ''
	};
	
	Item.prototype.removeTransitionStyles = function() {
	  // remove transition
	  this.css( cleanTransitionStyle );
	};
	
	// ----- show/hide/remove ----- //
	
	// remove element from DOM
	Item.prototype.removeElem = function() {
	  this.element.parentNode.removeChild( this.element );
	  // remove display: none
	  this.css({ display: '' });
	  this.emitEvent( 'remove', [ this ] );
	};
	
	Item.prototype.remove = function() {
	  // just remove element if no transition support or no transition
	  if ( !transitionProperty || !parseFloat( this.layout.options.transitionDuration ) ) {
	    this.removeElem();
	    return;
	  }
	
	  // start transition
	  var _this = this;
	  this.once( 'transitionEnd', function() {
	    _this.removeElem();
	  });
	  this.hide();
	};
	
	Item.prototype.reveal = function() {
	  delete this.isHidden;
	  // remove display: none
	  this.css({ display: '' });
	
	  var options = this.layout.options;
	
	  var onTransitionEnd = {};
	  var transitionEndProperty = this.getHideRevealTransitionEndProperty('visibleStyle');
	  onTransitionEnd[ transitionEndProperty ] = this.onRevealTransitionEnd;
	
	  this.transition({
	    from: options.hiddenStyle,
	    to: options.visibleStyle,
	    isCleaning: true,
	    onTransitionEnd: onTransitionEnd
	  });
	};
	
	Item.prototype.onRevealTransitionEnd = function() {
	  // check if still visible
	  // during transition, item may have been hidden
	  if ( !this.isHidden ) {
	    this.emitEvent('reveal');
	  }
	};
	
	/**
	 * get style property use for hide/reveal transition end
	 * @param {String} styleProperty - hiddenStyle/visibleStyle
	 * @returns {String}
	 */
	Item.prototype.getHideRevealTransitionEndProperty = function( styleProperty ) {
	  var optionStyle = this.layout.options[ styleProperty ];
	  // use opacity
	  if ( optionStyle.opacity ) {
	    return 'opacity';
	  }
	  // get first property
	  for ( var prop in optionStyle ) {
	    return prop;
	  }
	};
	
	Item.prototype.hide = function() {
	  // set flag
	  this.isHidden = true;
	  // remove display: none
	  this.css({ display: '' });
	
	  var options = this.layout.options;
	
	  var onTransitionEnd = {};
	  var transitionEndProperty = this.getHideRevealTransitionEndProperty('hiddenStyle');
	  onTransitionEnd[ transitionEndProperty ] = this.onHideTransitionEnd;
	
	  this.transition({
	    from: options.visibleStyle,
	    to: options.hiddenStyle,
	    // keep hidden stuff hidden
	    isCleaning: true,
	    onTransitionEnd: onTransitionEnd
	  });
	};
	
	Item.prototype.onHideTransitionEnd = function() {
	  // check if still hidden
	  // during transition, item may have been un-hidden
	  if ( this.isHidden ) {
	    this.css({ display: 'none' });
	    this.emitEvent('hide');
	  }
	};
	
	Item.prototype.destroy = function() {
	  this.css({
	    position: '',
	    left: '',
	    right: '',
	    top: '',
	    bottom: '',
	    transition: '',
	    transform: ''
	  });
	};
	
	return Item;
	
	}));
	
	/*!
	 * Outlayer v1.4.2
	 * the brains and guts of a layout library
	 * MIT license
	 */
	
	( function( window, factory ) {
	  
	  // universal module definition
	
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __WEBPACK_LOCAL_MODULE_4__,
	        __WEBPACK_LOCAL_MODULE_5__,
	        __WEBPACK_LOCAL_MODULE_3__,
	        __WEBPACK_LOCAL_MODULE_8__,
	        __WEBPACK_LOCAL_MODULE_9__
	      ], __WEBPACK_LOCAL_MODULE_10__ = (function( eventie, EventEmitter, getSize, utils, Item ) {
	        return factory( window, eventie, EventEmitter, getSize, utils, Item);
	      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      window,
	      require('eventie'),
	      require('wolfy87-eventemitter'),
	      require('get-size'),
	      require('fizzy-ui-utils'),
	      require('./item')
	    );
	  } else {
	    // browser global
	    window.Outlayer = factory(
	      window,
	      window.eventie,
	      window.EventEmitter,
	      window.getSize,
	      window.fizzyUIUtils,
	      window.Outlayer.Item
	    );
	  }
	
	}( window, function factory( window, eventie, EventEmitter, getSize, utils, Item ) {
	
	
	// ----- vars ----- //
	
	var console = window.console;
	var jQuery = window.jQuery;
	var noop = function() {};
	
	// -------------------------- Outlayer -------------------------- //
	
	// globally unique identifiers
	var GUID = 0;
	// internal store of all Outlayer intances
	var instances = {};
	
	
	/**
	 * @param {Element, String} element
	 * @param {Object} options
	 * @constructor
	 */
	function Outlayer( element, options ) {
	  var queryElement = utils.getQueryElement( element );
	  if ( !queryElement ) {
	    if ( console ) {
	      console.error( 'Bad element for ' + this.constructor.namespace +
	        ': ' + ( queryElement || element ) );
	    }
	    return;
	  }
	  this.element = queryElement;
	  // add jQuery
	  if ( jQuery ) {
	    this.$element = jQuery( this.element );
	  }
	
	  // options
	  this.options = utils.extend( {}, this.constructor.defaults );
	  this.option( options );
	
	  // add id for Outlayer.getFromElement
	  var id = ++GUID;
	  this.element.outlayerGUID = id; // expando
	  instances[ id ] = this; // associate via id
	
	  // kick it off
	  this._create();
	
	  if ( this.options.isInitLayout ) {
	    this.layout();
	  }
	}
	
	// settings are for internal use only
	Outlayer.namespace = 'outlayer';
	Outlayer.Item = Item;
	
	// default options
	Outlayer.defaults = {
	  containerStyle: {
	    position: 'relative'
	  },
	  isInitLayout: true,
	  isOriginLeft: true,
	  isOriginTop: true,
	  isResizeBound: true,
	  isResizingContainer: true,
	  // item options
	  transitionDuration: '0.4s',
	  hiddenStyle: {
	    opacity: 0,
	    transform: 'scale(0.001)'
	  },
	  visibleStyle: {
	    opacity: 1,
	    transform: 'scale(1)'
	  }
	};
	
	// inherit EventEmitter
	utils.extend( Outlayer.prototype, EventEmitter.prototype );
	
	/**
	 * set options
	 * @param {Object} opts
	 */
	Outlayer.prototype.option = function( opts ) {
	  utils.extend( this.options, opts );
	};
	
	Outlayer.prototype._create = function() {
	  // get items from children
	  this.reloadItems();
	  // elements that affect layout, but are not laid out
	  this.stamps = [];
	  this.stamp( this.options.stamp );
	  // set container style
	  utils.extend( this.element.style, this.options.containerStyle );
	
	  // bind resize method
	  if ( this.options.isResizeBound ) {
	    this.bindResize();
	  }
	};
	
	// goes through all children again and gets bricks in proper order
	Outlayer.prototype.reloadItems = function() {
	  // collection of item elements
	  this.items = this._itemize( this.element.children );
	};
	
	
	/**
	 * turn elements into Outlayer.Items to be used in layout
	 * @param {Array or NodeList or HTMLElement} elems
	 * @returns {Array} items - collection of new Outlayer Items
	 */
	Outlayer.prototype._itemize = function( elems ) {
	
	  var itemElems = this._filterFindItemElements( elems );
	  var Item = this.constructor.Item;
	
	  // create new Outlayer Items for collection
	  var items = [];
	  for ( var i=0, len = itemElems.length; i < len; i++ ) {
	    var elem = itemElems[i];
	    var item = new Item( elem, this );
	    items.push( item );
	  }
	
	  return items;
	};
	
	/**
	 * get item elements to be used in layout
	 * @param {Array or NodeList or HTMLElement} elems
	 * @returns {Array} items - item elements
	 */
	Outlayer.prototype._filterFindItemElements = function( elems ) {
	  return utils.filterFindElements( elems, this.options.itemSelector );
	};
	
	/**
	 * getter method for getting item elements
	 * @returns {Array} elems - collection of item elements
	 */
	Outlayer.prototype.getItemElements = function() {
	  var elems = [];
	  for ( var i=0, len = this.items.length; i < len; i++ ) {
	    elems.push( this.items[i].element );
	  }
	  return elems;
	};
	
	// ----- init & layout ----- //
	
	/**
	 * lays out all items
	 */
	Outlayer.prototype.layout = function() {
	  this._resetLayout();
	  this._manageStamps();
	
	  // don't animate first layout
	  var isInstant = this.options.isLayoutInstant !== undefined ?
	    this.options.isLayoutInstant : !this._isLayoutInited;
	  this.layoutItems( this.items, isInstant );
	
	  // flag for initalized
	  this._isLayoutInited = true;
	};
	
	// _init is alias for layout
	Outlayer.prototype._init = Outlayer.prototype.layout;
	
	/**
	 * logic before any new layout
	 */
	Outlayer.prototype._resetLayout = function() {
	  this.getSize();
	};
	
	
	Outlayer.prototype.getSize = function() {
	  this.size = getSize( this.element );
	};
	
	/**
	 * get measurement from option, for columnWidth, rowHeight, gutter
	 * if option is String -> get element from selector string, & get size of element
	 * if option is Element -> get size of element
	 * else use option as a number
	 *
	 * @param {String} measurement
	 * @param {String} size - width or height
	 * @private
	 */
	Outlayer.prototype._getMeasurement = function( measurement, size ) {
	  var option = this.options[ measurement ];
	  var elem;
	  if ( !option ) {
	    // default to 0
	    this[ measurement ] = 0;
	  } else {
	    // use option as an element
	    if ( typeof option === 'string' ) {
	      elem = this.element.querySelector( option );
	    } else if ( utils.isElement( option ) ) {
	      elem = option;
	    }
	    // use size of element, if element
	    this[ measurement ] = elem ? getSize( elem )[ size ] : option;
	  }
	};
	
	/**
	 * layout a collection of item elements
	 * @api public
	 */
	Outlayer.prototype.layoutItems = function( items, isInstant ) {
	  items = this._getItemsForLayout( items );
	
	  this._layoutItems( items, isInstant );
	
	  this._postLayout();
	};
	
	/**
	 * get the items to be laid out
	 * you may want to skip over some items
	 * @param {Array} items
	 * @returns {Array} items
	 */
	Outlayer.prototype._getItemsForLayout = function( items ) {
	  var layoutItems = [];
	  for ( var i=0, len = items.length; i < len; i++ ) {
	    var item = items[i];
	    if ( !item.isIgnored ) {
	      layoutItems.push( item );
	    }
	  }
	  return layoutItems;
	};
	
	/**
	 * layout items
	 * @param {Array} items
	 * @param {Boolean} isInstant
	 */
	Outlayer.prototype._layoutItems = function( items, isInstant ) {
	  this._emitCompleteOnItems( 'layout', items );
	
	  if ( !items || !items.length ) {
	    // no items, emit event with empty array
	    return;
	  }
	
	  var queue = [];
	
	  for ( var i=0, len = items.length; i < len; i++ ) {
	    var item = items[i];
	    // get x/y object from method
	    var position = this._getItemLayoutPosition( item );
	    // enqueue
	    position.item = item;
	    position.isInstant = isInstant || item.isLayoutInstant;
	    queue.push( position );
	  }
	
	  this._processLayoutQueue( queue );
	};
	
	/**
	 * get item layout position
	 * @param {Outlayer.Item} item
	 * @returns {Object} x and y position
	 */
	Outlayer.prototype._getItemLayoutPosition = function( /* item */ ) {
	  return {
	    x: 0,
	    y: 0
	  };
	};
	
	/**
	 * iterate over array and position each item
	 * Reason being - separating this logic prevents 'layout invalidation'
	 * thx @paul_irish
	 * @param {Array} queue
	 */
	Outlayer.prototype._processLayoutQueue = function( queue ) {
	  for ( var i=0, len = queue.length; i < len; i++ ) {
	    var obj = queue[i];
	    this._positionItem( obj.item, obj.x, obj.y, obj.isInstant );
	  }
	};
	
	/**
	 * Sets position of item in DOM
	 * @param {Outlayer.Item} item
	 * @param {Number} x - horizontal position
	 * @param {Number} y - vertical position
	 * @param {Boolean} isInstant - disables transitions
	 */
	Outlayer.prototype._positionItem = function( item, x, y, isInstant ) {
	  if ( isInstant ) {
	    // if not transition, just set CSS
	    item.goTo( x, y );
	  } else {
	    item.moveTo( x, y );
	  }
	};
	
	/**
	 * Any logic you want to do after each layout,
	 * i.e. size the container
	 */
	Outlayer.prototype._postLayout = function() {
	  this.resizeContainer();
	};
	
	Outlayer.prototype.resizeContainer = function() {
	  if ( !this.options.isResizingContainer ) {
	    return;
	  }
	  var size = this._getContainerSize();
	  if ( size ) {
	    this._setContainerMeasure( size.width, true );
	    this._setContainerMeasure( size.height, false );
	  }
	};
	
	/**
	 * Sets width or height of container if returned
	 * @returns {Object} size
	 *   @param {Number} width
	 *   @param {Number} height
	 */
	Outlayer.prototype._getContainerSize = noop;
	
	/**
	 * @param {Number} measure - size of width or height
	 * @param {Boolean} isWidth
	 */
	Outlayer.prototype._setContainerMeasure = function( measure, isWidth ) {
	  if ( measure === undefined ) {
	    return;
	  }
	
	  var elemSize = this.size;
	  // add padding and border width if border box
	  if ( elemSize.isBorderBox ) {
	    measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight +
	      elemSize.borderLeftWidth + elemSize.borderRightWidth :
	      elemSize.paddingBottom + elemSize.paddingTop +
	      elemSize.borderTopWidth + elemSize.borderBottomWidth;
	  }
	
	  measure = Math.max( measure, 0 );
	  this.element.style[ isWidth ? 'width' : 'height' ] = measure + 'px';
	};
	
	/**
	 * emit eventComplete on a collection of items events
	 * @param {String} eventName
	 * @param {Array} items - Outlayer.Items
	 */
	Outlayer.prototype._emitCompleteOnItems = function( eventName, items ) {
	  var _this = this;
	  function onComplete() {
	    _this.dispatchEvent( eventName + 'Complete', null, [ items ] );
	  }
	
	  var count = items.length;
	  if ( !items || !count ) {
	    onComplete();
	    return;
	  }
	
	  var doneCount = 0;
	  function tick() {
	    doneCount++;
	    if ( doneCount === count ) {
	      onComplete();
	    }
	  }
	
	  // bind callback
	  for ( var i=0, len = items.length; i < len; i++ ) {
	    var item = items[i];
	    item.once( eventName, tick );
	  }
	};
	
	/**
	 * emits events via eventEmitter and jQuery events
	 * @param {String} type - name of event
	 * @param {Event} event - original event
	 * @param {Array} args - extra arguments
	 */
	Outlayer.prototype.dispatchEvent = function( type, event, args ) {
	  // add original event to arguments
	  var emitArgs = event ? [ event ].concat( args ) : args;
	  this.emitEvent( type, emitArgs );
	
	  if ( jQuery ) {
	    // set this.$element
	    this.$element = this.$element || jQuery( this.element );
	    if ( event ) {
	      // create jQuery event
	      var $event = jQuery.Event( event );
	      $event.type = type;
	      this.$element.trigger( $event, args );
	    } else {
	      // just trigger with type if no event available
	      this.$element.trigger( type, args );
	    }
	  }
	};
	
	// -------------------------- ignore & stamps -------------------------- //
	
	
	/**
	 * keep item in collection, but do not lay it out
	 * ignored items do not get skipped in layout
	 * @param {Element} elem
	 */
	Outlayer.prototype.ignore = function( elem ) {
	  var item = this.getItem( elem );
	  if ( item ) {
	    item.isIgnored = true;
	  }
	};
	
	/**
	 * return item to layout collection
	 * @param {Element} elem
	 */
	Outlayer.prototype.unignore = function( elem ) {
	  var item = this.getItem( elem );
	  if ( item ) {
	    delete item.isIgnored;
	  }
	};
	
	/**
	 * adds elements to stamps
	 * @param {NodeList, Array, Element, or String} elems
	 */
	Outlayer.prototype.stamp = function( elems ) {
	  elems = this._find( elems );
	  if ( !elems ) {
	    return;
	  }
	
	  this.stamps = this.stamps.concat( elems );
	  // ignore
	  for ( var i=0, len = elems.length; i < len; i++ ) {
	    var elem = elems[i];
	    this.ignore( elem );
	  }
	};
	
	/**
	 * removes elements to stamps
	 * @param {NodeList, Array, or Element} elems
	 */
	Outlayer.prototype.unstamp = function( elems ) {
	  elems = this._find( elems );
	  if ( !elems ){
	    return;
	  }
	
	  for ( var i=0, len = elems.length; i < len; i++ ) {
	    var elem = elems[i];
	    // filter out removed stamp elements
	    utils.removeFrom( this.stamps, elem );
	    this.unignore( elem );
	  }
	
	};
	
	/**
	 * finds child elements
	 * @param {NodeList, Array, Element, or String} elems
	 * @returns {Array} elems
	 */
	Outlayer.prototype._find = function( elems ) {
	  if ( !elems ) {
	    return;
	  }
	  // if string, use argument as selector string
	  if ( typeof elems === 'string' ) {
	    elems = this.element.querySelectorAll( elems );
	  }
	  elems = utils.makeArray( elems );
	  return elems;
	};
	
	Outlayer.prototype._manageStamps = function() {
	  if ( !this.stamps || !this.stamps.length ) {
	    return;
	  }
	
	  this._getBoundingRect();
	
	  for ( var i=0, len = this.stamps.length; i < len; i++ ) {
	    var stamp = this.stamps[i];
	    this._manageStamp( stamp );
	  }
	};
	
	// update boundingLeft / Top
	Outlayer.prototype._getBoundingRect = function() {
	  // get bounding rect for container element
	  var boundingRect = this.element.getBoundingClientRect();
	  var size = this.size;
	  this._boundingRect = {
	    left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,
	    top: boundingRect.top + size.paddingTop + size.borderTopWidth,
	    right: boundingRect.right - ( size.paddingRight + size.borderRightWidth ),
	    bottom: boundingRect.bottom - ( size.paddingBottom + size.borderBottomWidth )
	  };
	};
	
	/**
	 * @param {Element} stamp
	**/
	Outlayer.prototype._manageStamp = noop;
	
	/**
	 * get x/y position of element relative to container element
	 * @param {Element} elem
	 * @returns {Object} offset - has left, top, right, bottom
	 */
	Outlayer.prototype._getElementOffset = function( elem ) {
	  var boundingRect = elem.getBoundingClientRect();
	  var thisRect = this._boundingRect;
	  var size = getSize( elem );
	  var offset = {
	    left: boundingRect.left - thisRect.left - size.marginLeft,
	    top: boundingRect.top - thisRect.top - size.marginTop,
	    right: thisRect.right - boundingRect.right - size.marginRight,
	    bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom
	  };
	  return offset;
	};
	
	// -------------------------- resize -------------------------- //
	
	// enable event handlers for listeners
	// i.e. resize -> onresize
	Outlayer.prototype.handleEvent = function( event ) {
	  var method = 'on' + event.type;
	  if ( this[ method ] ) {
	    this[ method ]( event );
	  }
	};
	
	/**
	 * Bind layout to window resizing
	 */
	Outlayer.prototype.bindResize = function() {
	  // bind just one listener
	  if ( this.isResizeBound ) {
	    return;
	  }
	  eventie.bind( window, 'resize', this );
	  this.isResizeBound = true;
	};
	
	/**
	 * Unbind layout to window resizing
	 */
	Outlayer.prototype.unbindResize = function() {
	  if ( this.isResizeBound ) {
	    eventie.unbind( window, 'resize', this );
	  }
	  this.isResizeBound = false;
	};
	
	// original debounce by John Hann
	// http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/
	
	// this fires every resize
	Outlayer.prototype.onresize = function() {
	  if ( this.resizeTimeout ) {
	    clearTimeout( this.resizeTimeout );
	  }
	
	  var _this = this;
	  function delayed() {
	    _this.resize();
	    delete _this.resizeTimeout;
	  }
	
	  this.resizeTimeout = setTimeout( delayed, 100 );
	};
	
	// debounced, layout on resize
	Outlayer.prototype.resize = function() {
	  // don't trigger if size did not change
	  // or if resize was unbound. See #9
	  if ( !this.isResizeBound || !this.needsResizeLayout() ) {
	    return;
	  }
	
	  this.layout();
	};
	
	/**
	 * check if layout is needed post layout
	 * @returns Boolean
	 */
	Outlayer.prototype.needsResizeLayout = function() {
	  var size = getSize( this.element );
	  // check that this.size and size are there
	  // IE8 triggers resize on body size change, so they might not be
	  var hasSizes = this.size && size;
	  return hasSizes && size.innerWidth !== this.size.innerWidth;
	};
	
	// -------------------------- methods -------------------------- //
	
	/**
	 * add items to Outlayer instance
	 * @param {Array or NodeList or Element} elems
	 * @returns {Array} items - Outlayer.Items
	**/
	Outlayer.prototype.addItems = function( elems ) {
	  var items = this._itemize( elems );
	  // add items to collection
	  if ( items.length ) {
	    this.items = this.items.concat( items );
	  }
	  return items;
	};
	
	/**
	 * Layout newly-appended item elements
	 * @param {Array or NodeList or Element} elems
	 */
	Outlayer.prototype.appended = function( elems ) {
	  var items = this.addItems( elems );
	  if ( !items.length ) {
	    return;
	  }
	  // layout and reveal just the new items
	  this.layoutItems( items, true );
	  this.reveal( items );
	};
	
	/**
	 * Layout prepended elements
	 * @param {Array or NodeList or Element} elems
	 */
	Outlayer.prototype.prepended = function( elems ) {
	  var items = this._itemize( elems );
	  if ( !items.length ) {
	    return;
	  }
	  // add items to beginning of collection
	  var previousItems = this.items.slice(0);
	  this.items = items.concat( previousItems );
	  // start new layout
	  this._resetLayout();
	  this._manageStamps();
	  // layout new stuff without transition
	  this.layoutItems( items, true );
	  this.reveal( items );
	  // layout previous items
	  this.layoutItems( previousItems );
	};
	
	/**
	 * reveal a collection of items
	 * @param {Array of Outlayer.Items} items
	 */
	Outlayer.prototype.reveal = function( items ) {
	  this._emitCompleteOnItems( 'reveal', items );
	
	  var len = items && items.length;
	  for ( var i=0; len && i < len; i++ ) {
	    var item = items[i];
	    item.reveal();
	  }
	};
	
	/**
	 * hide a collection of items
	 * @param {Array of Outlayer.Items} items
	 */
	Outlayer.prototype.hide = function( items ) {
	  this._emitCompleteOnItems( 'hide', items );
	
	  var len = items && items.length;
	  for ( var i=0; len && i < len; i++ ) {
	    var item = items[i];
	    item.hide();
	  }
	};
	
	/**
	 * reveal item elements
	 * @param {Array}, {Element}, {NodeList} items
	 */
	Outlayer.prototype.revealItemElements = function( elems ) {
	  var items = this.getItems( elems );
	  this.reveal( items );
	};
	
	/**
	 * hide item elements
	 * @param {Array}, {Element}, {NodeList} items
	 */
	Outlayer.prototype.hideItemElements = function( elems ) {
	  var items = this.getItems( elems );
	  this.hide( items );
	};
	
	/**
	 * get Outlayer.Item, given an Element
	 * @param {Element} elem
	 * @param {Function} callback
	 * @returns {Outlayer.Item} item
	 */
	Outlayer.prototype.getItem = function( elem ) {
	  // loop through items to get the one that matches
	  for ( var i=0, len = this.items.length; i < len; i++ ) {
	    var item = this.items[i];
	    if ( item.element === elem ) {
	      // return item
	      return item;
	    }
	  }
	};
	
	/**
	 * get collection of Outlayer.Items, given Elements
	 * @param {Array} elems
	 * @returns {Array} items - Outlayer.Items
	 */
	Outlayer.prototype.getItems = function( elems ) {
	  elems = utils.makeArray( elems );
	  var items = [];
	  for ( var i=0, len = elems.length; i < len; i++ ) {
	    var elem = elems[i];
	    var item = this.getItem( elem );
	    if ( item ) {
	      items.push( item );
	    }
	  }
	
	  return items;
	};
	
	/**
	 * remove element(s) from instance and DOM
	 * @param {Array or NodeList or Element} elems
	 */
	Outlayer.prototype.remove = function( elems ) {
	  var removeItems = this.getItems( elems );
	
	  this._emitCompleteOnItems( 'remove', removeItems );
	
	  // bail if no items to remove
	  if ( !removeItems || !removeItems.length ) {
	    return;
	  }
	
	  for ( var i=0, len = removeItems.length; i < len; i++ ) {
	    var item = removeItems[i];
	    item.remove();
	    // remove item from collection
	    utils.removeFrom( this.items, item );
	  }
	};
	
	// ----- destroy ----- //
	
	// remove and disable Outlayer instance
	Outlayer.prototype.destroy = function() {
	  // clean up dynamic styles
	  var style = this.element.style;
	  style.height = '';
	  style.position = '';
	  style.width = '';
	  // destroy items
	  for ( var i=0, len = this.items.length; i < len; i++ ) {
	    var item = this.items[i];
	    item.destroy();
	  }
	
	  this.unbindResize();
	
	  var id = this.element.outlayerGUID;
	  delete instances[ id ]; // remove reference to instance by id
	  delete this.element.outlayerGUID;
	  // remove data for jQuery
	  if ( jQuery ) {
	    jQuery.removeData( this.element, this.constructor.namespace );
	  }
	
	};
	
	// -------------------------- data -------------------------- //
	
	/**
	 * get Outlayer instance from element
	 * @param {Element} elem
	 * @returns {Outlayer}
	 */
	Outlayer.data = function( elem ) {
	  elem = utils.getQueryElement( elem );
	  var id = elem && elem.outlayerGUID;
	  return id && instances[ id ];
	};
	
	
	// -------------------------- create Outlayer class -------------------------- //
	
	/**
	 * create a layout class
	 * @param {String} namespace
	 */
	Outlayer.create = function( namespace, options ) {
	  // sub-class Outlayer
	  function Layout() {
	    Outlayer.apply( this, arguments );
	  }
	  // inherit Outlayer prototype, use Object.create if there
	  if ( Object.create ) {
	    Layout.prototype = Object.create( Outlayer.prototype );
	  } else {
	    utils.extend( Layout.prototype, Outlayer.prototype );
	  }
	  // set contructor, used for namespace and Item
	  Layout.prototype.constructor = Layout;
	
	  Layout.defaults = utils.extend( {}, Outlayer.defaults );
	  // apply new options
	  utils.extend( Layout.defaults, options );
	  // keep prototype.settings for backwards compatibility (Packery v1.2.0)
	  Layout.prototype.settings = {};
	
	  Layout.namespace = namespace;
	
	  Layout.data = Outlayer.data;
	
	  // sub-class Item
	  Layout.Item = function LayoutItem() {
	    Item.apply( this, arguments );
	  };
	
	  Layout.Item.prototype = new Item();
	
	  // -------------------------- declarative -------------------------- //
	
	  utils.htmlInit( Layout, namespace );
	
	  // -------------------------- jQuery bridge -------------------------- //
	
	  // make into jQuery plugin
	  if ( jQuery && jQuery.bridget ) {
	    jQuery.bridget( namespace, Layout );
	  }
	
	  return Layout;
	};
	
	// ----- fin ----- //
	
	// back in global
	Outlayer.Item = Item;
	
	return Outlayer;
	
	}));
	
	
	/**
	 * Rect
	 * low-level utility class for basic geometry
	 */
	
	( function( window, factory ) {
	  
	  // universal module definition
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_LOCAL_MODULE_11__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory();
	  } else {
	    // browser global
	    window.Packery = window.Packery || {};
	    window.Packery.Rect = factory();
	  }
	
	}( window, function factory() {
	
	
	// -------------------------- Packery -------------------------- //
	
	// global namespace
	var Packery = window.Packery = function() {};
	
	// -------------------------- Rect -------------------------- //
	
	function Rect( props ) {
	  // extend properties from defaults
	  for ( var prop in Rect.defaults ) {
	    this[ prop ] = Rect.defaults[ prop ];
	  }
	
	  for ( prop in props ) {
	    this[ prop ] = props[ prop ];
	  }
	
	}
	
	// make available
	Packery.Rect = Rect;
	
	Rect.defaults = {
	  x: 0,
	  y: 0,
	  width: 0,
	  height: 0
	};
	
	/**
	 * Determines whether or not this rectangle wholly encloses another rectangle or point.
	 * @param {Rect} rect
	 * @returns {Boolean}
	**/
	Rect.prototype.contains = function( rect ) {
	  // points don't have width or height
	  var otherWidth = rect.width || 0;
	  var otherHeight = rect.height || 0;
	  return this.x <= rect.x &&
	    this.y <= rect.y &&
	    this.x + this.width >= rect.x + otherWidth &&
	    this.y + this.height >= rect.y + otherHeight;
	};
	
	/**
	 * Determines whether or not the rectangle intersects with another.
	 * @param {Rect} rect
	 * @returns {Boolean}
	**/
	Rect.prototype.overlaps = function( rect ) {
	  var thisRight = this.x + this.width;
	  var thisBottom = this.y + this.height;
	  var rectRight = rect.x + rect.width;
	  var rectBottom = rect.y + rect.height;
	
	  // http://stackoverflow.com/a/306332
	  return this.x < rectRight &&
	    thisRight > rect.x &&
	    this.y < rectBottom &&
	    thisBottom > rect.y;
	};
	
	/**
	 * @param {Rect} rect - the overlapping rect
	 * @returns {Array} freeRects - rects representing the area around the rect
	**/
	Rect.prototype.getMaximalFreeRects = function( rect ) {
	
	  // if no intersection, return false
	  if ( !this.overlaps( rect ) ) {
	    return false;
	  }
	
	  var freeRects = [];
	  var freeRect;
	
	  var thisRight = this.x + this.width;
	  var thisBottom = this.y + this.height;
	  var rectRight = rect.x + rect.width;
	  var rectBottom = rect.y + rect.height;
	
	  // top
	  if ( this.y < rect.y ) {
	    freeRect = new Rect({
	      x: this.x,
	      y: this.y,
	      width: this.width,
	      height: rect.y - this.y
	    });
	    freeRects.push( freeRect );
	  }
	
	  // right
	  if ( thisRight > rectRight ) {
	    freeRect = new Rect({
	      x: rectRight,
	      y: this.y,
	      width: thisRight - rectRight,
	      height: this.height
	    });
	    freeRects.push( freeRect );
	  }
	
	  // bottom
	  if ( thisBottom > rectBottom ) {
	    freeRect = new Rect({
	      x: this.x,
	      y: rectBottom,
	      width: this.width,
	      height: thisBottom - rectBottom
	    });
	    freeRects.push( freeRect );
	  }
	
	  // left
	  if ( this.x < rect.x ) {
	    freeRect = new Rect({
	      x: this.x,
	      y: this.y,
	      width: rect.x - this.x,
	      height: this.height
	    });
	    freeRects.push( freeRect );
	  }
	
	  return freeRects;
	};
	
	Rect.prototype.canFit = function( rect ) {
	  return this.width >= rect.width && this.height >= rect.height;
	};
	
	return Rect;
	
	}));
	
	/**
	 * Packer
	 * bin-packing algorithm
	 */
	
	( function( window, factory ) {
	  
	  // universal module definition
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __WEBPACK_LOCAL_MODULE_11__ ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_LOCAL_MODULE_12__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      require('./rect')
	    );
	  } else {
	    // browser global
	    var Packery = window.Packery = window.Packery || {};
	    Packery.Packer = factory( Packery.Rect );
	  }
	
	}( window, function factory( Rect ) {
	
	
	// -------------------------- Packer -------------------------- //
	
	/**
	 * @param {Number} width
	 * @param {Number} height
	 * @param {String} sortDirection
	 *   topLeft for vertical, leftTop for horizontal
	 */
	function Packer( width, height, sortDirection ) {
	  this.width = width || 0;
	  this.height = height || 0;
	  this.sortDirection = sortDirection || 'downwardLeftToRight';
	
	  this.reset();
	}
	
	Packer.prototype.reset = function() {
	  this.spaces = [];
	  this.newSpaces = [];
	
	  var initialSpace = new Rect({
	    x: 0,
	    y: 0,
	    width: this.width,
	    height: this.height
	  });
	
	  this.spaces.push( initialSpace );
	  // set sorter
	  this.sorter = sorters[ this.sortDirection ] || sorters.downwardLeftToRight;
	};
	
	// change x and y of rect to fit with in Packer's available spaces
	Packer.prototype.pack = function( rect ) {
	  for ( var i=0, len = this.spaces.length; i < len; i++ ) {
	    var space = this.spaces[i];
	    if ( space.canFit( rect ) ) {
	      this.placeInSpace( rect, space );
	      break;
	    }
	  }
	};
	
	Packer.prototype.placeInSpace = function( rect, space ) {
	  // place rect in space
	  rect.x = space.x;
	  rect.y = space.y;
	
	  this.placed( rect );
	};
	
	// update spaces with placed rect
	Packer.prototype.placed = function( rect ) {
	  // update spaces
	  var revisedSpaces = [];
	  for ( var i=0, len = this.spaces.length; i < len; i++ ) {
	    var space = this.spaces[i];
	    var newSpaces = space.getMaximalFreeRects( rect );
	    // add either the original space or the new spaces to the revised spaces
	    if ( newSpaces ) {
	      revisedSpaces.push.apply( revisedSpaces, newSpaces );
	    } else {
	      revisedSpaces.push( space );
	    }
	  }
	
	  this.spaces = revisedSpaces;
	
	  this.mergeSortSpaces();
	};
	
	Packer.prototype.mergeSortSpaces = function() {
	  // remove redundant spaces
	  Packer.mergeRects( this.spaces );
	  this.spaces.sort( this.sorter );
	};
	
	// add a space back
	Packer.prototype.addSpace = function( rect ) {
	  this.spaces.push( rect );
	  this.mergeSortSpaces();
	};
	
	// -------------------------- utility functions -------------------------- //
	
	/**
	 * Remove redundant rectangle from array of rectangles
	 * @param {Array} rects: an array of Rects
	 * @returns {Array} rects: an array of Rects
	**/
	Packer.mergeRects = function( rects ) {
	  for ( var i=0, len = rects.length; i < len; i++ ) {
	    var rect = rects[i];
	    // skip over this rect if it was already removed
	    if ( !rect ) {
	      continue;
	    }
	    // clone rects we're testing, remove this rect
	    var compareRects = rects.slice(0);
	    // do not compare with self
	    compareRects.splice( i, 1 );
	    // compare this rect with others
	    var removedCount = 0;
	    for ( var j=0, jLen = compareRects.length; j < jLen; j++ ) {
	      var compareRect = compareRects[j];
	      // if this rect contains another,
	      // remove that rect from test collection
	      var indexAdjust = i > j ? 0 : 1;
	      if ( rect.contains( compareRect ) ) {
	        // console.log( 'current test rects:' + testRects.length, testRects );
	        // console.log( i, j, indexAdjust, rect, compareRect );
	        rects.splice( j + indexAdjust - removedCount, 1 );
	        removedCount++;
	      }
	    }
	  }
	
	  return rects;
	};
	
	
	// -------------------------- sorters -------------------------- //
	
	// functions for sorting rects in order
	var sorters = {
	  // top down, then left to right
	  downwardLeftToRight: function( a, b ) {
	    return a.y - b.y || a.x - b.x;
	  },
	  // left to right, then top down
	  rightwardTopToBottom: function( a, b ) {
	    return a.x - b.x || a.y - b.y;
	  }
	};
	
	
	// --------------------------  -------------------------- //
	
	return Packer;
	
	}));
	/**
	 * Packery Item Element
	**/
	
	( function( window, factory ) {
	  
	  // universal module definition
	
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __WEBPACK_LOCAL_MODULE_2__,
	        __WEBPACK_LOCAL_MODULE_10__,
	        __WEBPACK_LOCAL_MODULE_11__
	      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_LOCAL_MODULE_13__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      require('desandro-get-style-property'),
	      require('outlayer'),
	      require('./rect')
	    );
	  } else {
	    // browser global
	    window.Packery.Item = factory(
	      window.getStyleProperty,
	      window.Outlayer,
	      window.Packery.Rect
	    );
	  }
	
	}( window, function factory( getStyleProperty, Outlayer, Rect ) {
	
	
	// -------------------------- Item -------------------------- //
	
	var transformProperty = getStyleProperty('transform');
	
	// sub-class Item
	var Item = function PackeryItem() {
	  Outlayer.Item.apply( this, arguments );
	};
	
	Item.prototype = new Outlayer.Item();
	
	var protoCreate = Item.prototype._create;
	Item.prototype._create = function() {
	  // call default _create logic
	  protoCreate.call( this );
	  this.rect = new Rect();
	  // rect used for placing, in drag or Packery.fit()
	  this.placeRect = new Rect();
	};
	
	// -------------------------- drag -------------------------- //
	
	Item.prototype.dragStart = function() {
	  this.getPosition();
	  this.removeTransitionStyles();
	  // remove transform property from transition
	  if ( this.isTransitioning && transformProperty ) {
	    this.element.style[ transformProperty ] = 'none';
	  }
	  this.getSize();
	  // create place rect, used for position when dragged then dropped
	  // or when positioning
	  this.isPlacing = true;
	  this.needsPositioning = false;
	  this.positionPlaceRect( this.position.x, this.position.y );
	  this.isTransitioning = false;
	  this.didDrag = false;
	};
	
	/**
	 * handle item when it is dragged
	 * @param {Number} x - horizontal position of dragged item
	 * @param {Number} y - vertical position of dragged item
	 */
	Item.prototype.dragMove = function( x, y ) {
	  this.didDrag = true;
	  var packerySize = this.layout.size;
	  x -= packerySize.paddingLeft;
	  y -= packerySize.paddingTop;
	  this.positionPlaceRect( x, y );
	};
	
	Item.prototype.dragStop = function() {
	  this.getPosition();
	  var isDiffX = this.position.x != this.placeRect.x;
	  var isDiffY = this.position.y != this.placeRect.y;
	  // set post-drag positioning flag
	  this.needsPositioning = isDiffX || isDiffY;
	  // reset flag
	  this.didDrag = false;
	};
	
	// -------------------------- placing -------------------------- //
	
	/**
	 * position a rect that will occupy space in the packer
	 * @param {Number} x
	 * @param {Number} y
	 * @param {Boolean} isMaxYContained
	 */
	Item.prototype.positionPlaceRect = function( x, y, isMaxYOpen ) {
	  this.placeRect.x = this.getPlaceRectCoord( x, true );
	  this.placeRect.y = this.getPlaceRectCoord( y, false, isMaxYOpen );
	};
	
	/**
	 * get x/y coordinate for place rect
	 * @param {Number} coord - x or y
	 * @param {Boolean} isX
	 * @param {Boolean} isMaxOpen - does not limit value to outer bound
	 * @returns {Number} coord - processed x or y
	 */
	Item.prototype.getPlaceRectCoord = function( coord, isX, isMaxOpen ) {
	  var measure = isX ? 'Width' : 'Height';
	  var size = this.size[ 'outer' + measure ];
	  var segment = this.layout[ isX ? 'columnWidth' : 'rowHeight' ];
	  var parentSize = this.layout.size[ 'inner' + measure ];
	
	  // additional parentSize calculations for Y
	  if ( !isX ) {
	    parentSize = Math.max( parentSize, this.layout.maxY );
	    // prevent gutter from bumping up height when non-vertical grid
	    if ( !this.layout.rowHeight ) {
	      parentSize -= this.layout.gutter;
	    }
	  }
	
	  var max;
	
	  if ( segment ) {
	    segment += this.layout.gutter;
	    // allow for last column to reach the edge
	    parentSize += isX ? this.layout.gutter : 0;
	    // snap to closest segment
	    coord = Math.round( coord / segment );
	    // contain to outer bound
	    // contain non-growing bound, allow growing bound to grow
	    var mathMethod;
	    if ( this.layout.options.isHorizontal ) {
	      mathMethod = !isX ? 'floor' : 'ceil';
	    } else {
	      mathMethod = isX ? 'floor' : 'ceil';
	    }
	    var maxSegments = Math[ mathMethod ]( parentSize / segment );
	    maxSegments -= Math.ceil( size / segment );
	    max = maxSegments;
	  } else {
	    max = parentSize - size;
	  }
	
	  coord = isMaxOpen ? coord : Math.min( coord, max );
	  coord *= segment || 1;
	
	  return Math.max( 0, coord );
	};
	
	Item.prototype.copyPlaceRectPosition = function() {
	  this.rect.x = this.placeRect.x;
	  this.rect.y = this.placeRect.y;
	};
	
	// -----  ----- //
	
	// remove element from DOM
	Item.prototype.removeElem = function() {
	  this.element.parentNode.removeChild( this.element );
	  // add space back to packer
	  this.layout.packer.addSpace( this.rect );
	  this.emitEvent( 'remove', [ this ] );
	};
	
	// -----  ----- //
	
	return Item;
	
	}));
	
	/*!
	 * Packery v1.4.3
	 * bin-packing layout library
	 *
	 * Licensed GPLv3 for open source use
	 * or Flickity Commercial License for commercial use
	 *
	 * http://packery.metafizzy.co
	 * Copyright 2015 Metafizzy
	 */
	
	( function( window, factory ) {
	  
	  // universal module definition
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __WEBPACK_LOCAL_MODULE_1__,
	        __WEBPACK_LOCAL_MODULE_3__,
	        __WEBPACK_LOCAL_MODULE_10__,
	        __WEBPACK_LOCAL_MODULE_11__,
	        __WEBPACK_LOCAL_MODULE_12__,
	        __WEBPACK_LOCAL_MODULE_13__
	      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      require('desandro-classie'),
	      require('get-size'),
	      require('outlayer'),
	      require('./rect'),
	      require('./packer'),
	      require('./item')
	    );
	  } else {
	    // browser global
	    window.Packery = factory(
	      window.classie,
	      window.getSize,
	      window.Outlayer,
	      window.Packery.Rect,
	      window.Packery.Packer,
	      window.Packery.Item
	    );
	  }
	
	}( window, function factory( classie, getSize, Outlayer, Rect, Packer, Item ) {
	
	
	// ----- Rect ----- //
	
	// allow for pixel rounding errors IE8-IE11 & Firefox; #227
	Rect.prototype.canFit = function( rect ) {
	  return this.width >= rect.width - 1 && this.height >= rect.height - 1;
	};
	
	// -------------------------- Packery -------------------------- //
	
	// create an Outlayer layout class
	var Packery = Outlayer.create('packery');
	Packery.Item = Item;
	
	Packery.prototype._create = function() {
	  // call super
	  Outlayer.prototype._create.call( this );
	
	  // initial properties
	  this.packer = new Packer();
	
	  // Left over from v1.0
	  this.stamp( this.options.stamped );
	
	  // create drag handlers
	  var _this = this;
	  this.handleDraggabilly = {
	    dragStart: function() {
	      _this.itemDragStart( this.element );
	    },
	    dragMove: function() {
	      _this.itemDragMove( this.element, this.position.x, this.position.y );
	    },
	    dragEnd: function() {
	      _this.itemDragEnd( this.element );
	    }
	  };
	
	  this.handleUIDraggable = {
	    start: function handleUIDraggableStart( event, ui ) {
	      // HTML5 may trigger dragstart, dismiss HTML5 dragging
	      if ( !ui ) {
	        return;
	      }
	      _this.itemDragStart( event.currentTarget );
	    },
	    drag: function handleUIDraggableDrag( event, ui ) {
	      if ( !ui ) {
	        return;
	      }
	      _this.itemDragMove( event.currentTarget, ui.position.left, ui.position.top );
	    },
	    stop: function handleUIDraggableStop( event, ui ) {
	      if ( !ui ) {
	        return;
	      }
	      _this.itemDragEnd( event.currentTarget );
	    }
	  };
	
	};
	
	
	// ----- init & layout ----- //
	
	/**
	 * logic before any new layout
	 */
	Packery.prototype._resetLayout = function() {
	  this.getSize();
	
	  this._getMeasurements();
	
	  // reset packer
	  var packer = this.packer;
	  // packer settings, if horizontal or vertical
	  if ( this.options.isHorizontal ) {
	    packer.width = Number.POSITIVE_INFINITY;
	    packer.height = this.size.innerHeight + this.gutter;
	    packer.sortDirection = 'rightwardTopToBottom';
	  } else {
	    packer.width = this.size.innerWidth + this.gutter;
	    packer.height = Number.POSITIVE_INFINITY;
	    packer.sortDirection = 'downwardLeftToRight';
	  }
	
	  packer.reset();
	
	  // layout
	  this.maxY = 0;
	  this.maxX = 0;
	};
	
	/**
	 * update columnWidth, rowHeight, & gutter
	 * @private
	 */
	Packery.prototype._getMeasurements = function() {
	  this._getMeasurement( 'columnWidth', 'width' );
	  this._getMeasurement( 'rowHeight', 'height' );
	  this._getMeasurement( 'gutter', 'width' );
	};
	
	Packery.prototype._getItemLayoutPosition = function( item ) {
	  this._packItem( item );
	  return item.rect;
	};
	
	
	/**
	 * layout item in packer
	 * @param {Packery.Item} item
	 */
	Packery.prototype._packItem = function( item ) {
	  this._setRectSize( item.element, item.rect );
	  // pack the rect in the packer
	  this.packer.pack( item.rect );
	  this._setMaxXY( item.rect );
	};
	
	/**
	 * set max X and Y value, for size of container
	 * @param {Packery.Rect} rect
	 * @private
	 */
	Packery.prototype._setMaxXY = function( rect ) {
	  this.maxX = Math.max( rect.x + rect.width, this.maxX );
	  this.maxY = Math.max( rect.y + rect.height, this.maxY );
	};
	
	/**
	 * set the width and height of a rect, applying columnWidth and rowHeight
	 * @param {Element} elem
	 * @param {Packery.Rect} rect
	 */
	Packery.prototype._setRectSize = function( elem, rect ) {
	  var size = getSize( elem );
	  var w = size.outerWidth;
	  var h = size.outerHeight;
	  // size for columnWidth and rowHeight, if available
	  // only check if size is non-zero, #177
	  if ( w || h ) {
	    w = this._applyGridGutter( w, this.columnWidth );
	    h = this._applyGridGutter( h, this.rowHeight );
	  }
	  // rect must fit in packer
	  rect.width = Math.min( w, this.packer.width );
	  rect.height = Math.min( h, this.packer.height );
	};
	
	/**
	 * fits item to columnWidth/rowHeight and adds gutter
	 * @param {Number} measurement - item width or height
	 * @param {Number} gridSize - columnWidth or rowHeight
	 * @returns measurement
	 */
	Packery.prototype._applyGridGutter = function( measurement, gridSize ) {
	  // just add gutter if no gridSize
	  if ( !gridSize ) {
	    return measurement + this.gutter;
	  }
	  gridSize += this.gutter;
	  // fit item to columnWidth/rowHeight
	  var remainder = measurement % gridSize;
	  var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';
	  measurement = Math[ mathMethod ]( measurement / gridSize ) * gridSize;
	  return measurement;
	};
	
	Packery.prototype._getContainerSize = function() {
	  if ( this.options.isHorizontal ) {
	    return {
	      width: this.maxX - this.gutter
	    };
	  } else {
	    return {
	      height: this.maxY - this.gutter
	    };
	  }
	};
	
	
	// -------------------------- stamp -------------------------- //
	
	/**
	 * makes space for element
	 * @param {Element} elem
	 */
	Packery.prototype._manageStamp = function( elem ) {
	
	  var item = this.getItem( elem );
	  var rect;
	  if ( item && item.isPlacing ) {
	    rect = item.placeRect;
	  } else {
	    var offset = this._getElementOffset( elem );
	    rect = new Rect({
	      x: this.options.isOriginLeft ? offset.left : offset.right,
	      y: this.options.isOriginTop ? offset.top : offset.bottom
	    });
	  }
	
	  this._setRectSize( elem, rect );
	  // save its space in the packer
	  this.packer.placed( rect );
	  this._setMaxXY( rect );
	};
	
	// -------------------------- methods -------------------------- //
	
	function verticalSorter( a, b ) {
	  return a.position.y - b.position.y || a.position.x - b.position.x;
	}
	
	function horizontalSorter( a, b ) {
	  return a.position.x - b.position.x || a.position.y - b.position.y;
	}
	
	Packery.prototype.sortItemsByPosition = function() {
	  var sorter = this.options.isHorizontal ? horizontalSorter : verticalSorter;
	  this.items.sort( sorter );
	};
	
	/**
	 * Fit item element in its current position
	 * Packery will position elements around it
	 * useful for expanding elements
	 *
	 * @param {Element} elem
	 * @param {Number} x - horizontal destination position, optional
	 * @param {Number} y - vertical destination position, optional
	 */
	Packery.prototype.fit = function( elem, x, y ) {
	  var item = this.getItem( elem );
	  if ( !item ) {
	    return;
	  }
	
	  // prepare internal properties
	  this._getMeasurements();
	
	  // stamp item to get it out of layout
	  this.stamp( item.element );
	  // required for positionPlaceRect
	  item.getSize();
	  // set placing flag
	  item.isPlacing = true;
	  // fall back to current position for fitting
	  x = x === undefined ? item.rect.x: x;
	  y = y === undefined ? item.rect.y: y;
	
	  // position it best at its destination
	  item.positionPlaceRect( x, y, true );
	
	  this._bindFitEvents( item );
	  item.moveTo( item.placeRect.x, item.placeRect.y );
	  // layout everything else
	  this.layout();
	
	  // return back to regularly scheduled programming
	  this.unstamp( item.element );
	  this.sortItemsByPosition();
	  // un set placing flag, back to normal
	  item.isPlacing = false;
	  // copy place rect position
	  item.copyPlaceRectPosition();
	};
	
	/**
	 * emit event when item is fit and other items are laid out
	 * @param {Packery.Item} item
	 * @private
	 */
	Packery.prototype._bindFitEvents = function( item ) {
	  var _this = this;
	  var ticks = 0;
	  function tick() {
	    ticks++;
	    if ( ticks != 2 ) {
	      return;
	    }
	    _this.dispatchEvent( 'fitComplete', null, [ item ] );
	  }
	  // when item is laid out
	  item.on( 'layout', function() {
	    tick();
	    return true;
	  });
	  // when all items are laid out
	  this.on( 'layoutComplete', function() {
	    tick();
	    return true;
	  });
	};
	
	// -------------------------- resize -------------------------- //
	
	// debounced, layout on resize
	Packery.prototype.resize = function() {
	  // don't trigger if size did not change
	  var size = getSize( this.element );
	  // check that this.size and size are there
	  // IE8 triggers resize on body size change, so they might not be
	  var hasSizes = this.size && size;
	  var innerSize = this.options.isHorizontal ? 'innerHeight' : 'innerWidth';
	  if ( hasSizes && size[ innerSize ] == this.size[ innerSize ] ) {
	    return;
	  }
	
	  this.layout();
	};
	
	// -------------------------- drag -------------------------- //
	
	/**
	 * handle an item drag start event
	 * @param {Element} elem
	 */
	Packery.prototype.itemDragStart = function( elem ) {
	  this.stamp( elem );
	  var item = this.getItem( elem );
	  if ( item ) {
	    item.dragStart();
	  }
	};
	
	/**
	 * handle an item drag move event
	 * @param {Element} elem
	 * @param {Number} x - horizontal change in position
	 * @param {Number} y - vertical change in position
	 */
	Packery.prototype.itemDragMove = function( elem, x, y ) {
	  var item = this.getItem( elem );
	  if ( item ) {
	    item.dragMove( x, y );
	  }
	
	  // debounce
	  var _this = this;
	  // debounce triggering layout
	  function delayed() {
	    _this.layout();
	    delete _this.dragTimeout;
	  }
	
	  this.clearDragTimeout();
	
	  this.dragTimeout = setTimeout( delayed, 40 );
	};
	
	Packery.prototype.clearDragTimeout = function() {
	  if ( this.dragTimeout ) {
	    clearTimeout( this.dragTimeout );
	  }
	};
	
	/**
	 * handle an item drag end event
	 * @param {Element} elem
	 */
	Packery.prototype.itemDragEnd = function( elem ) {
	  var item = this.getItem( elem );
	  var itemDidDrag;
	  if ( item ) {
	    itemDidDrag = item.didDrag;
	    item.dragStop();
	  }
	  // if elem didn't move, or if it doesn't need positioning
	  // unignore and unstamp and call it a day
	  if ( !item || ( !itemDidDrag && !item.needsPositioning ) ) {
	    this.unstamp( elem );
	    return;
	  }
	  // procced with dragged item
	
	  classie.add( item.element, 'is-positioning-post-drag' );
	
	  // save this var, as it could get reset in dragStart
	  var onLayoutComplete = this._getDragEndLayoutComplete( elem, item );
	
	  if ( item.needsPositioning ) {
	    item.on( 'layout', onLayoutComplete );
	    item.moveTo( item.placeRect.x, item.placeRect.y );
	  } else if ( item ) {
	    // item didn't need placement
	    item.copyPlaceRectPosition();
	  }
	
	  this.clearDragTimeout();
	  this.on( 'layoutComplete', onLayoutComplete );
	  this.layout();
	
	};
	
	/**
	 * get drag end callback
	 * @param {Element} elem
	 * @param {Packery.Item} item
	 * @returns {Function} onLayoutComplete
	 */
	Packery.prototype._getDragEndLayoutComplete = function( elem, item ) {
	  var itemNeedsPositioning = item && item.needsPositioning;
	  var completeCount = 0;
	  var asyncCount = itemNeedsPositioning ? 2 : 1;
	  var _this = this;
	
	  return function onLayoutComplete() {
	    completeCount++;
	    // don't proceed if not complete
	    if ( completeCount != asyncCount ) {
	      return true;
	    }
	    // reset item
	    if ( item ) {
	      classie.remove( item.element, 'is-positioning-post-drag' );
	      item.isPlacing = false;
	      item.copyPlaceRectPosition();
	    }
	
	    _this.unstamp( elem );
	    // only sort when item moved
	    _this.sortItemsByPosition();
	
	    // emit item drag event now that everything is done
	    if ( itemNeedsPositioning ) {
	      _this.dispatchEvent( 'dragItemPositioned', null, [ item ] );
	    }
	    // listen once
	    return true;
	  };
	};
	
	/**
	 * binds Draggabilly events
	 * @param {Draggabilly} draggie
	 */
	Packery.prototype.bindDraggabillyEvents = function( draggie ) {
	  draggie.on( 'dragStart', this.handleDraggabilly.dragStart );
	  draggie.on( 'dragMove', this.handleDraggabilly.dragMove );
	  draggie.on( 'dragEnd', this.handleDraggabilly.dragEnd );
	};
	
	/**
	 * binds jQuery UI Draggable events
	 * @param {jQuery} $elems
	 */
	Packery.prototype.bindUIDraggableEvents = function( $elems ) {
	  $elems
	    .on( 'dragstart', this.handleUIDraggable.start )
	    .on( 'drag', this.handleUIDraggable.drag )
	    .on( 'dragstop', this.handleUIDraggable.stop );
	};
	
	Packery.Rect = Rect;
	Packery.Packer = Packer;
	
	return Packery;
	
	}));
	
	


/***/ },

/***/ 270:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_1__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_2__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_3__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_4__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_5__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_6__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_7__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/
	var $ = __webpack_require__(225);
	
	/*!
	 * Draggabilly PACKAGED v1.2.4
	 * Make that shiz draggable
	 * http://draggabilly.desandro.com
	 * MIT license
	 */
	
	/**
	 * Bridget makes jQuery widgets
	 * v1.1.0
	 * MIT license
	 */
	
	( function( window ) {
	
	
	
	// -------------------------- utils -------------------------- //
	
	var slice = Array.prototype.slice;
	
	function noop() {}
	
	// -------------------------- definition -------------------------- //
	
	function defineBridget( $ ) {
	
	// bail if no jQuery
	if ( !$ ) {
	  return;
	}
	
	// -------------------------- addOptionMethod -------------------------- //
	
	/**
	 * adds option method -> $().plugin('option', {...})
	 * @param {Function} PluginClass - constructor class
	 */
	function addOptionMethod( PluginClass ) {
	  // don't overwrite original option method
	  if ( PluginClass.prototype.option ) {
	    return;
	  }
	
	  // option setter
	  PluginClass.prototype.option = function( opts ) {
	    // bail out if not an object
	    if ( !$.isPlainObject( opts ) ){
	      return;
	    }
	    this.options = $.extend( true, this.options, opts );
	  };
	}
	
	// -------------------------- plugin bridge -------------------------- //
	
	// helper function for logging errors
	// $.error breaks jQuery chaining
	var logError = typeof console === 'undefined' ? noop :
	  function( message ) {
	    console.error( message );
	  };
	
	/**
	 * jQuery plugin bridge, access methods like $elem.plugin('method')
	 * @param {String} namespace - plugin name
	 * @param {Function} PluginClass - constructor class
	 */
	function bridge( namespace, PluginClass ) {
	  // add to jQuery fn namespace
	  $.fn[ namespace ] = function( options ) {
	    if ( typeof options === 'string' ) {
	      // call plugin method when first argument is a string
	      // get arguments for method
	      var args = slice.call( arguments, 1 );
	
	      for ( var i=0, len = this.length; i < len; i++ ) {
	        var elem = this[i];
	        var instance = $.data( elem, namespace );
	        if ( !instance ) {
	          logError( "cannot call methods on " + namespace + " prior to initialization; " +
	            "attempted to call '" + options + "'" );
	          continue;
	        }
	        if ( !$.isFunction( instance[options] ) || options.charAt(0) === '_' ) {
	          logError( "no such method '" + options + "' for " + namespace + " instance" );
	          continue;
	        }
	
	        // trigger method with arguments
	        var returnValue = instance[ options ].apply( instance, args );
	
	        // break look and return first value if provided
	        if ( returnValue !== undefined ) {
	          return returnValue;
	        }
	      }
	      // return this if no return value
	      return this;
	    } else {
	      return this.each( function() {
	        var instance = $.data( this, namespace );
	        if ( instance ) {
	          // apply options & init
	          instance.option( options );
	          instance._init();
	        } else {
	          // initialize new instance
	          instance = new PluginClass( this, options );
	          $.data( this, namespace, instance );
	        }
	      });
	    }
	  };
	
	}
	
	// -------------------------- bridget -------------------------- //
	
	/**
	 * converts a Prototypical class into a proper jQuery plugin
	 *   the class must have a ._init method
	 * @param {String} namespace - plugin name, used in $().pluginName
	 * @param {Function} PluginClass - constructor class
	 */
	$.bridget = function( namespace, PluginClass ) {
	  addOptionMethod( PluginClass );
	  bridge( namespace, PluginClass );
	};
	
	return $.bridget;
	
	}
	
	// transport
	if ( true ) {
	  // AMD
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(225) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (defineBridget), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if ( typeof exports === 'object' ) {
	  defineBridget( require('jquery') );
	} else {
	  // get jquery from browser global
	  defineBridget( window.jQuery );
	}
	
	})( window );
	
	/*!
	 * classie v1.0.1
	 * class helper functions
	 * from bonzo https://github.com/ded/bonzo
	 * MIT license
	 * 
	 * classie.has( elem, 'my-class' ) -> true/false
	 * classie.add( elem, 'my-new-class' )
	 * classie.remove( elem, 'my-unwanted-class' )
	 * classie.toggle( elem, 'my-class' )
	 */
	
	/*jshint browser: true, strict: true, undef: true, unused: true */
	/*global define: false, module: false */
	
	( function( window ) {
	
	
	
	// class helper functions from bonzo https://github.com/ded/bonzo
	
	function classReg( className ) {
	  return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
	}
	
	// classList support for class management
	// altho to be fair, the api sucks because it won't accept multiple classes at once
	var hasClass, addClass, removeClass;
	
	if ( 'classList' in document.documentElement ) {
	  hasClass = function( elem, c ) {
	    return elem.classList.contains( c );
	  };
	  addClass = function( elem, c ) {
	    elem.classList.add( c );
	  };
	  removeClass = function( elem, c ) {
	    elem.classList.remove( c );
	  };
	}
	else {
	  hasClass = function( elem, c ) {
	    return classReg( c ).test( elem.className );
	  };
	  addClass = function( elem, c ) {
	    if ( !hasClass( elem, c ) ) {
	      elem.className = elem.className + ' ' + c;
	    }
	  };
	  removeClass = function( elem, c ) {
	    elem.className = elem.className.replace( classReg( c ), ' ' );
	  };
	}
	
	function toggleClass( elem, c ) {
	  var fn = hasClass( elem, c ) ? removeClass : addClass;
	  fn( elem, c );
	}
	
	var classie = {
	  // full names
	  hasClass: hasClass,
	  addClass: addClass,
	  removeClass: removeClass,
	  toggleClass: toggleClass,
	  // short names
	  has: hasClass,
	  add: addClass,
	  remove: removeClass,
	  toggle: toggleClass
	};
	
	// transport
	if ( true ) {
	  // AMD
	  !(__WEBPACK_AMD_DEFINE_FACTORY__ = (classie), __WEBPACK_LOCAL_MODULE_1__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	} else if ( typeof exports === 'object' ) {
	  // CommonJS
	  module.exports = classie;
	} else {
	  // browser global
	  window.classie = classie;
	}
	
	})( window );
	
	/*!
	 * getStyleProperty v1.0.4
	 * original by kangax
	 * http://perfectionkills.com/feature-testing-css-properties/
	 * MIT license
	 */
	
	/*jshint browser: true, strict: true, undef: true */
	/*global define: false, exports: false, module: false */
	
	( function( window ) {
	
	
	
	var prefixes = 'Webkit Moz ms Ms O'.split(' ');
	var docElemStyle = document.documentElement.style;
	
	function getStyleProperty( propName ) {
	  if ( !propName ) {
	    return;
	  }
	
	  // test standard property first
	  if ( typeof docElemStyle[ propName ] === 'string' ) {
	    return propName;
	  }
	
	  // capitalize
	  propName = propName.charAt(0).toUpperCase() + propName.slice(1);
	
	  // test vendor specific properties
	  var prefixed;
	  for ( var i=0, len = prefixes.length; i < len; i++ ) {
	    prefixed = prefixes[i] + propName;
	    if ( typeof docElemStyle[ prefixed ] === 'string' ) {
	      return prefixed;
	    }
	  }
	}
	
	// transport
	if ( true ) {
	  // AMD
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_2__ = (function() {
	    return getStyleProperty;
	  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	} else if ( typeof exports === 'object' ) {
	  // CommonJS for Component
	  module.exports = getStyleProperty;
	} else {
	  // browser global
	  window.getStyleProperty = getStyleProperty;
	}
	
	})( window );
	
	/*!
	 * getSize v1.2.2
	 * measure size of elements
	 * MIT license
	 */
	
	/*jshint browser: true, strict: true, undef: true, unused: true */
	/*global define: false, exports: false, require: false, module: false, console: false */
	
	( function( window, undefined ) {
	
	
	
	// -------------------------- helpers -------------------------- //
	
	// get a number from a string, not a percentage
	function getStyleSize( value ) {
	  var num = parseFloat( value );
	  // not a percent like '100%', and a number
	  var isValid = value.indexOf('%') === -1 && !isNaN( num );
	  return isValid && num;
	}
	
	function noop() {}
	
	var logError = typeof console === 'undefined' ? noop :
	  function( message ) {
	    console.error( message );
	  };
	
	// -------------------------- measurements -------------------------- //
	
	var measurements = [
	  'paddingLeft',
	  'paddingRight',
	  'paddingTop',
	  'paddingBottom',
	  'marginLeft',
	  'marginRight',
	  'marginTop',
	  'marginBottom',
	  'borderLeftWidth',
	  'borderRightWidth',
	  'borderTopWidth',
	  'borderBottomWidth'
	];
	
	function getZeroSize() {
	  var size = {
	    width: 0,
	    height: 0,
	    innerWidth: 0,
	    innerHeight: 0,
	    outerWidth: 0,
	    outerHeight: 0
	  };
	  for ( var i=0, len = measurements.length; i < len; i++ ) {
	    var measurement = measurements[i];
	    size[ measurement ] = 0;
	  }
	  return size;
	}
	
	
	
	function defineGetSize( getStyleProperty ) {
	
	// -------------------------- setup -------------------------- //
	
	var isSetup = false;
	
	var getStyle, boxSizingProp, isBoxSizeOuter;
	
	/**
	 * setup vars and functions
	 * do it on initial getSize(), rather than on script load
	 * For Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=548397
	 */
	function setup() {
	  // setup once
	  if ( isSetup ) {
	    return;
	  }
	  isSetup = true;
	
	  var getComputedStyle = window.getComputedStyle;
	  getStyle = ( function() {
	    var getStyleFn = getComputedStyle ?
	      function( elem ) {
	        return getComputedStyle( elem, null );
	      } :
	      function( elem ) {
	        return elem.currentStyle;
	      };
	
	      return function getStyle( elem ) {
	        var style = getStyleFn( elem );
	        if ( !style ) {
	          logError( 'Style returned ' + style +
	            '. Are you running this code in a hidden iframe on Firefox? ' +
	            'See http://bit.ly/getsizebug1' );
	        }
	        return style;
	      };
	  })();
	
	  // -------------------------- box sizing -------------------------- //
	
	  boxSizingProp = getStyleProperty('boxSizing');
	
	  /**
	   * WebKit measures the outer-width on style.width on border-box elems
	   * IE & Firefox measures the inner-width
	   */
	  if ( boxSizingProp ) {
	    var div = document.createElement('div');
	    div.style.width = '200px';
	    div.style.padding = '1px 2px 3px 4px';
	    div.style.borderStyle = 'solid';
	    div.style.borderWidth = '1px 2px 3px 4px';
	    div.style[ boxSizingProp ] = 'border-box';
	
	    var body = document.body || document.documentElement;
	    body.appendChild( div );
	    var style = getStyle( div );
	
	    isBoxSizeOuter = getStyleSize( style.width ) === 200;
	    body.removeChild( div );
	  }
	
	}
	
	// -------------------------- getSize -------------------------- //
	
	function getSize( elem ) {
	  setup();
	
	  // use querySeletor if elem is string
	  if ( typeof elem === 'string' ) {
	    elem = document.querySelector( elem );
	  }
	
	  // do not proceed on non-objects
	  if ( !elem || typeof elem !== 'object' || !elem.nodeType ) {
	    return;
	  }
	
	  var style = getStyle( elem );
	
	  // if hidden, everything is 0
	  if ( style.display === 'none' ) {
	    return getZeroSize();
	  }
	
	  var size = {};
	  size.width = elem.offsetWidth;
	  size.height = elem.offsetHeight;
	
	  var isBorderBox = size.isBorderBox = !!( boxSizingProp &&
	    style[ boxSizingProp ] && style[ boxSizingProp ] === 'border-box' );
	
	  // get all measurements
	  for ( var i=0, len = measurements.length; i < len; i++ ) {
	    var measurement = measurements[i];
	    var value = style[ measurement ];
	    value = mungeNonPixel( elem, value );
	    var num = parseFloat( value );
	    // any 'auto', 'medium' value will be 0
	    size[ measurement ] = !isNaN( num ) ? num : 0;
	  }
	
	  var paddingWidth = size.paddingLeft + size.paddingRight;
	  var paddingHeight = size.paddingTop + size.paddingBottom;
	  var marginWidth = size.marginLeft + size.marginRight;
	  var marginHeight = size.marginTop + size.marginBottom;
	  var borderWidth = size.borderLeftWidth + size.borderRightWidth;
	  var borderHeight = size.borderTopWidth + size.borderBottomWidth;
	
	  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;
	
	  // overwrite width and height if we can get it from style
	  var styleWidth = getStyleSize( style.width );
	  if ( styleWidth !== false ) {
	    size.width = styleWidth +
	      // add padding and border unless it's already including it
	      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );
	  }
	
	  var styleHeight = getStyleSize( style.height );
	  if ( styleHeight !== false ) {
	    size.height = styleHeight +
	      // add padding and border unless it's already including it
	      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );
	  }
	
	  size.innerWidth = size.width - ( paddingWidth + borderWidth );
	  size.innerHeight = size.height - ( paddingHeight + borderHeight );
	
	  size.outerWidth = size.width + marginWidth;
	  size.outerHeight = size.height + marginHeight;
	
	  return size;
	}
	
	// IE8 returns percent values, not pixels
	// taken from jQuery's curCSS
	function mungeNonPixel( elem, value ) {
	  // IE8 and has percent value
	  if ( window.getComputedStyle || value.indexOf('%') === -1 ) {
	    return value;
	  }
	  var style = elem.style;
	  // Remember the original values
	  var left = style.left;
	  var rs = elem.runtimeStyle;
	  var rsLeft = rs && rs.left;
	
	  // Put in the new values to get a computed value out
	  if ( rsLeft ) {
	    rs.left = elem.currentStyle.left;
	  }
	  style.left = value;
	  value = style.pixelLeft;
	
	  // Revert the changed values
	  style.left = left;
	  if ( rsLeft ) {
	    rs.left = rsLeft;
	  }
	
	  return value;
	}
	
	return getSize;
	
	}
	
	// transport
	if ( true ) {
	  // AMD for RequireJS
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __WEBPACK_LOCAL_MODULE_2__ ], __WEBPACK_AMD_DEFINE_FACTORY__ = (defineGetSize), __WEBPACK_LOCAL_MODULE_3__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	} else if ( typeof exports === 'object' ) {
	  // CommonJS for Component
	  module.exports = defineGetSize( require('desandro-get-style-property') );
	} else {
	  // browser global
	  window.getSize = defineGetSize( window.getStyleProperty );
	}
	
	})( window );
	
	/*!
	 * eventie v1.0.6
	 * event binding helper
	 *   eventie.bind( elem, 'click', myFn )
	 *   eventie.unbind( elem, 'click', myFn )
	 * MIT license
	 */
	
	/*jshint browser: true, undef: true, unused: true */
	/*global define: false, module: false */
	
	( function( window ) {
	
	
	
	var docElem = document.documentElement;
	
	var bind = function() {};
	
	function getIEEvent( obj ) {
	  var event = window.event;
	  // add event.target
	  event.target = event.target || event.srcElement || obj;
	  return event;
	}
	
	if ( docElem.addEventListener ) {
	  bind = function( obj, type, fn ) {
	    obj.addEventListener( type, fn, false );
	  };
	} else if ( docElem.attachEvent ) {
	  bind = function( obj, type, fn ) {
	    obj[ type + fn ] = fn.handleEvent ?
	      function() {
	        var event = getIEEvent( obj );
	        fn.handleEvent.call( fn, event );
	      } :
	      function() {
	        var event = getIEEvent( obj );
	        fn.call( obj, event );
	      };
	    obj.attachEvent( "on" + type, obj[ type + fn ] );
	  };
	}
	
	var unbind = function() {};
	
	if ( docElem.removeEventListener ) {
	  unbind = function( obj, type, fn ) {
	    obj.removeEventListener( type, fn, false );
	  };
	} else if ( docElem.detachEvent ) {
	  unbind = function( obj, type, fn ) {
	    obj.detachEvent( "on" + type, obj[ type + fn ] );
	    try {
	      delete obj[ type + fn ];
	    } catch ( err ) {
	      // can't delete window object properties
	      obj[ type + fn ] = undefined;
	    }
	  };
	}
	
	var eventie = {
	  bind: bind,
	  unbind: unbind
	};
	
	// ----- module definition ----- //
	
	if ( true ) {
	  // AMD
	  !(__WEBPACK_AMD_DEFINE_FACTORY__ = (eventie), __WEBPACK_LOCAL_MODULE_4__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__));
	} else if ( typeof exports === 'object' ) {
	  // CommonJS
	  module.exports = eventie;
	} else {
	  // browser global
	  window.eventie = eventie;
	}
	
	})( window );
	
	/*!
	 * EventEmitter v4.2.11 - git.io/ee
	 * Unlicense - http://unlicense.org/
	 * Oliver Caldwell - http://oli.me.uk/
	 * @preserve
	 */
	
	;(function () {
	    
	
	    /**
	     * Class for managing events.
	     * Can be extended to provide event functionality in other classes.
	     *
	     * @class EventEmitter Manages event registering and emitting.
	     */
	    function EventEmitter() {}
	
	    // Shortcuts to improve speed and size
	    var proto = EventEmitter.prototype;
	    var exports = this;
	    var originalGlobalValue = exports.EventEmitter;
	
	    /**
	     * Finds the index of the listener for the event in its storage array.
	     *
	     * @param {Function[]} listeners Array of listeners to search through.
	     * @param {Function} listener Method to look for.
	     * @return {Number} Index of the specified listener, -1 if not found
	     * @api private
	     */
	    function indexOfListener(listeners, listener) {
	        var i = listeners.length;
	        while (i--) {
	            if (listeners[i].listener === listener) {
	                return i;
	            }
	        }
	
	        return -1;
	    }
	
	    /**
	     * Alias a method while keeping the context correct, to allow for overwriting of target method.
	     *
	     * @param {String} name The name of the target method.
	     * @return {Function} The aliased method
	     * @api private
	     */
	    function alias(name) {
	        return function aliasClosure() {
	            return this[name].apply(this, arguments);
	        };
	    }
	
	    /**
	     * Returns the listener array for the specified event.
	     * Will initialise the event object and listener arrays if required.
	     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
	     * Each property in the object response is an array of listener functions.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Function[]|Object} All listener functions for the event.
	     */
	    proto.getListeners = function getListeners(evt) {
	        var events = this._getEvents();
	        var response;
	        var key;
	
	        // Return a concatenated array of all matching events if
	        // the selector is a regular expression.
	        if (evt instanceof RegExp) {
	            response = {};
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    response[key] = events[key];
	                }
	            }
	        }
	        else {
	            response = events[evt] || (events[evt] = []);
	        }
	
	        return response;
	    };
	
	    /**
	     * Takes a list of listener objects and flattens it into a list of listener functions.
	     *
	     * @param {Object[]} listeners Raw listener objects.
	     * @return {Function[]} Just the listener functions.
	     */
	    proto.flattenListeners = function flattenListeners(listeners) {
	        var flatListeners = [];
	        var i;
	
	        for (i = 0; i < listeners.length; i += 1) {
	            flatListeners.push(listeners[i].listener);
	        }
	
	        return flatListeners;
	    };
	
	    /**
	     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Object} All listener functions for an event in an object.
	     */
	    proto.getListenersAsObject = function getListenersAsObject(evt) {
	        var listeners = this.getListeners(evt);
	        var response;
	
	        if (listeners instanceof Array) {
	            response = {};
	            response[evt] = listeners;
	        }
	
	        return response || listeners;
	    };
	
	    /**
	     * Adds a listener function to the specified event.
	     * The listener will not be added if it is a duplicate.
	     * If the listener returns true then it will be removed after it is called.
	     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListener = function addListener(evt, listener) {
	        var listeners = this.getListenersAsObject(evt);
	        var listenerIsWrapped = typeof listener === 'object';
	        var key;
	
	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
	                listeners[key].push(listenerIsWrapped ? listener : {
	                    listener: listener,
	                    once: false
	                });
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of addListener
	     */
	    proto.on = alias('addListener');
	
	    /**
	     * Semi-alias of addListener. It will add a listener that will be
	     * automatically removed after its first execution.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addOnceListener = function addOnceListener(evt, listener) {
	        return this.addListener(evt, {
	            listener: listener,
	            once: true
	        });
	    };
	
	    /**
	     * Alias of addOnceListener.
	     */
	    proto.once = alias('addOnceListener');
	
	    /**
	     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
	     * You need to tell it what event names should be matched by a regex.
	     *
	     * @param {String} evt Name of the event to create.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvent = function defineEvent(evt) {
	        this.getListeners(evt);
	        return this;
	    };
	
	    /**
	     * Uses defineEvent to define multiple events.
	     *
	     * @param {String[]} evts An array of event names to define.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvents = function defineEvents(evts) {
	        for (var i = 0; i < evts.length; i += 1) {
	            this.defineEvent(evts[i]);
	        }
	        return this;
	    };
	
	    /**
	     * Removes a listener function from the specified event.
	     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to remove the listener from.
	     * @param {Function} listener Method to remove from the event.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListener = function removeListener(evt, listener) {
	        var listeners = this.getListenersAsObject(evt);
	        var index;
	        var key;
	
	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key)) {
	                index = indexOfListener(listeners[key], listener);
	
	                if (index !== -1) {
	                    listeners[key].splice(index, 1);
	                }
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of removeListener
	     */
	    proto.off = alias('removeListener');
	
	    /**
	     * Adds listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
	     * You can also pass it a regular expression to add the array of listeners to all events that match it.
	     * Yeah, this function does quite a bit. That's probably a bad thing.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListeners = function addListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(false, evt, listeners);
	    };
	
	    /**
	     * Removes listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be removed.
	     * You can also pass it a regular expression to remove the listeners from all events that match it.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListeners = function removeListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(true, evt, listeners);
	    };
	
	    /**
	     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
	     * The first argument will determine if the listeners are removed (true) or added (false).
	     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be added/removed.
	     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
	     *
	     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
	        var i;
	        var value;
	        var single = remove ? this.removeListener : this.addListener;
	        var multiple = remove ? this.removeListeners : this.addListeners;
	
	        // If evt is an object then pass each of its properties to this method
	        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
	            for (i in evt) {
	                if (evt.hasOwnProperty(i) && (value = evt[i])) {
	                    // Pass the single listener straight through to the singular method
	                    if (typeof value === 'function') {
	                        single.call(this, i, value);
	                    }
	                    else {
	                        // Otherwise pass back to the multiple function
	                        multiple.call(this, i, value);
	                    }
	                }
	            }
	        }
	        else {
	            // So evt must be a string
	            // And listeners must be an array of listeners
	            // Loop over it and pass each one to the multiple method
	            i = listeners.length;
	            while (i--) {
	                single.call(this, evt, listeners[i]);
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Removes all listeners from a specified event.
	     * If you do not specify an event then all listeners will be removed.
	     * That means every event will be emptied.
	     * You can also pass a regex to remove all events that match it.
	     *
	     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeEvent = function removeEvent(evt) {
	        var type = typeof evt;
	        var events = this._getEvents();
	        var key;
	
	        // Remove different things depending on the state of evt
	        if (type === 'string') {
	            // Remove all listeners for the specified event
	            delete events[evt];
	        }
	        else if (evt instanceof RegExp) {
	            // Remove all events matching the regex.
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    delete events[key];
	                }
	            }
	        }
	        else {
	            // Remove all listeners in all events
	            delete this._events;
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of removeEvent.
	     *
	     * Added to mirror the node API.
	     */
	    proto.removeAllListeners = alias('removeEvent');
	
	    /**
	     * Emits an event of your choice.
	     * When emitted, every listener attached to that event will be executed.
	     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
	     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
	     * So they will not arrive within the array on the other side, they will be separate.
	     * You can also pass a regular expression to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {Array} [args] Optional array of arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emitEvent = function emitEvent(evt, args) {
	        var listeners = this.getListenersAsObject(evt);
	        var listener;
	        var i;
	        var key;
	        var response;
	
	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key)) {
	                i = listeners[key].length;
	
	                while (i--) {
	                    // If the listener returns true then it shall be removed from the event
	                    // The function is executed either with a basic call or an apply if there is an args array
	                    listener = listeners[key][i];
	
	                    if (listener.once === true) {
	                        this.removeListener(evt, listener.listener);
	                    }
	
	                    response = listener.listener.apply(this, args || []);
	
	                    if (response === this._getOnceReturnValue()) {
	                        this.removeListener(evt, listener.listener);
	                    }
	                }
	            }
	        }
	
	        return this;
	    };
	
	    /**
	     * Alias of emitEvent
	     */
	    proto.trigger = alias('emitEvent');
	
	    /**
	     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
	     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {...*} Optional additional arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emit = function emit(evt) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        return this.emitEvent(evt, args);
	    };
	
	    /**
	     * Sets the current value to check against when executing listeners. If a
	     * listeners return value matches the one set here then it will be removed
	     * after execution. This value defaults to true.
	     *
	     * @param {*} value The new value to check for when executing listeners.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.setOnceReturnValue = function setOnceReturnValue(value) {
	        this._onceReturnValue = value;
	        return this;
	    };
	
	    /**
	     * Fetches the current value to check against when executing listeners. If
	     * the listeners return value matches this one then it should be removed
	     * automatically. It will return true by default.
	     *
	     * @return {*|Boolean} The current value to check for or the default, true.
	     * @api private
	     */
	    proto._getOnceReturnValue = function _getOnceReturnValue() {
	        if (this.hasOwnProperty('_onceReturnValue')) {
	            return this._onceReturnValue;
	        }
	        else {
	            return true;
	        }
	    };
	
	    /**
	     * Fetches the events object and creates one if required.
	     *
	     * @return {Object} The events storage object.
	     * @api private
	     */
	    proto._getEvents = function _getEvents() {
	        return this._events || (this._events = {});
	    };
	
	    /**
	     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
	     *
	     * @return {Function} Non conflicting EventEmitter class.
	     */
	    EventEmitter.noConflict = function noConflict() {
	        exports.EventEmitter = originalGlobalValue;
	        return EventEmitter;
	    };
	
	    // Expose the class either via AMD, CommonJS or the global object
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_5__ = (function () {
	            return EventEmitter;
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	    }
	    else if (typeof module === 'object' && module.exports){
	        module.exports = EventEmitter;
	    }
	    else {
	        exports.EventEmitter = EventEmitter;
	    }
	}.call(this));
	
	/*!
	 * Unipointer v1.1.0
	 * base class for doing one thing with pointer event
	 * MIT license
	 */
	
	/*jshint browser: true, undef: true, unused: true, strict: true */
	/*global define: false, module: false, require: false */
	
	( function( window, factory ) {
	  
	  // universal module definition
	
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	      __WEBPACK_LOCAL_MODULE_5__,
	      __WEBPACK_LOCAL_MODULE_4__
	    ], __WEBPACK_LOCAL_MODULE_6__ = (function( EventEmitter, eventie ) {
	      return factory( window, EventEmitter, eventie );
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      window,
	      require('wolfy87-eventemitter'),
	      require('eventie')
	    );
	  } else {
	    // browser global
	    window.Unipointer = factory(
	      window,
	      window.EventEmitter,
	      window.eventie
	    );
	  }
	
	}( window, function factory( window, EventEmitter, eventie ) {
	
	
	
	function noop() {}
	
	function Unipointer() {}
	
	// inherit EventEmitter
	Unipointer.prototype = new EventEmitter();
	
	Unipointer.prototype.bindStartEvent = function( elem ) {
	  this._bindStartEvent( elem, true );
	};
	
	Unipointer.prototype.unbindStartEvent = function( elem ) {
	  this._bindStartEvent( elem, false );
	};
	
	/**
	 * works as unbinder, as you can ._bindStart( false ) to unbind
	 * @param {Boolean} isBind - will unbind if falsey
	 */
	Unipointer.prototype._bindStartEvent = function( elem, isBind ) {
	  // munge isBind, default to true
	  isBind = isBind === undefined ? true : !!isBind;
	  var bindMethod = isBind ? 'bind' : 'unbind';
	
	  if ( window.navigator.pointerEnabled ) {
	    // W3C Pointer Events, IE11. See https://coderwall.com/p/mfreca
	    eventie[ bindMethod ]( elem, 'pointerdown', this );
	  } else if ( window.navigator.msPointerEnabled ) {
	    // IE10 Pointer Events
	    eventie[ bindMethod ]( elem, 'MSPointerDown', this );
	  } else {
	    // listen for both, for devices like Chrome Pixel
	    eventie[ bindMethod ]( elem, 'mousedown', this );
	    eventie[ bindMethod ]( elem, 'touchstart', this );
	  }
	};
	
	// trigger handler methods for events
	Unipointer.prototype.handleEvent = function( event ) {
	  var method = 'on' + event.type;
	  if ( this[ method ] ) {
	    this[ method ]( event );
	  }
	};
	
	// returns the touch that we're keeping track of
	Unipointer.prototype.getTouch = function( touches ) {
	  for ( var i=0, len = touches.length; i < len; i++ ) {
	    var touch = touches[i];
	    if ( touch.identifier == this.pointerIdentifier ) {
	      return touch;
	    }
	  }
	};
	
	// ----- start event ----- //
	
	Unipointer.prototype.onmousedown = function( event ) {
	  // dismiss clicks from right or middle buttons
	  var button = event.button;
	  if ( button && ( button !== 0 && button !== 1 ) ) {
	    return;
	  }
	  this._pointerDown( event, event );
	};
	
	Unipointer.prototype.ontouchstart = function( event ) {
	  this._pointerDown( event, event.changedTouches[0] );
	};
	
	Unipointer.prototype.onMSPointerDown =
	Unipointer.prototype.onpointerdown = function( event ) {
	  this._pointerDown( event, event );
	};
	
	/**
	 * pointer start
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Unipointer.prototype._pointerDown = function( event, pointer ) {
	  // dismiss other pointers
	  if ( this.isPointerDown ) {
	    return;
	  }
	
	  this.isPointerDown = true;
	  // save pointer identifier to match up touch events
	  this.pointerIdentifier = pointer.pointerId !== undefined ?
	    // pointerId for pointer events, touch.indentifier for touch events
	    pointer.pointerId : pointer.identifier;
	
	  this.pointerDown( event, pointer );
	};
	
	Unipointer.prototype.pointerDown = function( event, pointer ) {
	  this._bindPostStartEvents( event );
	  this.emitEvent( 'pointerDown', [ event, pointer ] );
	};
	
	// hash of events to be bound after start event
	var postStartEvents = {
	  mousedown: [ 'mousemove', 'mouseup' ],
	  touchstart: [ 'touchmove', 'touchend', 'touchcancel' ],
	  pointerdown: [ 'pointermove', 'pointerup', 'pointercancel' ],
	  MSPointerDown: [ 'MSPointerMove', 'MSPointerUp', 'MSPointerCancel' ]
	};
	
	Unipointer.prototype._bindPostStartEvents = function( event ) {
	  if ( !event ) {
	    return;
	  }
	  // get proper events to match start event
	  var events = postStartEvents[ event.type ];
	  // IE8 needs to be bound to document
	  var node = event.preventDefault ? window : document;
	  // bind events to node
	  for ( var i=0, len = events.length; i < len; i++ ) {
	    var evnt = events[i];
	    eventie.bind( node, evnt, this );
	  }
	  // save these arguments
	  this._boundPointerEvents = {
	    events: events,
	    node: node
	  };
	};
	
	Unipointer.prototype._unbindPostStartEvents = function() {
	  var args = this._boundPointerEvents;
	  // IE8 can trigger dragEnd twice, check for _boundEvents
	  if ( !args || !args.events ) {
	    return;
	  }
	
	  for ( var i=0, len = args.events.length; i < len; i++ ) {
	    var event = args.events[i];
	    eventie.unbind( args.node, event, this );
	  }
	  delete this._boundPointerEvents;
	};
	
	// ----- move event ----- //
	
	Unipointer.prototype.onmousemove = function( event ) {
	  this._pointerMove( event, event );
	};
	
	Unipointer.prototype.onMSPointerMove =
	Unipointer.prototype.onpointermove = function( event ) {
	  if ( event.pointerId == this.pointerIdentifier ) {
	    this._pointerMove( event, event );
	  }
	};
	
	Unipointer.prototype.ontouchmove = function( event ) {
	  var touch = this.getTouch( event.changedTouches );
	  if ( touch ) {
	    this._pointerMove( event, touch );
	  }
	};
	
	/**
	 * pointer move
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 * @private
	 */
	Unipointer.prototype._pointerMove = function( event, pointer ) {
	  this.pointerMove( event, pointer );
	};
	
	// public
	Unipointer.prototype.pointerMove = function( event, pointer ) {
	  this.emitEvent( 'pointerMove', [ event, pointer ] );
	};
	
	// ----- end event ----- //
	
	
	Unipointer.prototype.onmouseup = function( event ) {
	  this._pointerUp( event, event );
	};
	
	Unipointer.prototype.onMSPointerUp =
	Unipointer.prototype.onpointerup = function( event ) {
	  if ( event.pointerId == this.pointerIdentifier ) {
	    this._pointerUp( event, event );
	  }
	};
	
	Unipointer.prototype.ontouchend = function( event ) {
	  var touch = this.getTouch( event.changedTouches );
	  if ( touch ) {
	    this._pointerUp( event, touch );
	  }
	};
	
	/**
	 * pointer up
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 * @private
	 */
	Unipointer.prototype._pointerUp = function( event, pointer ) {
	  this._pointerDone();
	  this.pointerUp( event, pointer );
	};
	
	// public
	Unipointer.prototype.pointerUp = function( event, pointer ) {
	  this.emitEvent( 'pointerUp', [ event, pointer ] );
	};
	
	// ----- pointer done ----- //
	
	// triggered on pointer up & pointer cancel
	Unipointer.prototype._pointerDone = function() {
	  // reset properties
	  this.isPointerDown = false;
	  delete this.pointerIdentifier;
	  // remove events
	  this._unbindPostStartEvents();
	  this.pointerDone();
	};
	
	Unipointer.prototype.pointerDone = noop;
	
	// ----- pointer cancel ----- //
	
	Unipointer.prototype.onMSPointerCancel =
	Unipointer.prototype.onpointercancel = function( event ) {
	  if ( event.pointerId == this.pointerIdentifier ) {
	    this._pointerCancel( event, event );
	  }
	};
	
	Unipointer.prototype.ontouchcancel = function( event ) {
	  var touch = this.getTouch( event.changedTouches );
	  if ( touch ) {
	    this._pointerCancel( event, touch );
	  }
	};
	
	/**
	 * pointer cancel
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 * @private
	 */
	Unipointer.prototype._pointerCancel = function( event, pointer ) {
	  this._pointerDone();
	  this.pointerCancel( event, pointer );
	};
	
	// public
	Unipointer.prototype.pointerCancel = function( event, pointer ) {
	  this.emitEvent( 'pointerCancel', [ event, pointer ] );
	};
	
	// -----  ----- //
	
	// utility function for getting x/y cooridinates from event, because IE8
	Unipointer.getPointerPoint = function( pointer ) {
	  return {
	    x: pointer.pageX !== undefined ? pointer.pageX : pointer.clientX,
	    y: pointer.pageY !== undefined ? pointer.pageY : pointer.clientY
	  };
	};
	
	// -----  ----- //
	
	return Unipointer;
	
	}));
	
	/*!
	 * Unidragger v1.1.0
	 * Draggable base class
	 * MIT license
	 */
	
	/*jshint browser: true, unused: true, undef: true, strict: true */
	
	( function( window, factory ) {
	  /*global define: false, module: false, require: false */
	  
	  // universal module definition
	
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	      __WEBPACK_LOCAL_MODULE_4__,
	      __WEBPACK_LOCAL_MODULE_6__
	    ], __WEBPACK_LOCAL_MODULE_7__ = (function( eventie, Unipointer ) {
	      return factory( window, eventie, Unipointer );
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      window,
	      require('eventie'),
	      require('unipointer')
	    );
	  } else {
	    // browser global
	    window.Unidragger = factory(
	      window,
	      window.eventie,
	      window.Unipointer
	    );
	  }
	
	}( window, function factory( window, eventie, Unipointer ) {
	
	
	
	// -----  ----- //
	
	function noop() {}
	
	// handle IE8 prevent default
	function preventDefaultEvent( event ) {
	  if ( event.preventDefault ) {
	    event.preventDefault();
	  } else {
	    event.returnValue = false;
	  }
	}
	
	function getParentLink( elem ) {
	  while ( elem != document.body ) {
	    elem = elem.parentNode;
	    if ( elem.nodeName == 'A' ) {
	      return elem;
	    }
	  }
	}
	
	// -------------------------- Unidragger -------------------------- //
	
	function Unidragger() {}
	
	// inherit Unipointer & EventEmitter
	Unidragger.prototype = new Unipointer();
	
	// ----- bind start ----- //
	
	Unidragger.prototype.bindHandles = function() {
	  this._bindHandles( true );
	};
	
	Unidragger.prototype.unbindHandles = function() {
	  this._bindHandles( false );
	};
	
	var navigator = window.navigator;
	/**
	 * works as unbinder, as you can .bindHandles( false ) to unbind
	 * @param {Boolean} isBind - will unbind if falsey
	 */
	Unidragger.prototype._bindHandles = function( isBind ) {
	  // munge isBind, default to true
	  isBind = isBind === undefined ? true : !!isBind;
	  // extra bind logic
	  var binderExtra;
	  if ( navigator.pointerEnabled ) {
	    binderExtra = function( handle ) {
	      // disable scrolling on the element
	      handle.style.touchAction = isBind ? 'none' : '';
	    };
	  } else if ( navigator.msPointerEnabled ) {
	    binderExtra = function( handle ) {
	      // disable scrolling on the element
	      handle.style.msTouchAction = isBind ? 'none' : '';
	    };
	  } else {
	    binderExtra = function() {
	      // TODO re-enable img.ondragstart when unbinding
	      if ( isBind ) {
	        disableImgOndragstart( handle );
	      }
	    };
	  }
	  // bind each handle
	  var bindMethod = isBind ? 'bind' : 'unbind';
	  for ( var i=0, len = this.handles.length; i < len; i++ ) {
	    var handle = this.handles[i];
	    this._bindStartEvent( handle, isBind );
	    binderExtra( handle );
	    eventie[ bindMethod ]( handle, 'click', this );
	  }
	};
	
	// remove default dragging interaction on all images in IE8
	// IE8 does its own drag thing on images, which messes stuff up
	
	function noDragStart() {
	  return false;
	}
	
	// TODO replace this with a IE8 test
	var isIE8 = 'attachEvent' in document.documentElement;
	
	// IE8 only
	var disableImgOndragstart = !isIE8 ? noop : function( handle ) {
	
	  if ( handle.nodeName == 'IMG' ) {
	    handle.ondragstart = noDragStart;
	  }
	
	  var images = handle.querySelectorAll('img');
	  for ( var i=0, len = images.length; i < len; i++ ) {
	    var img = images[i];
	    img.ondragstart = noDragStart;
	  }
	};
	
	// ----- start event ----- //
	
	var allowTouchstartNodes = Unidragger.allowTouchstartNodes = {
	  INPUT: true,
	  A: true,
	  BUTTON: true,
	  SELECT: true
	};
	
	/**
	 * pointer start
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Unidragger.prototype.pointerDown = function( event, pointer ) {
	  this._dragPointerDown( event, pointer );
	  // kludge to blur focused inputs in dragger
	  var focused = document.activeElement;
	  if ( focused && focused.blur ) {
	    focused.blur();
	  }
	  // bind move and end events
	  this._bindPostStartEvents( event );
	  this.emitEvent( 'pointerDown', [ event, pointer ] );
	};
	
	// base pointer down logic
	Unidragger.prototype._dragPointerDown = function( event, pointer ) {
	  // track to see when dragging starts
	  this.pointerDownPoint = Unipointer.getPointerPoint( pointer );
	
	  var targetNodeName = event.target.nodeName;
	  // HACK iOS, allow clicks on buttons, inputs, and links, or children of links
	  var isTouchstartNode = event.type == 'touchstart' &&
	    ( allowTouchstartNodes[ targetNodeName ] || getParentLink( event.target ) );
	  // do not prevent default on touchstart nodes or <select>
	  if ( !isTouchstartNode && targetNodeName != 'SELECT' ) {
	    preventDefaultEvent( event );
	  }
	};
	
	// ----- move event ----- //
	
	/**
	 * drag move
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Unidragger.prototype.pointerMove = function( event, pointer ) {
	  var moveVector = this._dragPointerMove( event, pointer );
	  this.emitEvent( 'pointerMove', [ event, pointer, moveVector ] );
	  this._dragMove( event, pointer, moveVector );
	};
	
	// base pointer move logic
	Unidragger.prototype._dragPointerMove = function( event, pointer ) {
	  var movePoint = Unipointer.getPointerPoint( pointer );
	  var moveVector = {
	    x: movePoint.x - this.pointerDownPoint.x,
	    y: movePoint.y - this.pointerDownPoint.y
	  };
	  // start drag if pointer has moved far enough to start drag
	  if ( !this.isDragging && this.hasDragStarted( moveVector ) ) {
	    this._dragStart( event, pointer );
	  }
	  return moveVector;
	};
	
	// condition if pointer has moved far enough to start drag
	Unidragger.prototype.hasDragStarted = function( moveVector ) {
	  return Math.abs( moveVector.x ) > 3 || Math.abs( moveVector.y ) > 3;
	};
	
	
	// ----- end event ----- //
	
	/**
	 * pointer up
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Unidragger.prototype.pointerUp = function( event, pointer ) {
	  this.emitEvent( 'pointerUp', [ event, pointer ] );
	  this._dragPointerUp( event, pointer );
	};
	
	Unidragger.prototype._dragPointerUp = function( event, pointer ) {
	  if ( this.isDragging ) {
	    this._dragEnd( event, pointer );
	  } else {
	    // pointer didn't move enough for drag to start
	    this._staticClick( event, pointer );
	  }
	};
	
	// -------------------------- drag -------------------------- //
	
	// dragStart
	Unidragger.prototype._dragStart = function( event, pointer ) {
	  this.isDragging = true;
	  this.dragStartPoint = Unidragger.getPointerPoint( pointer );
	  // prevent clicks
	  this.isPreventingClicks = true;
	
	  this.dragStart( event, pointer );
	};
	
	Unidragger.prototype.dragStart = function( event, pointer ) {
	  this.emitEvent( 'dragStart', [ event, pointer ] );
	};
	
	// dragMove
	Unidragger.prototype._dragMove = function( event, pointer, moveVector ) {
	  // do not drag if not dragging yet
	  if ( !this.isDragging ) {
	    return;
	  }
	
	  this.dragMove( event, pointer, moveVector );
	};
	
	Unidragger.prototype.dragMove = function( event, pointer, moveVector ) {
	  this.emitEvent( 'dragMove', [ event, pointer, moveVector ] );
	};
	
	// dragEnd
	Unidragger.prototype._dragEnd = function( event, pointer ) {
	  // set flags
	  this.isDragging = false;
	  // re-enable clicking async
	  var _this = this;
	  setTimeout( function() {
	    delete _this.isPreventingClicks;
	  });
	
	  this.dragEnd( event, pointer );
	};
	
	Unidragger.prototype.dragEnd = function( event, pointer ) {
	  this.emitEvent( 'dragEnd', [ event, pointer ] );
	};
	
	// ----- onclick ----- //
	
	// handle all clicks and prevent clicks when dragging
	Unidragger.prototype.onclick = function( event ) {
	  if ( this.isPreventingClicks ) {
	    preventDefaultEvent( event );
	  }
	};
	
	// ----- staticClick ----- //
	
	// triggered after pointer down & up with no/tiny movement
	Unidragger.prototype._staticClick = function( event, pointer ) {
	  // allow click in text input
	  if ( event.target.nodeName == 'INPUT' && event.target.type == 'text' ) {
	    event.target.focus();
	  }
	  this.staticClick( event, pointer );
	};
	
	Unidragger.prototype.staticClick = function( event, pointer ) {
	  this.emitEvent( 'staticClick', [ event, pointer ] );
	};
	
	// -----  ----- //
	
	Unidragger.getPointerPoint = function( pointer ) {
	  return {
	    x: pointer.pageX !== undefined ? pointer.pageX : pointer.clientX,
	    y: pointer.pageY !== undefined ? pointer.pageY : pointer.clientY
	  };
	};
	
	// -----  ----- //
	
	Unidragger.getPointerPoint = Unipointer.getPointerPoint;
	
	return Unidragger;
	
	}));
	
	/*!
	 * Draggabilly v1.2.4
	 * Make that shiz draggable
	 * http://draggabilly.desandro.com
	 * MIT license
	 */
	
	( function( window, factory ) {
	  
	
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __WEBPACK_LOCAL_MODULE_1__,
	        __WEBPACK_LOCAL_MODULE_2__,
	        __WEBPACK_LOCAL_MODULE_3__,
	        __WEBPACK_LOCAL_MODULE_7__
	      ], __WEBPACK_AMD_DEFINE_RESULT__ = function( classie, getStyleProperty, getSize, Unidragger ) {
	        return factory( window, classie, getStyleProperty, getSize, Unidragger );
	      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if ( typeof exports == 'object' ) {
	    // CommonJS
	    module.exports = factory(
	      window,
	      require('desandro-classie'),
	      require('desandro-get-style-property'),
	      require('get-size'),
	      require('unidragger')
	    );
	  } else {
	    // browser global
	    window.Draggabilly = factory(
	      window,
	      window.classie,
	      window.getStyleProperty,
	      window.getSize,
	      window.Unidragger
	    );
	  }
	
	}( window, function factory( window, classie, getStyleProperty, getSize, Unidragger ) {
	
	
	
	// vars
	var document = window.document;
	
	function noop() {}
	
	// -------------------------- helpers -------------------------- //
	
	// extend objects
	function extend( a, b ) {
	  for ( var prop in b ) {
	    a[ prop ] = b[ prop ];
	  }
	  return a;
	}
	
	// ----- get style ----- //
	
	var defView = document.defaultView;
	
	var getStyle = defView && defView.getComputedStyle ?
	  function( elem ) {
	    return defView.getComputedStyle( elem, null );
	  } :
	  function( elem ) {
	    return elem.currentStyle;
	  };
	
	
	// http://stackoverflow.com/a/384380/182183
	var isElement = ( typeof HTMLElement == 'object' ) ?
	  function isElementDOM2( obj ) {
	    return obj instanceof HTMLElement;
	  } :
	  function isElementQuirky( obj ) {
	    return obj && typeof obj == 'object' &&
	      obj.nodeType == 1 && typeof obj.nodeName == 'string';
	  };
	
	// -------------------------- requestAnimationFrame -------------------------- //
	
	// https://gist.github.com/1866474
	
	var lastTime = 0;
	var prefixes = 'webkit moz ms o'.split(' ');
	// get unprefixed rAF and cAF, if present
	var requestAnimationFrame = window.requestAnimationFrame;
	var cancelAnimationFrame = window.cancelAnimationFrame;
	// loop through vendor prefixes and get prefixed rAF and cAF
	var prefix;
	for( var i = 0; i < prefixes.length; i++ ) {
	  if ( requestAnimationFrame && cancelAnimationFrame ) {
	    break;
	  }
	  prefix = prefixes[i];
	  requestAnimationFrame = requestAnimationFrame || window[ prefix + 'RequestAnimationFrame' ];
	  cancelAnimationFrame  = cancelAnimationFrame  || window[ prefix + 'CancelAnimationFrame' ] ||
	                            window[ prefix + 'CancelRequestAnimationFrame' ];
	}
	
	// fallback to setTimeout and clearTimeout if either request/cancel is not supported
	if ( !requestAnimationFrame || !cancelAnimationFrame )  {
	  requestAnimationFrame = function( callback ) {
	    var currTime = new Date().getTime();
	    var timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );
	    var id = window.setTimeout( function() {
	      callback( currTime + timeToCall );
	    }, timeToCall );
	    lastTime = currTime + timeToCall;
	    return id;
	  };
	
	  cancelAnimationFrame = function( id ) {
	    window.clearTimeout( id );
	  };
	}
	
	// -------------------------- support -------------------------- //
	
	var transformProperty = getStyleProperty('transform');
	// TODO fix quick & dirty check for 3D support
	var is3d = !!getStyleProperty('perspective');
	
	var jQuery = window.jQuery;
	
	// --------------------------  -------------------------- //
	
	function Draggabilly( element, options ) {
	  // querySelector if string
	  this.element = typeof element == 'string' ?
	    document.querySelector( element ) : element;
	
	  if ( jQuery ) {
	    this.$element = jQuery( this.element );
	  }
	
	  // options
	  this.options = extend( {}, this.constructor.defaults );
	  this.option( options );
	
	  this._create();
	}
	
	// inherit Unidragger methods
	extend( Draggabilly.prototype, Unidragger.prototype );
	
	Draggabilly.defaults = {
	};
	
	/**
	 * set options
	 * @param {Object} opts
	 */
	Draggabilly.prototype.option = function( opts ) {
	  extend( this.options, opts );
	};
	
	Draggabilly.prototype._create = function() {
	
	  // properties
	  this.position = {};
	  this._getPosition();
	
	  this.startPoint = { x: 0, y: 0 };
	  this.dragPoint = { x: 0, y: 0 };
	
	  this.startPosition = extend( {}, this.position );
	
	  // set relative positioning
	  var style = getStyle( this.element );
	  if ( style.position != 'relative' && style.position != 'absolute' ) {
	    this.element.style.position = 'relative';
	  }
	
	  this.enable();
	  this.setHandles();
	
	};
	
	/**
	 * set this.handles and bind start events to 'em
	 */
	Draggabilly.prototype.setHandles = function() {
	  this.handles = this.options.handle ?
	    this.element.querySelectorAll( this.options.handle ) : [ this.element ];
	
	  this.bindHandles();
	};
	
	/**
	 * emits events via eventEmitter and jQuery events
	 * @param {String} type - name of event
	 * @param {Event} event - original event
	 * @param {Array} args - extra arguments
	 */
	Draggabilly.prototype.dispatchEvent = function( type, event, args ) {
	  var emitArgs = [ event ].concat( args );
	  this.emitEvent( type, emitArgs );
	  var jQuery = window.jQuery;
	  // trigger jQuery event
	  if ( jQuery && this.$element ) {
	    if ( event ) {
	      // create jQuery event
	      var $event = jQuery.Event( event );
	      $event.type = type;
	      this.$element.trigger( $event, args );
	    } else {
	      // just trigger with type if no event available
	      this.$element.trigger( type, args );
	    }
	  }
	};
	
	// -------------------------- position -------------------------- //
	
	// get left/top position from style
	Draggabilly.prototype._getPosition = function() {
	  // properties
	  var style = getStyle( this.element );
	
	  var x = parseInt( style.left, 10 );
	  var y = parseInt( style.top, 10 );
	
	  // clean up 'auto' or other non-integer values
	  this.position.x = isNaN( x ) ? 0 : x;
	  this.position.y = isNaN( y ) ? 0 : y;
	
	  this._addTransformPosition( style );
	};
	
	// add transform: translate( x, y ) to position
	Draggabilly.prototype._addTransformPosition = function( style ) {
	  if ( !transformProperty ) {
	    return;
	  }
	  var transform = style[ transformProperty ];
	  // bail out if value is 'none'
	  if ( transform.indexOf('matrix') !== 0 ) {
	    return;
	  }
	  // split matrix(1, 0, 0, 1, x, y)
	  var matrixValues = transform.split(',');
	  // translate X value is in 12th or 4th position
	  var xIndex = transform.indexOf('matrix3d') === 0 ? 12 : 4;
	  var translateX = parseInt( matrixValues[ xIndex ], 10 );
	  // translate Y value is in 13th or 5th position
	  var translateY = parseInt( matrixValues[ xIndex + 1 ], 10 );
	  this.position.x += translateX;
	  this.position.y += translateY;
	};
	
	// -------------------------- events -------------------------- //
	
	/**
	 * pointer start
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Draggabilly.prototype.pointerDown = function( event, pointer ) {
	  this._dragPointerDown( event, pointer );
	  // kludge to blur focused inputs in dragger
	  var focused = document.activeElement;
	  if ( focused && focused.blur ) {
	    focused.blur();
	  }
	  // bind move and end events
	  this._bindPostStartEvents( event );
	  classie.add( this.element, 'is-pointer-down' );
	  this.dispatchEvent( 'pointerDown', event, [ pointer ] );
	};
	
	/**
	 * drag move
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Draggabilly.prototype.pointerMove = function( event, pointer ) {
	  var moveVector = this._dragPointerMove( event, pointer );
	  this.dispatchEvent( 'pointerMove', event, [ pointer, moveVector ] );
	  this._dragMove( event, pointer, moveVector );
	};
	
	/**
	 * drag start
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Draggabilly.prototype.dragStart = function( event, pointer ) {
	  if ( !this.isEnabled ) {
	    return;
	  }
	  this._getPosition();
	  this.measureContainment();
	  // position _when_ drag began
	  this.startPosition.x = this.position.x;
	  this.startPosition.y = this.position.y;
	  // reset left/top style
	  this.setLeftTop();
	
	  this.dragPoint.x = 0;
	  this.dragPoint.y = 0;
	
	  // reset isDragging flag
	  this.isDragging = true;
	  classie.add( this.element, 'is-dragging' );
	  this.dispatchEvent( 'dragStart', event, [ pointer ] );
	  // start animation
	  this.animate();
	};
	
	Draggabilly.prototype.measureContainment = function() {
	  var containment = this.options.containment;
	  if ( !containment ) {
	    return;
	  }
	
	  this.size = getSize( this.element );
	  var elemRect = this.element.getBoundingClientRect();
	
	  // use element if element
	  var container = isElement( containment ) ? containment :
	    // fallback to querySelector if string
	    typeof containment == 'string' ? document.querySelector( containment ) :
	    // otherwise just `true`, use the parent
	    this.element.parentNode;
	
	  this.containerSize = getSize( container );
	  var containerRect = container.getBoundingClientRect();
	
	  this.relativeStartPosition = {
	    x: elemRect.left - containerRect.left,
	    y: elemRect.top  - containerRect.top
	  };
	};
	
	// ----- move event ----- //
	
	/**
	 * drag move
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Draggabilly.prototype.dragMove = function( event, pointer, moveVector ) {
	  if ( !this.isEnabled ) {
	    return;
	  }
	  var dragX = moveVector.x;
	  var dragY = moveVector.y;
	
	  var grid = this.options.grid;
	  var gridX = grid && grid[0];
	  var gridY = grid && grid[1];
	
	  dragX = applyGrid( dragX, gridX );
	  dragY = applyGrid( dragY, gridY );
	
	  dragX = this.containDrag( 'x', dragX, gridX );
	  dragY = this.containDrag( 'y', dragY, gridY );
	
	  // constrain to axis
	  dragX = this.options.axis == 'y' ? 0 : dragX;
	  dragY = this.options.axis == 'x' ? 0 : dragY;
	
	  this.position.x = this.startPosition.x + dragX;
	  this.position.y = this.startPosition.y + dragY;
	  // set dragPoint properties
	  this.dragPoint.x = dragX;
	  this.dragPoint.y = dragY;
	
	  this.dispatchEvent( 'dragMove', event, [ pointer, moveVector ] );
	};
	
	function applyGrid( value, grid, method ) {
	  method = method || 'round';
	  return grid ? Math[ method ]( value / grid ) * grid : value;
	}
	
	Draggabilly.prototype.containDrag = function( axis, drag, grid ) {
	  if ( !this.options.containment ) {
	    return drag;
	  }
	  var measure = axis == 'x' ? 'width' : 'height';
	
	  var rel = this.relativeStartPosition[ axis ];
	  var min = applyGrid( -rel, grid, 'ceil' );
	  var max = this.containerSize[ measure ] - rel - this.size[ measure ];
	  max = applyGrid( max, grid, 'floor' );
	  return  Math.min( max, Math.max( min, drag ) );
	};
	
	// ----- end event ----- //
	
	/**
	 * pointer up
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Draggabilly.prototype.pointerUp = function( event, pointer ) {
	  classie.remove( this.element, 'is-pointer-down' );
	  this.dispatchEvent( 'pointerUp', event, [ pointer ] );
	  this._dragPointerUp( event, pointer );
	};
	
	/**
	 * drag end
	 * @param {Event} event
	 * @param {Event or Touch} pointer
	 */
	Draggabilly.prototype.dragEnd = function( event, pointer ) {
	  if ( !this.isEnabled ) {
	    return;
	  }
	  this.isDragging = false;
	  // use top left position when complete
	  if ( transformProperty ) {
	    this.element.style[ transformProperty ] = '';
	    this.setLeftTop();
	  }
	  classie.remove( this.element, 'is-dragging' );
	  this.dispatchEvent( 'dragEnd', event, [ pointer ] );
	};
	
	// -------------------------- animation -------------------------- //
	
	Draggabilly.prototype.animate = function() {
	  // only render and animate if dragging
	  if ( !this.isDragging ) {
	    return;
	  }
	
	  this.positionDrag();
	
	  var _this = this;
	  requestAnimationFrame( function animateFrame() {
	    _this.animate();
	  });
	
	};
	
	// transform translate function
	var translate = is3d ?
	  function( x, y ) {
	    return 'translate3d( ' + x + 'px, ' + y + 'px, 0)';
	  } :
	  function( x, y ) {
	    return 'translate( ' + x + 'px, ' + y + 'px)';
	  };
	
	// left/top positioning
	Draggabilly.prototype.setLeftTop = function() {
	  this.element.style.left = this.position.x + 'px';
	  this.element.style.top  = this.position.y + 'px';
	};
	
	Draggabilly.prototype.positionDrag = transformProperty ?
	  function() {
	    // position with transform
	    this.element.style[ transformProperty ] = translate( this.dragPoint.x, this.dragPoint.y );
	  } : Draggabilly.prototype.setLeftTop;
	
	// ----- staticClick ----- //
	
	Draggabilly.prototype.staticClick = function( event, pointer ) {
	  this.dispatchEvent( 'staticClick', event, [ pointer ] );
	};
	
	// ----- methods ----- //
	
	Draggabilly.prototype.enable = function() {
	  this.isEnabled = true;
	};
	
	Draggabilly.prototype.disable = function() {
	  this.isEnabled = false;
	  if ( this.isDragging ) {
	    this.dragEnd();
	  }
	};
	
	Draggabilly.prototype.destroy = function() {
	  this.disable();
	  // reset styles
	  if ( transformProperty ) {
	    this.element.style[ transformProperty ] = '';
	  }
	  this.element.style.left = '';
	  this.element.style.top = '';
	  this.element.style.position = '';
	  // unbind handles
	  this.unbindHandles();
	  // remove jQuery data
	  if ( this.$element ) {
	    this.$element.removeData('draggabilly');
	  }
	};
	
	// ----- jQuery bridget ----- //
	
	// required for jQuery bridget
	Draggabilly.prototype._init = noop;
	
	if ( jQuery && jQuery.bridget ) {
	  jQuery.bridget( 'draggabilly', Draggabilly );
	}
	
	// -----  ----- //
	
	return Draggabilly;
	
	}));
	
	


/***/ },

/***/ 271:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Tile = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class Tile
	 * @extends React.Component
	 */
	
	var Tile = exports.Tile = function (_React$Component) {
	  _inherits(Tile, _React$Component);
	
	  /**
	   * @constructor
	   */
	
	  function Tile() {
	    _classCallCheck(this, Tile);
	
	    /**
	     * @state
	     */
	
	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Tile).call(this));
	
	    _this.state = {};
	    return _this;
	  }
	
	  /**
	   * Parse the scale attribute and find the corresponding css class.
	   *
	   * @param {String} scale
	   * @return {String} cssClass
	   */
	
	  _createClass(Tile, [{
	    key: 'parseScale',
	    value: function parseScale(scale) {
	      var size = scale.substr(0, 1);
	      var direction = scale.substr(1);
	
	      switch (direction) {
	        case 'h':
	          direction = 'horizontal';
	          break;
	        case 'b':
	          direction = "both";
	          break;
	        case 'v':
	          direction = "vertical";
	          break;
	      }
	
	      return "scale-" + size + "-" + direction;
	    }
	
	    /**
	     * @render
	     * @return {HTMLDivElement} container
	     */
	
	  }, {
	    key: 'render',
	    value: function render() {
	      var classNames = ["tile", "scale-1"];
	      var scale = this.props.scale;
	
	      /**
	       * If the propery scale exists
	       */
	      if (scale) classNames.push(this.parseScale(scale));
	
	      return _react2.default.createElement(
	        'div',
	        { className: classNames.join(" ") },
	        this.props.children
	      );
	    }
	  }]);
	
	  return Tile;
	}(_react2.default.Component);

/***/ },

/***/ 272:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.TransactionTileView = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _isotope = __webpack_require__(268);
	
	var _isotope2 = _interopRequireDefault(_isotope);
	
	var _packery = __webpack_require__(269);
	
	var _packery2 = _interopRequireDefault(_packery);
	
	var _draggabilly = __webpack_require__(270);
	
	var _draggabilly2 = _interopRequireDefault(_draggabilly);
	
	var _kendo = __webpack_require__(227);
	
	var _kendo2 = _interopRequireDefault(_kendo);
	
	var _tile = __webpack_require__(271);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class TransactionTileView
	 * @extends React.Component
	 */
	
	var TransactionTileView = exports.TransactionTileView = function (_React$Component) {
	    _inherits(TransactionTileView, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function TransactionTileView() {
	        _classCallCheck(this, TransactionTileView);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TransactionTileView).call(this));
	
	        _this.state = {};
	        return _this;
	    }
	
	    /**
	     * @componentDidMount
	     * @lifecycle
	     */
	
	    _createClass(TransactionTileView, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            console.log(jQuery);
	            var iso = new _packery2.default(this.refs.container, {
	                columnWidth: 30,
	                rowHeight: 30
	            });
	
	            var nodes = this.refs.container.childNodes;
	            for (var i = 0; i < nodes.length; i++) {
	                var node = nodes.item(i);
	                var draggie = new _draggabilly2.default(node);
	                // bind Draggabilly events to Packery
	                //new Packery( 'bindDraggabillyEvents', draggie );
	                //console.log(iso)
	                iso.bindDraggabillyEvents(draggie);
	            }
	        }
	
	        /**
	         * @render
	         * @return {HTMLDivElement} container
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { ref: 'container', className: 'tileview' },
	                _react2.default.createElement(
	                    _tile.Tile,
	                    null,
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'tile-inner blue' },
	                        _react2.default.createElement('i', { className: 'tile-icon fa fa-cart-arrow-down' }),
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            'Purchase Order'
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    _tile.Tile,
	                    null,
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'tile-inner green' },
	                        _react2.default.createElement('i', { className: 'tile-icon fa fa-suitcase' }),
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            'Sales Order'
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    _tile.Tile,
	                    null,
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'tile-inner' },
	                        _react2.default.createElement('i', { className: 'tile-icon fa fa-barcode' }),
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            'Product Barcode'
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    _tile.Tile,
	                    null,
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'tile-inner red' },
	                        _react2.default.createElement('i', { className: 'tile-icon fa fa-arrow-circle-o-down' }),
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            'Inward Material'
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    _tile.Tile,
	                    null,
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'tile-inner green' },
	                        _react2.default.createElement('i', { className: 'tile-icon fa fa-arrow-circle-o-up' }),
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            'Outward Material'
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    _tile.Tile,
	                    null,
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'tile-inner black' },
	                        _react2.default.createElement('i', { className: 'tile-icon fa fa-credit-card' }),
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            'Payment Voucher'
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return TransactionTileView;
	}(_react2.default.Component);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(225)))

/***/ },

/***/ 273:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.TileBar = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class TileBar
	 * @extends React.Component
	 */
	
	var TileBar = exports.TileBar = function (_React$Component) {
	    _inherits(TileBar, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function TileBar() {
	        _classCallCheck(this, TileBar);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TileBar).call(this));
	
	        _this.state = {};
	        return _this;
	    }
	
	    /**
	     * @render
	     * @return {HTMLDivElement} container
	     */
	
	    _createClass(TileBar, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'row' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'col-lg-12 col-md-12 col-sm-12 col-xs-12' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'row' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'col-lg-3 col-md-3 col-sm-6 col-xs-12' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'databox bg-white radius-bordered' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'databox-left bg-themesecondary' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'databox-piechart' },
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'easyPieChart block-center',
	                                                style: { width: 47, height: 47, lineHeight: 47 } },
	                                            _react2.default.createElement(
	                                                'span',
	                                                { className: 'white font-90' },
	                                                '50%'
	                                            )
	                                        )
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'databox-right' },
	                                    _react2.default.createElement(
	                                        'span',
	                                        { className: 'databox-number themesecondary' },
	                                        '28'
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'databox-text darkgray' },
	                                        'NEW TASKS'
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'databox-stat themesecondary radius-bordered' },
	                                        _react2.default.createElement('i', { className: 'stat-icon icon-lg fa fa-tasks' })
	                                    )
	                                )
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'col-lg-3 col-md-3 col-sm-6 col-xs-12' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'databox bg-white radius-bordered' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'databox-left bg-themethirdcolor' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'databox-piechart' },
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'easyPieChart ', style: { width: 47, height: 47, lineHeight: 47 } },
	                                            _react2.default.createElement(
	                                                'span',
	                                                { className: 'white font-90' },
	                                                '15%'
	                                            ),
	                                            _react2.default.createElement('canvas', { style: { width: 47, height: 47, lineHeight: 47 } })
	                                        )
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'databox-right' },
	                                    _react2.default.createElement(
	                                        'span',
	                                        { className: 'databox-number themethirdcolor' },
	                                        '5'
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'databox-text darkgray' },
	                                        'NEW MESSAGE'
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'databox-stat themethirdcolor radius-bordered' },
	                                        _react2.default.createElement('i', { className: 'stat-icon  icon-lg fa fa-envelope-o' })
	                                    )
	                                )
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'col-lg-3 col-md-3 col-sm-6 col-xs-12' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'databox bg-white radius-bordered' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'databox-left bg-themeprimary' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'databox-piechart' },
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'easyPieChart block-center',
	                                                'ui-jq': 'easyPieChart', style: { width: 47, height: 47, lineHeight: 47 } },
	                                            _react2.default.createElement(
	                                                'span',
	                                                { className: 'white font-90' },
	                                                '76%'
	                                            ),
	                                            _react2.default.createElement('canvas', { width: '94', height: '94', style: { width: 47, height: 47, lineHeight: 47 } })
	                                        )
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'databox-right' },
	                                    _react2.default.createElement(
	                                        'span',
	                                        { className: 'databox-number themeprimary' },
	                                        '92'
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'databox-text darkgray' },
	                                        'NEW USERS'
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'databox-state bg-themeprimary' },
	                                        _react2.default.createElement('i', { className: 'fa fa-check' })
	                                    )
	                                )
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'col-lg-3 col-md-3 col-sm-6 col-xs-12' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'databox bg-white radius-bordered' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'databox-left no-padding' },
	                                    _react2.default.createElement('img', { src: 'assets/img/avatars/John-Smith.jpg', style: { height: 65, width: 65 } })
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'databox-right padding-top-20' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'databox-stat palegreen' },
	                                        _react2.default.createElement('i', { className: 'stat-icon icon-xlg fa fa-phone' })
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'databox-text darkgray' },
	                                        'JOHN SMITH'
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'databox-text darkgray' },
	                                        'TOP RESELLER'
	                                    )
	                                )
	                            )
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return TileBar;
	}(_react2.default.Component);

/***/ },

/***/ 274:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MenuItem = exports.Menu = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class Menu
	 * @extends React.Component
	 */
	
	var Menu = exports.Menu = function (_React$Component) {
	  _inherits(Menu, _React$Component);
	
	  /**
	   * @constructor
	   */
	
	  function Menu() {
	    _classCallCheck(this, Menu);
	
	    /**
	     * @state
	     */
	
	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Menu).call(this));
	
	    _this.state = {};
	    return _this;
	  }
	
	  /**
	   * Life cycle method to be executed when the component is mounted to the dom.
	   *
	   * @componentDidMount
	   * @lifecycle
	   * @return {Void} undefined
	   */
	
	  _createClass(Menu, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      //create container manually and append to document body
	      this.container = document.createElement('div');
	
	      //append to document body
	      document.body.appendChild(this.container);
	
	      //renderMenu
	      this.renderMenu();
	    }
	
	    /**
	     * Life cycle method to be executed when the component is un mounted from the dom.
	     *
	     * @componentWillUnMount
	     * @lifecycle
	     * @return {Void} undefined
	     */
	
	  }, {
	    key: 'componentWillUnMount',
	    value: function componentWillUnMount() {
	      _reactDom2.default.unmountComponentAtNode(this.container);
	      //remove the container
	      document.body.removeChild(this.container);
	    }
	
	    /**
	     * Life cycle method to be executed when the component is updated to the dom.
	     *
	     * @componentDidUpdate
	     * @lifecycle
	     * @return {Void} undefined
	     */
	
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.renderMenu();
	    }
	
	    /**
	     * Render the menu items
	     *
	     * @return {Void} undefined
	     */
	
	  }, {
	    key: 'renderMenu',
	    value: function renderMenu() {
	      _reactDom2.default.render(this.props.children, this.container);
	    }
	
	    /**
	     * @render
	     * @return {HTMLDivElement} container
	     */
	
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement('div');
	    }
	  }]);
	
	  return Menu;
	}(_react2.default.Component);
	
	/**
	 * @class MenuItem
	 * @extends React.Component
	 */
	
	var MenuItem = exports.MenuItem = function (_React$Component2) {
	  _inherits(MenuItem, _React$Component2);
	
	  /**
	   * @constructor
	   */
	
	  function MenuItem() {
	    _classCallCheck(this, MenuItem);
	
	    /**
	     * @state
	     */
	
	    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(MenuItem).call(this));
	
	    _this2.state = {};
	    return _this2;
	  }
	
	  /**
	   * @render
	   * @return {HTMLDivElement} container
	   */
	
	  _createClass(MenuItem, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement('div', null);
	    }
	  }]);
	
	  return MenuItem;
	}(_react2.default.Component);

/***/ },

/***/ 275:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.CollapsibleSidebar = undefined;
	
	var _react = __webpack_require__(66);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(223);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	__webpack_require__(276);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class CollapsibleSidebar
	 * @extends React.Component
	 */
	
	var CollapsibleSidebar = exports.CollapsibleSidebar = function (_React$Component) {
	    _inherits(CollapsibleSidebar, _React$Component);
	
	    /**
	     * @constructor
	     */
	
	    function CollapsibleSidebar() {
	        _classCallCheck(this, CollapsibleSidebar);
	
	        /**
	         * @state
	         */
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CollapsibleSidebar).call(this));
	
	        _this.state = {
	            activeIndex: 0
	        };
	        return _this;
	    }
	
	    /**
	     * Change the tab
	     *
	     * @param {Number} index
	     * @return {Void} undefined
	     */
	
	    _createClass(CollapsibleSidebar, [{
	        key: 'onTabClick',
	        value: function onTabClick(index) {
	            this.setState({ activeIndex: this.state.activeIndex == index ? -1 : index });
	        }
	
	        /**
	         * Render the sidebar buttons
	         *
	         * @return {Array<HtmlElement>} div
	         */
	
	    }, {
	        key: 'renderButtons',
	        value: function renderButtons() {
	            var _this2 = this;
	
	            return this.props.children.map(function (item, index) {
	                /*
	                 * Check the active selected tab
	                 */
	                var activeClass = index == _this2.state.activeIndex ? "active" : "";
	
	                /*
	                 * return the child tab
	                 */
	                return _react2.default.createElement(
	                    'div',
	                    { key: index, className: "x-sidebar-button " + activeClass, onClick: function onClick() {
	                            return _this2.onTabClick(index);
	                        } },
	                    _react2.default.createElement('i', { className: 'fa fa-table' }),
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        item.props.title
	                    )
	                );
	            });
	        }
	    }, {
	        key: 'renderPanelBody',
	        value: function renderPanelBody() {
	            var _this3 = this;
	
	            return this.props.children.map(function (item, index) {
	                /*
	                 * Check the active selected tab
	                 */
	                var activeClass = index == _this3.state.activeIndex ? "active" : "";
	
	                /*
	                 * return the child tab
	                 */
	                return _react2.default.cloneElement(item, { key: index, className: 'x-sidebar-panel-body ' + activeClass });
	            });
	        }
	
	        /**
	         * @render
	         * @return {HTMLDivElement} container
	         */
	
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'x-sidebar' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'x-sidebar-panel-bar' },
	                    this.renderButtons()
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: "x-sidebar-panel " + (this.state.activeIndex == -1 ? " animated slideOutLeft" : "animated slideInLeft") },
	                    this.renderPanelBody()
	                )
	            );
	        }
	    }]);
	
	    return CollapsibleSidebar;
	}(_react2.default.Component);

/***/ },

/***/ 276:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 281:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 288:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 296:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 298:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }

});
//# sourceMappingURL=app.js.map